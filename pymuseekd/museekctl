#! /usr/bin/env python

# pymuseekd - Python tools for museekd
#
# Copyright (C) 2003-2004 Hyriand <hyriand@thegraveyard.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

VERSION = "0.0.8"

import struct
import socket
import sys
import time
import urllib
import pwd
import os
from select import select

#from museekdmsgs import *
#from museekdhelp import login
import messages, driver

def output(s):
	print s
	sys.stdout.flush()

def search(s, q):
	s.put(museekdsearch(q))
	code, data = s.get()
	m = museekdsearch(s).parse(data)
	output("got our ticket, %i\n" % m.ticket)
	process(ticket = m.ticket)

def print_transfers(transfers):
	for tr in transfers:
		if tr[2] == 11:
			state = tr[3]
		else:
			state = museekdhelp.states[tr[2]]
		print "%s\t%s\t%s\t%i\t%i\t%i" % (tr[0], tr[1], state, tr[4], tr[5], tr[6])
	print

def process(ticket = None, room = None, userinfo = None, usershares = None, monitor = 0):
	while 1:
	    try:
		r, w, e = select([s], [], [s], 1.0)
		if e:
			output("connection closed")
			break
		if not r:
			continue
		code, data = s.get()
		if code == 2:
			m = museekdserverstate().parse(data)
			if not m.state:
				print "disconnected from server"
			else:
				print "logged in as %s" % m.username
		elif code == 3:
			m = museekdroomstate().parse(data)
			print "rooms:"
			for r in m.roomlist.keys():
				print r
			for r in m.joined_rooms.keys():
				print "%s\t%i" % (r, m.joined[r])
		elif ticket is not None and code == 5:
			m = museekdsearchreply().parse(data)
			for r in m.results:
				if r[2] == "mp3" and len(r[3]) >= 3:
					d = "%i\t%i\t%i" % (r[3][0], r[3][1], r[3][2])
				else:
					d = "\t\t"
				url = "slsk://" + urllib.pathname2url("%s/%s" % (m.user, r[0].replace("\\", "/")))
				output("%s\t%i\t%i\t%s\t%i\t%s" % (url, r[1], m.speed, m.free and "Y" or "N", m.queue, d))
		elif room is not None and code == 6:
			m = museekdsaychatroom().parse(data)
			if room != "" and m.room != room:
				continue
			if m.line[:4] == "/me ":
				msg = "* %s %s" % (m.user, m.line[4:])
			else:
				msg = "%s: %s" % (m.user, m.line)
			output("%s [%s] %s" % (time.strftime("%H:%M"), m.room, msg))
		elif room is not None and code == 7:
			m = museekdjoinroom().parse(data)
			if room != "" and m.room != room:
				continue
			output("-- joined room %s (%i users)" % (m.room, len(m.users)))
		elif room is not None and code == 8:
			m = museekdleaveroom().parse(data)
			if room != "" and m.room != room:
				continue
			output("-- left room %s" % m.room)
		elif room is not None and code == 9:
			m = museekduserjoinedroom().parse(data)
			if room != "" and m.room != room:
				continue
			output("-- user %s joined room %s" % (m.user, m.room))
		elif room is not None and code == 10:
			m = museekduserleftroom().parse(data)
			if room != "" and m.room != room:
				continue
			output("-- user %s left room %s" % (m.user, m.room))
		elif code == 11:
			m = museekdprivatemessage().parse(data)
			if m.message[:4] == "/me ":
				msg = "* %s %s" % (m.user, m.message[4:])
			else:
				msg = "%s: %s" % (m.user, m.message)
			output("%s [%s] %s" % (time.strftime("%H:%M", time.localtime(m.timestamp)), m.user, msg))
		elif userinfo is not None and code == 12:
			m = museekduserinfo().parse(data)
			if userinfo != "" and m.user != userinfo:
				continue
			output("Userinfo for user %s:\nDescription:" % m.user)
			output(m.info)
			output("Uploads: %i, queue length: %i, slots free: %s" % (m.uploads, m.queue, m.slotsfree and "Y" or "N"))
			if m.picture:
				f = open("%s.img" % m.user, "w")
				f.write(m.picture)
				f.close()
			output("")
			if userinfo != "":
				sys.exit()
		elif usershares is not None and code == 13:
			m = museekdusershares().parse(data)
			if usershares != "" and m.user != usershares:
				continue
			output("Shared file list for user %s:" % m.user)
			dirs = m.shares.keys()
			dirs.sort()
			for dir in dirs:
				output(dir)
				files = m.shares[dir].keys()
				files.sort()
				for file in files:
					data = m.shares[dir][file]
					if data[1] == "mp3" and len(data[2]) == 3:
						d = "%i\t%i\t%i" % (data[2][0], data[2][1], data[2][2])
					else:
						d = "\t\t"
					output("\t%s\t%i\t%s" % (file, data[0], d))
			output("")
			if usershares != "":
				sys.exit()
		elif code == 14:
			m = museekdtransferstate().parse(data)
			downloads = m.downloads
			uploads = m.uploads
			print "Downloads:"
			print_transfers(downloads)
			print "Uploads:"
			print_transfers(uploads)
			if not monitor:
				sys.exit(0)
		elif code == 15:
			m = museekdtransferupdate().parse(data)
			if m.upload:
				l = uploads
			else:
				l = downloads
			for i in l:
				if i[0] == m.transfer[0] and i[1] == m.transfer[1]:
					i[:] = m.transfer[:]
					break
			else:
				l.append(m.transfer)
			print "Downloads:"
			print_transfers(downloads)
			print "Uploads:"
			print_transfers(uploads)
			
	    except KeyboardInterrupt:
		break

def get_room_state(s):
	code, data = s.get()
	if code != 3:
		output("invalid message type received..")
		sys.exit()
	return museekdroomstate().parse(data)

def help():
	output("""
museekdctl %s -- commandline control utility for museekd

syntax: museekdctl SERVER <command> <args>

SERVER:
	:host:port:password     -- connect using TCP/IP
	:/path/to/sock:password -- connect to unix socket

commands:
	search <query>	-- search for <query> and show results tab separated
	rooms		-- show list of rooms
	joined		-- show list of joined rooms
	roominfo [room]	-- show info about room (all rooms if ommitted)
	stalk [room]	-- show chat log for room (all rooms if ommitted)
	say <room> <line> -- say <line> in <room>
	join <room>	-- join <room>
	leave <room>	-- leave <room>
	messages	-- monitor private messages
	message <user> <message> -- send <message> to <user> privately
	browse [user]	-- shows users shares (monitor shares if user ommited)
	info [user]	-- shows users info (monitor info if user ommited)
			   (dumps image to <user>.img if picture is available)
	transfers	-- dump the up- and download queue
	transfermon	-- monitor transfers
	get slsk://...  -- add file to the download queue
""" % VERSION)

if len(sys.argv) == 1:
	help()
	sys.exit()

server = "/tmp/museekd." + pwd.getpwuid(os.getuid())[0]
if sys.argv[1][0] == ":":
	server = sys.argv[1][1:]
	sys.argv = [sys.argv[0]] + sys.argv[2:]
else:
	print "missing :host:port:password or :/path/to/socket:password argument"
	sys.exit()

if len(sys.argv) == 1:
	output("nothing to do, exiting")
	sys.exit()
	
if sys.argv[1] == "search":
	s, state = login(server, 0, output)
	if not state.state:
		output("not connected to server")
		sys.exit(-1)
	query = " ".join(sys.argv[2:]).strip()
	if query:
		search(s, query)
	else:
		output("nothing to search for, exiting")
elif sys.argv[1] == "rooms":
	s, state = login(server, 1, output)
	if not state.state:
		output("not connected to server")
		sys.exit(-1)
	cs = get_room_state(s)
	l = []
	for i in cs.roomlist.keys():
		l.append([i, cs.roomlist[i]])
	l.sort(lambda a, b: cmp(b[1], a[1]))
	for room in l:
		output("%s\t%i" % (room[0], room[1]))
elif sys.argv[1] == "joined":
	s, state = login(server, 1, output)
	if not state.state:
		output("not connected to server")
	cs = get_room_state(s)
	l = cs.joined_rooms.keys()
	l.sort()
	for room in l:
		output("%s (%i)" % (room, len(cs.joined_rooms[room])))
elif sys.argv[1] == "roominfo":
	s, state = login(server, 1, output)
	if not state.state:
		output("not connected to server")
		sys.exit(-1)
	cs = get_room_state(s)
	if len(sys.argv) > 2:
		room = " ".join(sys.argv[2:]).strip()
	else:
		room = ""
	for r in cs.joined_rooms.keys():
		if room == "" or r == room:
			output("%s (%i)" % (r, len(cs.joined_rooms[r])))
			for u in cs.joined_rooms[r].keys():
				v = cs.joined_rooms[r][u]
				output("\t%s\t%i\t%i\t%i\t%i\t%i" % (u, v[0], v[1], v[2], v[3], v[4]))
			output("")
elif sys.argv[1] == "stalk":
	s, state = login(server, 1, output)
	if not state.state:
		output("not connected to server")
	cs = get_room_state(s)
	if len(sys.argv) > 2:
		room = " ".join(sys.argv[2:]).strip()
	else:
		room = ""
	process(room=room)
elif sys.argv[1] == "say":
	if len(sys.argv) != 4:
		output("nothing to do, exiting")
		sys.exit()
	s, state = login(server, 0, output)
	if not state.state:
		output("not connected to server")
		sys.exit(-1)
	room = sys.argv[2]
	msg = sys.argv[3]
	s.put(museekdsaychatroom(room, msg))
elif sys.argv[1] == "join":
	if len(sys.argv) == 2:
		output("nothing to do, exiting")
	s, state = login(server, 0, output)
	if not state.state:
		output("not connected to server")
		sys.exit(-1)
	room = " ".join(sys.argv[2:]).strip()
	s.put(museekdjoinroom(room))
elif sys.argv[1] == "leave":
	s, state = login(server, 0, output)
	if not state.state:
		output("not connected to server")
		sys.exit(-1)
	if len(sys.argv) == 2:
		output("nothing to do, exiting")
	room = " ".join(sys.argv[2:]).strip()
	s.put(museekdleaveroom(room))
elif sys.argv[1] == "messages":
	s, state = login(server, 2, output)
	if not state.state:
		output("not connected to server")
	process()
elif sys.argv[1] == "message":
	if len(sys.argv) != 4:
		output("nothing to do, exiting")
		sys.exit()
	s, state = login(server, 0, output)
	if not state.state:
		output("not connected to server")
		sys.exit(-1)
	user = sys.argv[2]
	msg = sys.argv[3]
	s.put(museekdprivatemessage(user, msg))
elif sys.argv[1] == "info":
	if len(sys.argv) > 2:
		user = " ".join(sys.argv[2:])
	else:
		user = ""
	s, state = login(server, 8, output)
	if not state.state:
		output("not connected to server")
		if user:
			sys.exit(-1)
	if(user):
		s.put(museekduserinfo(user))
	process(userinfo=user)
elif sys.argv[1] == "browse":
	if len(sys.argv) > 2:
		user = " ".join(sys.argv[2:])
	else:
		user = ""
	s, state = login(server, 16, output)
	if not state.state:
		output("not connected to server")
		if user:
			sys.exit(-1)
	if(user):
		s.put(museekdusershares(user))
	process(usershares=user)
elif sys.argv[1] == "transfers":
	s, state = login(server, 4, output)
	if not state.state:
		output("not connected to server")
		sys.exit(-1)
	process()
elif sys.argv[1] == "transfermon":
	s, state = login(server, 4, output)
	process(monitor = 1)
elif sys.argv[1] == "get":
	if len(sys.argv) < 3:
		output("nothing to do, exiting")
		sys.exit(-1)
	s, state = login(server, 0, output)
	for url in sys.argv[2:]:
		if url[:7] == "slsk://":
			try:
				user, file = urllib.url2pathname(url[7:]).split("/", 1)
				if file[-1] != "/":
					s.put(museekddownloadfile(user, file.replace("/", "\\")))
					print "Queued %s" % url
				else:
					s.put(museekdgetfoldercontents(user, file.replace("/", "\\")))
					print "Getting folder contents %s" % url
				continue
			except:
				pass
		print "Invalid soulseek url: %s" % url
