#! /usr/bin/python
#-*- coding: utf-8 -*-

# Mucous - a curses client for museek 
# Based on Museekchat
# Config-parsing code modified from Nicotine's config.py
##-*- coding: iso-8859-1 -*-
# Copyright (C) 2003-2004 Hyriand <hyriand@thegraveyard.org>
#
# Majority of code by daelstorm (C) 2005-2006
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import sys
try:
	import mucipher
except:
	print "WARNING: The Mucipher Module for Python wasn't found. This is absolutely necessary to allow Mucous to connect to the Museek Daemon.\nDownload it here: http://thegraveyard.org/files/pymucipher-0.0.1.tar.gz\nExtract the tarball, and as Root or sudo, run:\npython setup.py install\nYou'll need GCC, Python and SWIG."
	sys.exit()
try:
	import messages, driver
except:
	try:
		from museek import messages, driver
	except:
		print "WARNING: The Museek Message-Parsing modules, messages.py and/or driver.py  were not found. Please install them into your '/usr/lib/python2.X/site-packages/museek' directory, or place them in a 'museek' subdirectory of the directory that contains the mucous python scipt."
		sys.exit()
	
import signal, time, pwd, os, commands,  getopt,  threading, codecs, locale, select, string, re, ConfigParser
import curses.wrapper, curses.ascii

from time import sleep

from UserDict import UserDict

subprocess_fail=0
geoip_fail=0

try:
	import subprocess
except ImportError:
	subprocess_fail=1
try:
	import GeoIP
	gi = GeoIP.new(GeoIP.GEOIP_MEMORY_CACHE)
except ImportError:
	geoip_fail=1

config_dir = str(os.path.expanduser("~/.mucous/"))
log_dir = None #str(os.path.expanduser("~/.mucous/logs/"))
config_file = config_dir+"config"
try:
	from pymucous.utils import Version
except:
	print "WARNING: can't find pymucous.utils, setting version to be unknown."
	Version = "unknown"
	
def usage():
	print ("""Mucous is a client for Museek, the P2P Soulseek Daemon
Author: Daelstorm
Credit: Hyriand
Version: %s
	Default options: none
	-c,	--config <file>	Use a different config file
	-l,	--log <dir>	Use a different logging directory
	-v,	--version	Display version and quit

	-h,	--help		Display this help and exit
	""" %Version)
	sys.exit(2)
	
try:
	opts, args = getopt.getopt(sys.argv[1:], "hc:vl:", ["help", "config=", "version", "log="])
except getopt.GetoptError:
	usage()
	sys.exit(2)
for opts, args in opts:
	if opts in ("-h", "--help"):
		usage()
		sys.exit()
	if opts in ("-c", "--config"):
		config_file=str(os.path.expanduser(args))
	if opts in ("-l", "--log"):
		log_dir=str(os.path.expanduser(args))
	if opts in ("-v", "--version"):
		print "Mucous version: %s" % Version
		sys.exit(2)
		
parser = ConfigParser.ConfigParser()
# default config
mucous_config = {"connection":{"interface":'localhost:2240', "passw":None}, \
	"mucous":{"autobuddy": "no", "roomlistminsize": 5, "rooms_sort": "size", \
	"roombox": "big", "log_dir": "~/.mucous/logs/", "now-playing": "default", \
	"now-playing-prefix": None, "browse_display_mode": "filesystem", \
	"url reader": "firefox", "url custom prefix": "", "url custom suffix": "", \
	"transbox" : "split", "language": "iso-8859-1", "beep": "True", "autoaway": "yes", \
	"Auto-Retry": "True", "Auto-Clear": "False", "logging": "True", "extra_requests": "Yes"}, \
	"tickers":{'tickers_enabled': 'yes', "ticker_cycle": "yes", "rooms":{} }, \
	"aliases": {"mucous":"Mucous is a Curses client for the Museek Soulseek Daemon. Website: http://thegraveyard.org/daelstorm/mucous.php", "museek":"Museek is a Soulseek Daemon/Client. The website is http://museek.thegraveyard.org/"},\
	"rooms": {"default_room":"museek"}\
	}
		

	
class SortedDict(UserDict):
	def __init__(self):
		self.__keys__ = []
		self.__sorted__ = True
		UserDict.__init__(self)
	def __setitem__(self, key, value):
		if not self.__dict__.has_key(key):
			self.__keys__.append(key) 
			self.__sorted__ = False   
		UserDict.__setitem__(self, key, value)
	def __delitem__(self, key):
		self.__keys__.remove(key)
		UserDict.__delitem__(self, key)
	def keys(self):
		if not self.__sorted__:
			self.__keys__.sort()
			self.__sorted__ = True
		return self.__keys__
	def items(self):
		if not self.__sorted__:
			self.__keys__.sort()     
			self.__sorted__ = True
		for key in self.__keys__:
			yield key, self[key]		
alpha_list  = SortedDict()

def create_config():

	parser.read([config_file])

	mucous_config_file = file(config_file, 'w')
	
	for i in mucous_config.keys():
		if not parser.has_section(i):
			parser.add_section(i)
		for j in mucous_config[i].keys():
			if j not in ["nonexisting", "hated", "options"]:
				parser.set(i,j, mucous_config[i][j])
			else:
				parser.remove_option(i,j)
	parser.write(mucous_config_file)
	mucous_config_file.close()	


def read_config():
	
	parser.read([config_file])
	for i in parser.sections():
		for j in parser.options(i):
			val = parser.get(i,j, raw = 1)

			if j in ['login','passw','interface', 'roombox', 'tickers_enabled', "ticker_cycle", 'default_room', "autobuddy", "now-playing", "log_dir", "aliases" "now-playing-prefix", "browse_display_mode", "url reader", "url custom prefix", "url custom suffix", "transbox", "autoaway", "rooms_sort"] :
				if val != "None":
					mucous_config[i][j] = val
			elif i == 'aliases':
				if val != "None":
					mucous_config[i][j] = val
			else:
				try:
					mucous_config[i][j] = eval(val, {})
				except:
					mucous_config[i][j] = None

def update_config():
	mucous_config_file = file(config_file, 'w')
	for i in mucous_config.keys():
		if not parser.has_section(i):
			parser.add_section(i)
		for j in mucous_config[i].keys():
			if j not in ["somethingwrong"]:
				parser.set(i,j, mucous_config[i][j])
			else:
				parser.remove_option(i,j)
	parser.write(mucous_config_file)
	mucous_config_file.close()
	
def check_path():
	if os.path.exists(config_dir):
		if os.path.exists(config_file) and os.stat(config_file)[6] > 0:
			read_config()
		else:
			create_config()
			
	else:
		os.mkdir(config_dir, 0700)
		create_config()
check_path()

if log_dir != None and log_dir != "":
	mucous_config["mucous"]["log_dir"] = str(os.path.expanduser(log_dir))
	
elif "log_dir" in mucous_config["mucous"]:
	if mucous_config["mucous"]["log_dir"] in ("", None, "None"):
		mucous_config["mucous"]["log_dir"] = str(os.path.expanduser("~/.mucous/logs/"))


		
# This is the input line/bar
class editor(threading.Thread):
	def __init__(self, win, mucous):
		threading.Thread.__init__(self)
		self.win = win
		self.mucous = mucous
		self.key_mouse_funks = mucous.key_mouse_funks
		self.tabbing = mucous.tabbing
		self.history = mucous.history
		self.h, self.w = win.getmaxyx()
		self.scroll = 0
# 		self.textwin = mucous.windows["text"][mucous.display["mode"]]
		self.line = mucous.line
		self.x = len(self.line)
		self.fixpos()
		self.escape = False
		self.y = None
		self.word = None
		self.listline = mucous.listline
		self.firsttab = 0
		

	def process(self, c):
		try:
			pos = self.x + self.scroll
			
			# debugging: display keypress
			#self.mucous.Hlog("debug", c )
			
			# Toggle online ONLY if inactivity timeout was met
			if self.mucous.timedout == True:
				self.mucous.toggle_away()
				self.mucous.timedout = False
			if self.mucous.Spl["status"] == 0 and mucous_config["mucous"]["autoaway"] == "yes":
				# Restart inactivity timeout for every key or mousepress if not away, currently
				self.mucous.timeout_timer.cancel()
				self.mucous.timeout_timer = threading.Timer(self.mucous.timeout_time, self.mucous.timeout)
				self.mucous.timeout_timer.start()
			else:
				self.mucous.timeout_timer.cancel()

	
			if c != chr(9) and c !="KEY_MOUSE":  # Clear self.word if tab wasn't pressed
				self.word = None
				self.firsttab = 0
				self.listline = []
			elif c not in ("KEY_UP", "KEY_DOWN"):
				self.mucous.Spl["history_count"] = -1

			if c == "KEY_MOUSE":
				error = 'mouse'
				if not self.escape:
					line = self.key_mouse_funks(c, self.line)
					if line != None:
						self.line = line
						self.x = len(self.line)
			elif c == "KEY_LEFT" or c == chr(2):
				error = 'left'
				if self.escape:
					self.key_mouse_funks(c, self.line)
				else:
					self.x -= 1
			elif c == chr(93) or c == chr(91)  or c == chr(34) or c == chr(35):
				error = 'right'
				if self.escape:
					self.key_mouse_funks(c, self.line)
				else:
					self.line = self.line[:pos] + c + self.line[pos:]
					self.x += 1
			elif c == "KEY_RIGHT" or c == chr(6):
				error = 'right'
				if self.escape:
					self.key_mouse_funks(c, self.line)
				else:
					self.x += 1
			elif c in ("KEY_F(1)", "KEY_F(2)", "KEY_F(3)", "KEY_F(4)", "KEY_F(5)", "KEY_F(6)", "KEY_F(7)", "KEY_F(8)", "KEY_F(9)", "KEY_F(10)"):
				if not self.escape:
					self.key_mouse_funks(c, self.line)
				
			elif c in ("KEY_UP", "KEY_DOWN"):
				# Scrolling
				if not self.escape:
					line = self.key_mouse_funks(c, self.line)
					if line != None:
						self.line = line
						self.x = len(self.line)
					
				elif self.escape:
					line, self.mucous.Spl["history_count"] = self.history(c, self.line, self.mucous.Spl["history_count"])
					if line is not None:
						self.line = line
						self.x = len(self.line)
			elif c in ("KEY_SELECT", "KEY_FIND", "KEY_PPAGE", "KEY_NPAGE", "KEY_HOME", "KEY_END"): 
				# Scrolling
				if c == "KEY_SELECT":
					c = "KEY_NPAGE"
				elif c == "KEY_FIND":
					c = "KEY_PPAGE"
				if not self.escape:
					line = self.key_mouse_funks(c, self.line)
					if line != None:
						self.line = line
						self.x = len(self.line)
					
			elif c == "KEY_IC": # Insert
				self.key_mouse_funks(c, self.line)
			elif c == "KEY_DC" or c == chr(4):
				self.line = self.line[:pos] + self.line[pos+1:]
			elif c == chr(5):
				self.x = len(self.line)
			elif c == chr(1): # Ctrl - a
				self.x = self.scroll = 0
			elif c == chr(10) or c == "KEY_ENTER":
				if self.mucous.Spl["show_menu"] == True:
					self.mucous.menu_enter()
				else:
					self.escape = False
					self.key_mouse_funks(c, self.line)
					return True
			elif c == chr(27):
				if self.mucous.Spl["show_menu"] == True:
					self.mucous.menu_clear()
				else:
					self.escape = True
					return False		
			elif c in ("t", "T", "p", "P", "d", "D"):
				if self.escape:
					if c in ("t", "T"):
						self.key_mouse_funks("switch", self.line)
					elif c in ("d", "D"):
						self.key_mouse_funks("delete", self.line)
					elif c in ("p", "P"):
						self.key_mouse_funks("popup", self.line)
				else:
					self.line = self.line[:pos] + c + self.line[pos:]
					self.x += 1
			elif c == chr(9): # Tab
				if self.word == None:
					w = self.line.split(' ')
					self.word = w[-1]
				#print "word is"+self.word
				if self.firsttab == None:
					self.firsttab = 0
				
				self.listline, self.firsttab= self.tabbing(self.line, self.word, self.firsttab, self.listline)
				
				if self.listline != []:
					self.line = ''
					for r in self.listline:
						if r is not self.listline[-1]:
							self.line +=r +' '
						elif r is self.listline[-1]:
							self.line +=r
				
				self.x = len(self.line)
				#return False
			elif c == chr(11):
				self.line = self.line[:pos]
				self.x = len(self.line)
				self.scroll = 0
			elif c == chr(23): # Ctrl-W
				z = self.line.split(' ')
	
				if len(z) >1:
					if z[-1] != ' ' and z[-1] != '':
						self.line = ''
						for s in z:
							if s is not z[-1]:
								self.line = self.line + s +" "
							elif s is z[-1]:
								self.line = self.line
								break
					else:
						self.line = ''
						for s in z:
							if s not in (z[-1], z[-2]):
								self.line = self.line + s +" "
							elif s is z[-2]:
								self.line = self.line
								break
				else:
					self.line = ''
				self.x = len(self.line)
	
			elif c == chr(127) or c == "KEY_BACKSPACE" or c == chr(8):
				if pos > 0:
					self.line = self.line[:pos-1] + self.line[pos:]
					self.x -= 1
	
			elif len(c) == 1 and ord(c[0]) >= 32 and ord(c[0]) <127:
				# normal letters 
				self.line = self.line[:pos] + c + self.line[pos:]
				self.x += 1
			elif len(c) == 1 and ord(c[0]) >= 127 and ord(c[0]) <327:
	
				self.line = self.line[:pos] + c + self.line[pos:]
				self.x += 1
			self.fixpos()
			self.mucous.line = self.line
			self.escape = False
			return False
		except Exception, e:
			self.mucous.Hlog("debug", "editor process: \""+str(self.line)+"\" "+ str(e))

	def fixpos(self):
		try:
			self.x1 = self.x
			if self.x1 <= 0:
				self.x1 = 0	
			while self.scroll + self.x > len(self.line):
				self.x -= 1
				
			while self.x >= self.w:
				self.scroll += 1
				
				self.x -= 1
			if self.x < 0:
				self.scroll += self.x
				
				self.x = 0
	
			if self.scroll < 0:
				self.scroll = 0
	
			self.win.erase()
	
			try:
				self.win.addstr(self.line[self.scroll:self.scroll+self.w-1])
			except Exception, e:
				self.mucous.Hlog("debug", "Editwin: "+ str(e))
				#pass
			self.win.refresh()
		except Exception, e:
			self.mucous.Hlog("debug", "fixpos: \""+str(self.line)+"\" "+ str(e))

	def reset(self):
		try:
			self.x = self.scroll = 0
			self.mucous.line = self.line = ""
	
			self.win.erase()
			self.win.refresh()
		except Exception, e:
			self.mucous.Hlog("debug", "reset: \""+str(self.line)+"\" "+ str(e))

class mucous(driver.Driver):

	def __init__(self):
		
		driver.Driver.__init__(self)
		self.config = {}
		self.usernames = {"username": None, "download": None, "private":None, "info": None, "upload": None, "search": None, "privileges": None, "browse": "default__"}
		self.Spl = {"menunumber": 0, "title": None, "selected": None, "status": None, "connected": 0, "room": None, "history_count": 0, "current_search": "default__",  "dir_browse": "", "search_method": "globally", "search_order": "num", "show_menu": False, "current_menu": None, "setup_input": "default", "interests_input": "add_likes", "ticker_room": None, "uploads": 0, "downloads": 0 , "search_reverse": False, "recommend_sort": "alpha"}
		self.data = {"rooms": {}, "tickers": {}, "shares": {} , "roomlist": {}, "search_tickets": {}, "search_results": {}, "browse_num": {}, "browse_results": {}, "mystats": [], "downloads": {}, "uploads": {}, "recommendations": {}, "similar_users": {} }
		self.logs = {"buddies": [], "banned": [], "ignored": [], "trusted": [], "uploads": "Up: 0", "downloads": "Down: 0", "tab_completion": [], "search_count": ["Results: ", 0], "history": [], "alert": "", "onlinestatus": "Offline", "info": {}, "private": {}, "rooms": {}, "browse": {}, "search":{} , "roombox": {} , "status": {} , "recommendations": [], "likes": [], "hates": [], "similar_users":[]    }
		self.activeitems = {"info": [], "search": [], "browse": [], "private": [], "positions": {}}
		self.requests = {"ip":[], "info": [], "statistics": [], "browse": []}
		self.transfers = {"downloads": {}, "uploads": {} }
		self.display = {"mode": "chat", "list": "buddies", "interests": "recommendations", "chatshape": mucous_config["mucous"]["roombox"], "chat": "chatroom", "browse": "directories", "setup": "mucous", "password": "no", "transfers": "downloads", "transfer_sort": "all", "t_speed": True}
		self.user = { "status": {}, "statistics": {}  }
		self.windows = {"text": {}, "border": {}, "dimensions": {} }
		self.scrolling = {"chatroom": -1, "roombox": 0, "chatstatus": 0, "info": 0, "private": 0, "browsefile": 0, "browsedir": 0, "likes": 0, "hates": 0, "recommendations": 0, "similar_users": 0, "help":0, "debug": 0, "search": 0, "uploads": 0, "downloads": 0, "buddies": 0, "banned": 0, "ignored": 0, "trusted": 0, "roomlist":0 }
		self.menus = {}

		self.url = None
		self.bfilter = None

		self.timedout = False
		self.listline = [] # Tab Completion Line (split)
		self.Sup = 0
		self.end = 0
		self.start = 0
		# transfers
		self.sorted_transfer_list = {}
		self.last_transferscroll = None

		# searches
		self.search_user = None
		self.sfilter= None
		self.search_number = 0


		self.sorted_search = []

		# config
		self.invalidpass = 0

		
		
		self.line = "" # Input Line
		
		# Encodings
		# Recommended: ISO-8859-1
		# UTF-16 AND ISO-8859-12 crash Mucous
		# UTF-8 is bad, since it's usually the original encoding being converted from
		self.encodings  = ['iso-8859-1', 'iso-8859-2', 'iso-8859-3', 'iso-8859-4', 'iso-8859-5', 'iso-8859-6', 'iso-8859-7', 'iso-8859-8', 'iso-8859-9', 'iso-8859-10', 'iso-8859-11', 'iso-8859-13', 'iso-8859-14', 'iso-8859-15', 'utf-8', 'utf-7',  'ascii']
		if "language" in mucous_config["mucous"]:
			if mucous_config["mucous"]["language"] not in self.encodings:
				mucous_config["mucous"]["language"] = "iso-8859-1"
		else:
			mucous_config["mucous"]["language"] = "iso-8859-1"
		self.states = {0: "Finished", 1: "Xferring", 2: "Negotiating", 3:"Waiting", 4: "Establishing", 5: "Initiating", 6: "Connecting",  7: "Queued", 8:"Address", 9:  "Status", 10: "Offline",11: "Closed",12: "Can't Connect", 13: "Aborted",14: "Not Shared"}
		self.alert = { "CHAT": {}, "PRIVATE": [], "TRANSFERS" : [],  "SEARCH": [], "INFO": [], "BROWSE": [],  "HELP": [] }
		
		# Temporary Logs

		


		self.pminfolog = ["Global Private Messaging commands:",\
"To start a Private Message:",\
"1) Type in the username you wish to PM below",\
"2) Press <Enter>",\
"3) Type your messages",
"Use the commands below:",\
"/pm      <user>        (Start PM or switch to user)",\
"/close   <user>        (Close user's PM) ",\
"/close                 (Close current PM)",\
"/ip                    (Get the IP of current user)",\
"/msg <message>         (Send message to previous chosen user)"]

		self.logs["search"]["default__"] = ["Search commands:",\
"/searchfor   <query>   (Global Search)",\
"/searchbuddy <query>   (Buddy Search)",\
"/searchroom  <query>   (Room Search)",\
"/download <number>     (Download File with number)",\
"/downdir  <number>     (Download directory of File)",\
"/close                 (Close current search)",\
"/filter <string>       (limit displayed results)",\
"Mouse: Right-Click     (popup menu)",\
"Press Insert to toggle between searches.",\
"Press Alt-T to toggle Global/Buddy/Room searches",\

"Or, type in the query, below."]

		self.logs["browse"]["default__"] = ["----<Browse Commands>----",\
"/browse        (Switch to Browse Mode)",\
"/buser    <user>       (Browse User)",\
"/bsearch  <query>      (Search thru Shares)",\
"/download <number>     (Download file with this number)",\
"/close                 (close current shares)",\
"Press Insert to toggle between shares.",\
"--File System browsing commands--",\
"cd (change dir) get, getdir (download)",\
"First, type in the user you wish to browse, below.",\
"Right-click on directories or files to display the popup menu."]


		self.infolog = ["Global User Information commands:",\
"/userinfo <user>",\
"/stat     <user>",\
"/ip       <user>",\
"Or type the user name that you wish get recieve userinfo from, below.",\
 "--"]
		
		

			
		self.retry_timer = threading.Timer(30.0, self.retry_display)
		self.clear_timer = threading.Timer(30.0, self.clear_display)
		self.timer = threading.Timer(10.0, self.nickcheck)
		self.muscan_timer = threading.Timer(1.0, self.muscan_display)
		self.timeout_time =  900 * 1.0
		self.timeout_timer = threading.Timer(self.timeout_time, self.timeout)
		# tickers
		

		
		
		self.ticker_timer = threading.Timer(3.0, self.ticker_display)
		if "ticker_cycle" in mucous_config["tickers"].keys():
			pass
		else:
			mucous_config["tickers"]["ticker_cycle"] = "yes"
		# Help lists
		self.commandlist =  ["/me", "/j", "/join", "/p", "/part", "/l", "/leave", "/talk", "/say", "/alias", "/list", "/users", \
"/cd",  "/get", "/getdir", "/nick", "/privs", "/privileges", "/giveprivs ",\
"/help", "/info",  "/autojoin", "/roombox", "/autoaway", "/transbox", "/roomlist", "/roomlistrefresh", \
"/inrooms", "/pm",  "/msg", "/np", "/npset", "/npcheck",\
"/npprefix", "/tickroom", "/tickcycle",  "/listtick", "/tickers", "/interface", "/password",\
"/save", "/connect", "/disconnect", "/autobuddy", "/privbuddy", "/onlybuddy",\
"/slots","/buddy", "/unbuddy",  "/ban", "/banlist", "/unban", "/nuke ", "/unnuke ",\
"/ignore", "/unignore",  "/unhide",  "/userinfo", "/ip ", "/stat ", "/away", "/abortup", "/percent", \
"/abortdown",  "/removeup", "/removedown", "/retry", "/retryall", "/clearup", "/cleardown", "/clearroom", "/clearsearchs", "/url", "/urlreader", "/urlcustom",\
"/search", "/searchfor", "/searchbuddy", "/searchroom", "/download", "/downdir", "/browse",\
"/browseuser", "/browsesearch", "/browsedown",  "/downuser",\
"/downpath", "/downpathdir",  "/chat", "/ignorelist", "/banlist", "/transfer", "/transfers", "/private",\
"/buddylist", "/setup", "/quit",  "/share-mode", "/logging", "/reloadshares", "/rescanshares", "/version", "/extra", \
"/logout", "/login", "/like ", "/donotlike ", "/donothate ", "/hate ", "/similar", "/globalrex", "/recommendations", "/rex", "/itemsimilar ", "/itemrex ", "/uploadto ", "/upload ", "/ctcpversion ", "/defaulttick ", "/settemptick ", "/settick "]

 		for alias in mucous_config["aliases"].keys():
			self.commandlist.append("/"+alias)
		
		self.help_chat = ["----[Chat Commands]----", \
"/join <room>   /part <room>  /leave <room>",\
"/j <room>      /talk <room>  /say <room> <message>",\
"/users <room>          (lists of users in room)",\
"/autojoin <room>       (Toggle Autojoining room)",\
"/roomlistrefresh       (redownload roomlist from server)",\
"/inrooms               (list of joined rooms)",\
"/clearroom <room>      (clear <room>, or current room)",\
"/pm <user>             (Private Message user)",\
"/msg <message>         (send message to last user)",\
"/url          /urlcustom (command$command)    (Requires X11)",\
"/urlreader (lynx|links|elinks|firefox|custom) (Requires X11)",\
"/np                    (XMMS/BMP Now playing script)",\
"/npcheck               (display Now playing script command)",\
"/npset <command>       (Set Now playing script to command)",\
"/npprefix <text>       (set to np: or /me is now playing:)",\
"/alias <alias> <text>  /unalias <alias>"]

		
		self.help_ticker = ["----<Ticker Commands>---- ",\
"/listtick <room>       (Lists tickers in room)",\
"/settick <message>     (set ticker for last room)",\
"/tickcycle             (Toggle cycling tickers in Chat Rooms)",\
"/tickers               (Toggle tickers)",\
"/defaulttick <message> (Set & save default ticker)",\
"/tickroom <room>       (Choose room for setting tickers)",\
"/settick <message>     (Set ticker to message, and save it)",\
"/settemptick <message> (Set ticker only for this session)",\
]

		self.help_connect = ["Connection Configuration",\
"/interface </tmp/museekd.[username]> or <host:port>",\
"/password <interface password>",\
"/connect               (Attempts to connect to Museekd)",\
"/disconnect            (Disconnects from Museekd)",\
"/save                  (Writes settings to config)"]

		self.help_setup = ["Setup",\
"/autobuddy             (Auto-buddy users you download from)",\
"/privbuddy             (Toggle Privileging buddies)",\
"/onlybuddy             (Toggle Only sharing to buddies)",\
"/slots <num>           (Set upload slots)",\
"/unhide                (Toggle show password)",\
"/logging               (Toggle Logging)"]

		self.help_user = ["----[User Commands]---- ",\
"/buddy    <user>    /unbuddy   <user>",\
"/ban      <user>    /unban     <user> (Cannot access your files)",\
"/ignore   <user>    /unignore  <user> (No messages in chat)",\
"/nuke     <user>    /unnuke    <user> (Ban+Ignore)",\
"/trust    <user>    /distrust  <user> (Can Upload to you)",\
"/stat     <user>    /ip        <user>",\
"/userinfo <user>    /giveprivs <user> (Input days next)",\
"/away (Toggle your Online/Away Status)",\
"/autoaway (Go away after 900 seconds of inactivity)"]

		self.help_transfer = ["----[Transfer Commands]---- ",\
"/abortu  <num> /abortup    <num> (Abort Upload)",\
"/abortd  <num> /abortdown  <num> (Abort Download)",\
"/removeu <num> /removeup   <num> (Remove Upload)",\
"/removed <num> /removedown <num> (Remove Download)",\
"/retry   <num>                   (Retry Download)",\
"/retryall                        (Retry all Downloads)",\
"/clearup                         (Clear failed/finished Uploads)",\
"/cleardown                       (Clear finished Download)",\
"/percent                         (Toggle Percent/Speed",\
"/transbox                        (Toggle Split/Tabbed Mode))"]
		self.help_mode_text = ["----[Mode Commands]---- ",\
"/chat          (Chat Mode)",\
"/transfer      (Transfer Mode)",\
"/info          (Info Mode)",\
"/browse        (Browse Mode)",\
"/private       (Private Message Mode)",\
"/search        (Search Mode)",\
"/buddylist     (Buddylist Mode)",\
"/banlist       (Banlist Mode)",\
"/ignorelist    (Ignorelist Mode)",\
"/roomlist      (Roomlist Mode)",\
"/setup         (Setup Mode)",\
"/help /debug   (Help & Debug Mode)"]

		self.help_help = ["----<Help Commands>---- ",\
"/help          (This Message)",\
"/help connect  (Connection Commands)",\
"/help setup    (Setup Commands)",\
"/help mode     (Mode Commands)",\
"/help chat     (Chatroom Commands)",\
"/help ticker   (Ticker Commands)",\
"/help user     (User Commands)",\
"/help transfer (Transfer Commands)",\
"/help browse   (Browse Commands)",\
"/help search   (Search Commands)",\
"/help download (Download Commands)",\
"/help keys     (Special Keys)",\
"/quit          (Close Mucous)"]
		
		self.help_search = ["----<Search Commands>----",\
"/search        (Switch to Search Mode)",\
"/searchfor   <query>",\
"/searchbuddy <query>",\
"/searchroom  <query>",\
"/searchuser  <user>",\
"/download <search number>",\
"/downdir  <search number>",\
"/close         (Close Current Search)",\
"/clearsearchs  (Removes all searches)",\
"/filter (Turn OFF Filter) /filter <query> (Set Filter)"]

		self.help_browse = ["----<Browse Commands>----",\
"/browse        (Switch to Browse Mode)",\
"/buser    <user>       (Browse User)",\
"/bsearch  <query>      (Search thru Shares)",\
"/download <number>     (Download file with this number)",\
"/close                 (close current shares)",\
"Press Insert to toggle between shares.",\
"--File System browsing commands--",\
"cd (change dir) get, getdir (download)",\
"First, type in the user you wish to browse, below."]
		
		self.help_download = ["----<Manual Download Commands>----",\
"/downuser <user>    (Set download user)",\
"/downpath <path>    (Download file from user)",\
"/downpathdir <path> (Download dir from user)"]

		self.help_keys =["------<Keys>------ ",\
"ESC or Alt + [, ], <-, ->  (Change Room / Transfer display mode)",\
"Insert                     (Same as above)",\
"Tab                        (Completes nicks)",\
"Home/End                   (switches Upload & Download scrolling)",\
"Up, PageUp                 (Scroll Up a line, a page)",\
"Down, PageDown             (Scroll Down a line, a page)",\
"F1->Chat                 F6->Browse",\
"F2->Private Messages     F7->User Lists",\
"F3->Transfers            F8->Rooms List",\
"F4->Search               F9->Setup",\
"F5->Info                 F10->Help"]
		self.helpdebuglog = []
		self.helplog =["----<Help Commands>---- ",\
"/help          (This Message)",\
"/help connect  (Connection Commands)",\
"/help setup    (Setup Commands)",\
"/help mode     (Mode Commands)",\
"/help chat     (Chatroom Commands)",\
"/help ticker   (Ticker Commands)",\
"/help user     (User Commands)",\
"/help transfer (Transfer Commands)",\
"/help browse   (Browse Commands)",\
"/help search   (Search Commands)",\
"/help download (Download Commands)",\
"/help keys     (Special Keys)",\
"/quit"]	

	
	
		# Startup Size Check
		
		self.stdscr = curses.initscr()
		#curses.flushinp()
		#curses.setupterm()
		#self.helplog.append(str(curses.termattrs() ) )
		#self.helplog.append(str(curses.termname() ))
		curses.meta(1)
		h, w = self.stdscr.getmaxyx()
		#h,w = struct.unpack("HHHH", fcntl.ioctl(sys.stdout.fileno(),termios.TIOCGWINSZ, struct.pack("HHHH", 0, 0, 0, 0)))[:2]
		if  h <=5 or w <=37:
			self.stdscr.keypad(1)
			curses.echo()
			curses.endwin()
			print "Console kinda small, resize it, please"
			sys.exit()
		#---------------
		
		curses.start_color()
		curses.mousemask(curses.ALL_MOUSE_EVENTS)
		curses.mouseinterval(110)
		self.colors = {}
		if curses.has_colors() == True:
			try:
				curses.use_default_colors()
				curses.can_change_color()
				curses.init_pair(1, curses.COLOR_RED, -1)
				curses.init_pair(2, curses.COLOR_YELLOW, -1)
				curses.init_pair(3, curses.COLOR_CYAN, -1)
				curses.init_pair(4, curses.COLOR_BLUE, -1)
				curses.init_pair(5, curses.COLOR_GREEN, -1)
				curses.init_pair(6, curses.COLOR_BLACK, -1)
				curses.init_pair(7, curses.COLOR_WHITE, -1)
				curses.init_pair(8, curses.COLOR_MAGENTA, -1)
				curses.init_pair(9, 0, curses.COLOR_CYAN)
				curses.init_pair(10, curses.COLOR_GREEN, curses.COLOR_BLACK )
				curses.init_pair(11, curses.COLOR_YELLOW, curses.COLOR_BLUE)
				curses.init_pair(12, curses.COLOR_BLACK, curses.COLOR_WHITE)
			except AttributeError:
				curses.init_pair(1, curses.COLOR_RED, 0)
				curses.init_pair(2, curses.COLOR_YELLOW, 0)
				curses.init_pair(3, curses.COLOR_CYAN, 0)
				curses.init_pair(4, curses.COLOR_BLUE, 0)
				curses.init_pair(5, curses.COLOR_GREEN, 0)
				curses.init_pair(6, curses.COLOR_BLACK, curses.COLOR_WHITE)
				curses.init_pair(7, curses.COLOR_WHITE, 0)
				curses.init_pair(8, curses.COLOR_MAGENTA, 0)
				curses.init_pair(9, 0, curses.COLOR_CYAN)
				curses.init_pair(10, curses.COLOR_GREEN, curses.COLOR_BLACK )
				curses.init_pair(11, curses.COLOR_YELLOW, curses.COLOR_BLUE)
				curses.init_pair(12, curses.COLOR_BLACK, curses.COLOR_WHITE)
				
			self.colors["red"] = curses.color_pair(1)
			self.colors["yellow"] = curses.color_pair(2)
			self.colors["cyan"] =  curses.color_pair(3)
			self.colors["blue"] = curses.color_pair(4)
			self.colors["green"] =  curses.color_pair(5)
			self.colors["black"] = curses.color_pair(6)
			self.colors["white"] = curses.color_pair(7)
			self.colors["magenta"] = curses.color_pair(8)
			self.colors["cybg"] = curses.color_pair(9)
			self.colors["greenbg"] = curses.color_pair(10)
			self.colors["hotkey"] = curses.color_pair(11)
			self.colors["blafgcyabg"] = curses.color_pair(12)
		else:
			self.colors["blafgcyabg"]  = self.colors["hotkey"] = self.colors["greenbg"] = self.colors["cybg"] = self.colors["magenta"] = self.colors["white"] =self.colors["black"]  = self.colors["cyan"] =  self.colors["yellow"] =self.colors["blue"]  =self.colors["green"] = self.colors["red"] =  curses.color_pair(0)
			#Disable cursor (bad idea)
# 			curses.curs_set(0)
		
		while 1:
			try:
				curses.noecho()
			except:
				pass
			try:
				curses.cbreak()
			except:
				pass
			self.stdscr.keypad(1)
			try:
				 self.line = self.build()
			except Exception, e:
				self.Hlog("debug", str(e) )
				sleep(1)
			if self.socket is None:
				self.connect()
			try:
				self.process()
			except select.error, e:
				self.line = self.build()
				# Terminal resized
				pass
			except Exception, e:
				self.shutdown()

	
	
	def build(self):
# 		h, w = struct.unpack("HHHH", fcntl.ioctl(sys.stdout.fileno(),termios.TIOCGWINSZ, struct.pack("HHHH", 0, 0, 0, 0)))[:2]
# 		os.environ["LINES"] = str(h)
# 		os.environ["COLUMNS"] =str(w)

		try:
			self.stdscr = curses.initscr()
			self.stdscr.erase()
			self.stdscr.refresh()
			self.h, self.w = self.stdscr.getmaxyx()
		
			w = self.windows["dimensions"]["input"] = {"height":1, "width":self.w-2, "top":self.h-3, "left":1}
			self.windows["border"]["input"] = curses.newwin(w["height"]+2, w["width"]+2, w["top"]-1, w["left"]-1)
			self.windows["border"]["input"].attron(self.colors["blue"])
			self.windows["border"]["input"].border()
			
			self.windows["border"]["input"].refresh()
			
			self.windows["text"]["input"] = self.windows["border"]["input"].subwin(w["height"], w["width"], w["top"], w["left"])
			self.windows["text"]["input"].attroff(self.colors["blue"])
			self.topbar_mode()

			self.Spl["show_menu"] = False
		except Exception, e:
			self.Hlog("debug", "Build: " + str(e))
		try:
			if self.display["mode"] == "chat":
				self.chat_mode()

			elif self.display["mode"] == "private":
				self.private_mode()

			elif self.display["mode"] == "browse":
				self.browse_mode()

			elif self.display["mode"] == "transfer":
				self.transfer_mode()

			elif self.display["mode"] == "info":
				self.info_mode()
				
			elif self.display["mode"] == "search":
				self.search_mode()
				
			elif self.display["mode"] == "lists":
				self.list_mode()
				
			elif self.display["mode"] == "roomlist":
				self.rooms_mode()
				
			elif self.display["mode"] == "setup":
				self.setup_mode()
				
			elif self.display["mode"] in ("debug", "help"):
				self.help_mode()
				


		except Exception, e:
			self.Hlog("debug", "Build part 2: " + str(e))
		try:
			self.edit = editor(self.windows["text"]["input"], self)

			self.stdscr.nodelay(1)	
		except Exception, e:
			self.Hlog("debug", "Build: " + str(e))
		return self.line
		
	# THREADS THREADING vv
	
	def nickcheck(self):
		try:
			if self.usernames["username"] == None:
				self.display["mode"] = "status"
				self.help_mode()
				self.Hlog("status", "Connection is taking a while to start, maybe you are trying to connect to a FTP daemon?")
				self.Hlog("status", "Killing connection..")
				self.Hlog("status", "Try using /interface to connect to a different port.")
				for line in self.help_connect:
					self.Hlog("status", line)
				driver.Driver.close(self)
		except Exception,e:
			self.Hlog("debug", "nickcheck: " + str(e))
			
	def retry_display(self):
		try:
			if mucous_config["mucous"]["Auto-Retry"] != "True":
				self.retry_timer.cancel()
			else:
				for user_path, transfer  in self.transfers["downloads"].items():
					if int(transfer[3]) in (10, 11, 12, 13, 14):
						self.send(messages.DownloadFile(transfer[1], transfer[2]))
				self.retry_timer.cancel()
				self.retry_timer = threading.Timer(30.0, self.retry_display)
				self.retry_timer.start()
		except Exception,e:
			self.Hlog("debug", "retry_display: " + str(e))
			
	def timeout(self):
		try:
			self.timeout_timer.cancel()
			if self.Spl["status"] == 0:
				self.timedout = True
				self.toggle_away()

		except Exception,e:
			self.Hlog("debug", "timeout: " + str(e))
	
	def clear_display(self):
		try:
			if mucous_config["mucous"]["Auto-Clear"] != "True":
				self.clear_timer.cancel()
			else:
				for userpath, values in self.transfers["uploads"].items():
					if values[3] in (0, 10, 11, 12, 13, 14):
						self.send(messages.TransferRemove(1, values[1], values[2]))
							
				for userpath, values in self.transfers["downloads"].items():
					if values[3] == 0:
						self.send(messages.TransferRemove(0, values[1], values[2]))
				self.clear_timer.cancel()
				
				self.clear_timer = threading.Timer(30.0, self.clear_display)
				self.clear_timer.start()
		except Exception,e:
			self.Hlog("debug", "clear_display: " + str(e))
			
	def muscan_display(self):
		try:
			self.muscan_timer.cancel()
			if subprocess_fail == 0:
				if mucous_config["connection"]["interface"][:9] in ("localhost", "/tmp/muse") and self.muscan_command != [] :
					p = "/usr/bin/muscan"
					if os.path.exists(p):
					
						z = subprocess.Popen( self.muscan_command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
						#, close_fds = True)
						stdout_text, stderr_text = z.communicate()
						z.wait()
						
						stdout_text = stdout_text.split('\n')
						stderr_text = stderr_text.split('\n')
						#self.Hlog("debug", str(stdout_text))
						for line in stdout_text:
							if line.isspace() or line=='':
								pass
							else:
								self.Hlog("debug", line)
						for line in stderr_text:
							if line.isspace() or line=='':
								pass
							else:
								self.Hlog("status", line)
						self.Hlog("status", "Finished with shares.")
				else:
					self.Hlog("status", "Your Museekd is either running remotely or already running a command, cancelling.")
			else:
				self.Hlog("status", "This feature requires Python 2.4")
			self.muscan_command=[]
		except Exception,e:
			self.Hlog("debug", "muscan_display: " + str(e))
			
	def ticker_display(self):
		try:
			if self.display["mode"] == "chat":
				mw = self.windows["border"]["chat"]
				s = self.windows["dimensions"]["chat"]
				for rooms8, ticks in self.data["tickers"].items():
					if rooms8 == self.Spl["room"]:
						ttickers =[]
						ttickers = ticks.keys()
						if ttickers != []:
							ttickers.sort()
							for names in ttickers:
								if self.ticker_z >= len(ttickers):
									self.ticker_z = 0
								if names == ttickers[self.ticker_z]:
									n= len(names)
									
									try:
										if self.Spl["show_menu"] == True: raise  Exception,  "Noticker"
										if self.display["chatshape"] not in ("nostatuslog", "chat-only"):
											if self.display["chatshape"] == "noroombox":
												ticker = "< ["+names+"] "+str(ticks[names][:self.w-2-9-n])
											else:
												ticker = "< ["+names+"] "+str(ticks[names][:self.w-15-2-9-n])
											self.borderlogwin.addstr(5, 3, self.decode_language( ticker ))
											t = len(ticker)
											fill = ""
											while len(fill) < s["width"]-4-t:
												fill += " "
											fill += ">"
											self.borderlogwin.addstr(fill)
											self.borderlogwin.refresh()
										elif self.display["chatshape"] in ("nostatuslog", "chat-only"):
											ticker = "< ["+names+"] "+str(ticks[names][:s["width"]-15-9-n])
											mw.addstr(0, 19, self.decode_language( ticker ))
											t = len(ticker)
											fill = ""
											while len(fill) < s["width"]-4-15-t:
												fill += " "
											fill += ">"
											mw.addstr(fill)
											mw.refresh()
									except:
										pass
									
	
									self.ticker_z += 1
									if self.ticker_z >= len(ttickers):
										self.ticker_z = 0
									self.ticker_timer.cancel()
									self.ticker_timer = threading.Timer(3.0, self.ticker_display)
									self.ticker_timer.start()
									break
						else:
							self.ticker_timer.cancel()
							try:
								self.display_status_log_border()
								self.display_status_log()
								curses.doupdate()
							except:
								pass
		except Exception,e:
			self.Hlog("debug", "ticker_display: " + str(e))
		# THREADS THREADING THRU TIME ^^
		
	def disconnect(self):
		
		try:
			if self.Spl["connected"] == 1:
				driver.Driver.close(self)
		except Exception,e:
			self.Hlog("debug", "disconnect: " + str(e))
		
	def connect(self):
		try:
			keys = []
			
			while 1:
				
				try:
					if self.invalidpass == 0:
						if mucous_config["connection"]["passw"] != None:
							
							self.timer.cancel()
							self.timer = threading.Timer(10.0, self.nickcheck)
							self.timer.start()
							driver.Driver.connect(self, mucous_config["connection"]["interface"],  mucous_config["connection"]["passw"], messages.EM_CHAT |  messages.EM_USERINFO| messages.EM_PRIVATE| messages.EM_TRANSFERS  | messages.EM_USERSHARES | messages.EM_CONFIG |  messages.EM_INTERESTS) 
							
							break
						else:
							raise Exception,  "IdASS"
					else:
						raise Exception,  "INVPASS"
						
	
				except Exception, e:
					self.display["mode"] = "debug"
					self.help_mode()
					if self.timer != None:
						self.timer.cancel()
					if e == "INVPASS":
						self.Hlog("status", "Incorrect Password, try another.")
					elif e == [111, "Connection refused"]:
						self.Hlog("status", e[1] +", make sure the daemon is running, or change the interface.")
					self.Hlog("debug", "Connection failed, try changing your interface or password")
					for lines in self.help_connect:
						self.Hlog("status", lines)
					q = "42"
					while q == "42":
						sleep(0.01)
						try:
							c = self.stdscr.getkey(self.h-3, self.edit.x+1)
							keys.append(c)
						except:
							pass
						if not keys:
							d = 1000
						else:
							d = 0
						while keys:
							c, keys = keys[0], keys[1:]
							
							try:
								if self.edit.process(c):
									line = self.edit.line
									yes = self.commands(line)
									
									if yes == 0:
										q = 33
										break
									elif yes == 2:
										return
									else:
										self.edit.reset()
							except:
								pass
					break
		except Exception, e:
			self.Hlog("debug", "Connect "+str( e) )

	def process(self):

#		c = None
		keys = []
		
		while 1:
			try:
				c = self.stdscr.getkey(self.h-3, self.edit.x+1)
				keys.append(c)
			except:
				pass

			if not keys:
				d = 1000
			else:
				d = 0
			if self.socket != None:
			
				r, w, x = select.select([self.socket, sys.stdin], [], [self.socket], d)
				
			else:
				sleep(0.01)
			if self.socket in r:
				driver.Driver.process(self)

			if sys.stdin in r:
				try:
					c = self.stdscr.getkey(self.h-3, self.edit.x+1)
					keys.append(c)
					
				except Exception, e:
					pass
			while keys:
				
				c, keys = keys[0], keys[1:]
				try:
					
					if self.edit.process(c):
						self.line = self.edit.line
						yes = self.commands(self.line)
						
						if yes == 0:
							break
						elif yes == 2:
							return
						else:
							self.edit.reset()
							
				except Exception, e:
					self.Hlog("debug", "Processing... " + str(e))

			
	def commands(self, line):
		try:
			if line[:1] == "/" and line[:4] != "/me " and line[:2] != '//':
			
				if line == "/quit" or line == "/exit":
					self.shutdown()
					return 2
				elif line[:11] == "/disconnect":
					self.disconnect()
				elif line == "/debug":
					self.display["mode"] = "debug"
					self.help_mode()
				elif line[:5] == "/help":
					self.display["mode"] = "help"
					self.help_mode()
					if line[5:] == " chat":
						for line in self.help_chat:
							self.Hlog("help", line)
					elif line[5:] == " mode":
						for line in self.help_mode_text:
							self.Hlog("help", line)
					elif line[5:] == " user":
						for line in self.help_user:
							self.Hlog("help", line)
					elif line[5:] == " search":
						for line in self.help_search:
							self.Hlog("help", line)
					elif line[5:] == " browse":
						for line in self.help_browse:
							self.Hlog("help", line)
					elif line[5:] == " transfer":
						for line in self.help_transfer:
							self.Hlog("help", line)
					elif line[5:] == " ticker":
						for line in self.help_ticker:
							self.Hlog("help", line)
					elif line[5:] == " download":
						for line in self.help_download:
							self.Hlog("help", line)
					elif line[5:] == "":
						for line in self.help_help:
							self.Hlog("help", line)
					elif line[5:] == " keys":
						for line in self.help_keys:
							self.Hlog("help", line)
					elif line[5:] == " connect":
						for line in self.help_connect:
							self.Hlog("help", line)
					elif line[5:] == " setup":
						for line in self.help_setup:
							self.Hlog("help", line)
					try:
						self.edit.reset()
					except:
						pass
					'''
					Chatrooms
					'''
				elif line[:6] == "/talk ": 
					self.change_room(line[6:])
					
				elif line[:6] == "/join ":
					self.send(messages.JoinRoom( self.decode_language( line[6:] ) ))
				elif line[:3] == "/j ":
					self.send(messages.JoinRoom( self.decode_language( line[3:] ) ))
					
				elif line in ("/part", "/p", "/l", "/leave")  and self.Spl["room"]:
					self.send(messages.LeaveRoom(self.Spl["room"]))
					
				elif line[:6] == "/part ":
					for room in self.data["rooms"].keys():
						if self.decode_language( line[6:] ) == room:
							self.send(messages.LeaveRoom(room))
							
				elif line[:7] == "/leave ":
					for room in self.data["rooms"].keys():
						if self.decode_language( line[7:] ) == room:
							self.send(messages.LeaveRoom(room))
					
				elif line[:10] == "/autojoin " and line[10:] != '':
					if line[10:] in self.data["rooms"].keys():
						room = line[10:]
						self.mod_config("autojoin", room, '')
					else:
						self.Hlog("status", "You aren't in room: %s" % line[5:])
						
				elif line == "/autojoin":
					if self.Spl["room"] != None:
						room = self.Spl["room"]
						self.mod_config("autojoin", room, '')
						
				elif line == "/extra":
					
					if mucous_config["mucous"]["extra_requests"] == "Yes":
						mucous_config["mucous"]["extra_requests"] = "No"
					elif mucous_config["mucous"]["extra_requests"] == "No":
						mucous_config["mucous"]["extra_requests"] = "Yes"
					if mucous_config["mucous"]["extra_requests"] not in ("Yes", "No"):
						mucous_config["mucous"]["extra_requests"] = "No"
					self.Hlog("status", "Extra, CTCP-like, requests are responded to? %s"  % mucous_config["mucous"]["extra_requests"] )
					
				elif line[:4] == "/ut ":
					try:
						try:
							num = int(line[4:])
							for username, path in self.data["downloads"][num].items():
								self.send(messages.TransferUpdate(username, path) )
						except:
							return
						
					except Exception, e:
						self.Hlog("debug", str(e) )
						
				elif line[:6] == "/close":
					user = None
					if line[6:7] == " " and line[7:] != '':
						user == line[7:]
						
					if self.display["mode"] == 'private':
						if user != None: this_user = user
						else: this_user = self.usernames["private"]
						if this_user != None:
							self.close_private_chat(this_user)
							
					elif self.display["mode"] == 'chat':
						if user != None: room = user
						else: room = self.Spl["room"]
						if room in self.data["rooms"].keys():
							self.send(messages.LeaveRoom(room))
							
					elif self.display["mode"] == 'info':
						if user != None: this_user = user
						else: this_user = self.usernames["info"]
						if this_user != None:
							self.close_userinfo(this_user)
							
					elif self.display["mode"] == 'browse':
						if user != None: this_user = user
						else: this_user = self.usernames["browse"]
						if this_user != "default__":
							self.close_browse(this_user)
							
					elif self.display["mode"] =='search':
						if self.Spl["current_search"] != "default__":
							self.close_search(self.Spl["current_search"])
	
				elif line[:4] == "/pm " and line[4:] != '':
					self.usernames["private"] = line[4:]
					self.start_pm(self.usernames["private"])
					if self.display["mode"] == 'private':
						self.private_mode()
	
						
				elif line[:5] == "/msg " and line[5:] != '':
					if self.usernames["private"] != None:
						message = line[5:]
						
						self.send_private_message(self.usernames["private"], message)
					else:
						self.display["mode"] = "debug"
						self.help_mode()
						self.Hlog("status", "Set a user to message with /pm!")
						
				elif line == "/autoaway":
					aa = mucous_config["mucous"]["autoaway"]
					if aa == "yes":
						aa = "no"
					elif aa == "no":
						aa = "yes"
					mucous_config["mucous"]["autoaway"] = aa
					self.Hlog("status", "Autoaway is On? " + aa )
				elif line[:5] == "/away":
					self.toggle_away()
						
				elif line[:5] == "/say " and line[5:] !='':
					# /say <room> /me is hungry
					sine = line[5:]
					splited = sine.split(' ')
					if len(splited) > 1:
						
						if splited[0] in self.data["rooms"].keys():
							room = splited[0]
							if splited[1].isspace():
								pass
							else:
								message = string.join(map(str, splited[1:]))
								self.say_in_chat("chat", room, message)
						else:
							if len(splited) > 2:
								s = ''
								n = 0
								
								#self.Hlog("debug", str(splited))
								for i in range(len(splited)):
									if i == 0:
										s =splited[i]
									else:
										s += ' ' +splited[i]
									n += 1
									if s in self.data["rooms"].keys():
										break
			
								if s not in self.data["rooms"].keys():
									self.Hlog("debug", s)
									pass
								else:
									room = s
									message = string.join(map(str, splited[n:]))
									if message.isspace():
										pass
									else:
										self.say_in_chat("chat", room, message)
								
			
				elif line[:4] == "/url" and line[4:] == '':
					self.url = None
					logfile = None
					if self.display["mode"] == "chat" and self.Spl["room"] != None:
						logfile = self.logs["rooms"][self.Spl["room"]]
					elif self.display["mode"] == "private" and self.usernames["private"] != None:
						logfile = self.logs["private"][self.usernames["private"]]
					if logfile != None:
						lene = len(logfile)
						if lene > self.h-7:
							x = 3
						else:
							x = lene
						if x != 0:
							if self.display["mode"] == "chat":
								for line in logfile:
									if "://" in line[3]:
										urline = line[3].split(" ")
										for x in urline:
											if "://" in x: self.url = x
							elif self.display["mode"] == "private":
								for line in logfile:
									if "://" in line:
										urline = line.split(" ")
										for x in urline:
											if "://" in x: self.url = x
							
			
					if self.url != None:
						urlr = mucous_config["mucous"]["url reader"]
						if  urlr == "links":
							if os.path.expandvars("$TERM") != "linux" and os.path.exists("/usr/bin/links"):
								os.system("xterm -e 'TERM=xterm-color links "+self.url +"' &")
						elif urlr == "elinks":
							if os.path.expandvars("$TERM") != "linux" and os.path.exists("/usr/bin/elinks"):
								os.system("xterm -e 'TERM=xterm-color elinks "+self.url +"' &")
						elif urlr == "lynx":
							if os.path.expandvars("$TERM") != "linux" and os.path.exists("/usr/bin/lynx"):
								os.system("xterm -e 'TERM=xterm-color lynx "+self.url +"' &")	
						elif urlr == "firefox":
							os.system("mozilla -a firefox -remote 'openURL("+self.url +",new-tab)' &")
						elif urlr == "custom":
							os.system(mucous_config["mucous"]["url custom prefix"]+self.url+mucous_config["mucous"]["url custom suffix"]+" &")
							
				elif line[:11] == "/urlreader " and line[11:] != '':
					mucous_config["mucous"]["url reader"] = line[11:]
				elif line[:11] == "/urlcustom " and line[11:] != '':
					if "$" in line[11:]:
						custom = line[11:].split("$")
						if len(custom) > 1 and len(custom) < 3:
							mucous_config["mucous"]["url custom prefix"] = custom[0]
							mucous_config["mucous"]["url custom suffix"] = custom[1]
						elif len(custom) == 1:
							mucous_config["mucous"]["url custom prefix"] = custom[0]
							mucous_config["mucous"]["url custom suffix"] = ''
				elif line[:3] == "/np" and line[3:] == '':
					self.now_playing()
					
				elif line[:3] == "/w " and line[3:] != '' or line[:8] == "/window " and line[8:] != "":	
					if line[:3] == "/w ":
						num = line[3:]
					elif line[:8] == "/window ":
						num = line[8:]
					
					if num.isdigit() == 0:
						return
					
					if num == "1":
						self.chat_mode()
					elif num == "2":
						self.private_mode()
					elif num == "3":
						self.transfer_mode()
					elif num == "4":
						self.search_mode()
					elif num == "5":
						self.info_mode()
					elif num == "6":
						self.browse_mode()
					elif num == "7":
						self.list_mode()
					elif num == "8":
						self.rooms_mode()
					elif num == "9":
						self.setup_mode()
					elif num == "10":
						self.help_mode()
							
				elif line[:7] == "/npset " and line[7:] != '':
					mucous_config["mucous"]["now-playing"] =line[7:]
					
				elif line[:8] == "/npcheck" and line[8:] == '':
					if "now-playing" in mucous_config["mucous"].keys():
						self.Hlog("status", "Now playing command is: "+ str(mucous_config["mucous"]["now-playing"]))
					
				elif line[:10] == "/npprefix " and line[10:] != '':
					mucous_config["mucous"]["now-playing-prefix"] = line[10:]
					
				elif line == "/npprefix":
					if "now-playing-prefix" in mucous_config["mucous"]:
						mucous_config["mucous"]["now-playing-prefix"] = None
				elif line in ("/rescan", "/rescanshares"):
					self.muscan_command = ["muscan", "-v"]
					self.muscan_timer.cancel()
					self.muscan_timer = threading.Timer(1.0, self.muscan_display)
					self.muscan_timer.start()
					self.Hlog("status", "Updating shares with muscan, don't forget to Reload them.")
					
				elif line in ("/reload", "/reloadshares"):
					self.send(messages.ReloadShares() )
							
				elif line == "/redraw":
					self.line = self.build()
					
				elif line[:8] == "/logging":
					self.logging_toggle()
					
					if self.display["mode"]=="setup":
						self.setup_mode()
					'''
					User Information
					'''
				elif line[:10] == "/userinfo " and line[10:] != '':
					user = self.decode_language( line[10:] ) 
					self.requests["info"].append(user)
					self.send(messages.UserInfo(user) )
						
				elif line[:3] == "/tc":
					self.completion_list()
				elif line[:10] == "/language ":
					mucous_config["mucous"]["language"] = line[10:]
					
				elif line[:4] == "/ip " and line[4:] != '':
					try:
						
						user  = self.decode_language( str(line[4:]) )
						self.requests["ip"].append(user)
						self.send(messages.PeerAddress(user))
					except Exception, e:
						self.Hlog("debug", e)
						
				elif line == "/ip":
					try:
						if self.display["mode"] == "private" and self.usernames["private"] != None:
							user  =  self.usernames["private"]
							self.requests["ip"].append(user)
							self.send(messages.PeerAddress(user))
					except Exception, e:
						self.Hlog("debug", e)
						
				elif line[:6] == "/stat " and line[6:] != '':
					user = self.decode_language( str(line[6:]) )
					self.requests["statistics"].append(user)
					self.send(messages.PeerStats(user))
					'''
					MODE SELECTIONS
					'''
				
				elif line == "/chat" :
					self.chat_mode()
			
				elif line == "/private"  or line == "/privatechat":
					self.private_mode()
			
				elif line[:7] == "/search"  and line[7:] == '':
					self.search_mode()
			
				elif line == "/transfer"  or line == "/transfers":
					self.transfer_mode()
			
				elif line == "/info":
					self.info_mode()
					
				elif line == "/browse":
					self.browse_mode()
						
				elif line == "/buddylist" :
					self.display["list"] = "buddies"
					self.list_mode()
					
				elif line == "/banlist" :
					self.display["list"] = "banned"
					self.list_mode()
					
				elif line == "/ignorelist" :
					self.display["list"] = "ignored"
					self.list_mode()
					
				elif line == "/interests" :
					self.display["list"] = "interests"
					self.list_mode()
					
				elif line[:6] == "/setup"   and line[6:] == '':
					self.setup_mode()
					
					'''
					CONFIG
					'''
				elif line[:5] == "/save" and line[5:] == '':
					update_config()
					self.display["mode"] = "debug"
					self.help_mode()
					self.Hlog("status", "Config Saved")
				elif line[:11] == "/interface " and line[11:] != "":
					mucous_config["connection"]["interface"] = line[11:]
					self.Hlog("status", "Museekd interface set to: " + line[11:])
			
				elif line[:10] == "/password " and line[10:] != "":
					mucous_config["connection"]["passw"] = line[10:]
					self.Hlog("status", "New password set")
				elif line[:13] == "/ctcpversion ":
					user = line[13:]
					if user != "" and user.isspace() == False:
						self.send_private_message(user, curses.ascii.ctrl("A")+"VERSION"+curses.ascii.ctrl("A"))
				elif line == "/version":
					self.display["mode"] = "debug"
					self.help_mode()
					self.Hlog("status", "Mucous version: %s" % Version)
				elif line[:8] == "/connect":
					if self.Spl["connected"] == 0:
						self.invalidpass = 0
						self.connect()
						return 0
					else:
						self.Hlog("status", "Already connected... aborting connection attempt.")
					'''
					Tickers
					'''
				elif line[:9] == "/tickroom":
					if line[9:] == '':
						self.Spl["ticker_room"] =  self.Spl["room"]
					elif line[9:10] == " " and line[10:] != '':
						self.Spl["ticker_room"] = line[10:]
						
				elif line[:7] == "/ticker" and line[7:] == '':
					if mucous_config["tickers"]["tickers_enabled"] == 'no':
						mucous_config["tickers"]["tickers_enabled"] = 'yes'
						
					elif mucous_config["tickers"]["tickers_enabled"] == 'yes':
						mucous_config["tickers"]["tickers_enabled"] = 'no'
						
				elif line[:10] == "/tickcycle" and line[10:] == '':
					if mucous_config["tickers"]["ticker_cycle"] == 'no':
						mucous_config["tickers"]["ticker_cycle"] = 'yes'
						
					elif mucous_config["tickers"]["ticker_cycle"] == 'yes':
						mucous_config["tickers"]["ticker_cycle"] = 'no'
						
						try:
							self.ticker_timer.cancel()
							if self.display["mode"]=="chat":
								self.display_status_log_border()
								self.display_status_log()
								curses.doupdate()
						except Exception, e:
							self.Hlog("status", e)
				elif line[:13] == "/defaulttick " and line[13:] != '':
					message = line[13:]
					self.send(messages.ConfigSet("default-ticker", "ticker", message))
					
				elif line[:13] == "/settemptick " and line[13:] != '':
					if self.Spl["ticker_room"] != None:
						message = line[13:]
						self.send(messages.RoomTickerSet(self.Spl["ticker_room"], message))
					else:
						self.Hlog("status", "Choose a room with /tickroom, first.") 		
				elif line[:9] == "/settick " and line[9:] != '':
					if self.Spl["ticker_room"] != None:
						message = line[9:]
						self.send(messages.ConfigSet("tickers", self.Spl["ticker_room"], message))
						self.send(messages.RoomTickerSet(self.Spl["ticker_room"], message))
					else:
						self.Hlog("status", "Choose a room with /tickroom, first.") 
					'''
					List tickers in current room or selected rooms
					'''
				
				elif line[:9] == "/listtick":
					if line [9:] == '':
						woom = self.Spl["room"]
					else:
						woom = line[10:]
						
					alpha_list  = SortedDict()
					for rooms12 in self.data["tickers"]:
						alpha_list[rooms12] = self.data["tickers"][rooms12]
					if mucous_config["tickers"]["tickers_enabled"] == 'yes':
						for rooms13, ticks in alpha_list.items():
							if rooms13 == woom:
								ttickers =[]
								ttickers = ticks.keys()
								if ttickers != []:
									self.info_log("Tickers in room: "+str(rooms13))
								ttickers.sort()
								for names in ttickers:
									self.info_log(" ["+str(names)+'] '+str(ticks[names]))
			
			
					'''
					User Management
					'''
				elif line[:5] == "/ban " and line[5:] != '':
					username = line[5:]
					self.mod_config("ban", username, '')
					
					
				elif line[:7] == "/unban " and line[7:] != '':
					username = line[7:]
					self.mod_config("unban", username, '')
					
						
				elif line[:8] == "/ignore " and line[8:] != '':
					username = line[8:]
					self.mod_config("ignore", username, '')
					
				elif line[:10] == "/unignore " and line[10:] != '':
					username = str(line[10:])
					self.mod_config("unignore", username, '')
							
				elif line[:7] == "/buddy " and line[7:] != '':
					username = str(line[7:])
					self.mod_config("buddy", username, '')
					
				elif line[:9] == "/unbuddy " and line[9:] != '':
					username = str(line[9:])
					self.mod_config("unbuddy", username, '')
					
				elif line[:6] == "/nuke " and line[6:] != '':
					username = str(line[6:])
					self.mod_config("ban", username, '')
					self.mod_config("ignore", username, '')
					
					self.Hlog("status", "Nuked: %s" % username)
					
				elif line[:8] == "/unnuke " and line[8:] != '':
					username = str(line[8:])
					if username in self.config["ignored"].keys():
						self.mod_config("unignore", username, '')
					if username in self.config["banned"].keys():
						self.mod_config("unban", username, '')
						
					self.Hlog("status", "Irradiated: %s" % username)
					
				elif line[:7] == "/trust ":
					username = line[7:]
					self.mod_config("trust", username, '')
				elif line[:10] == "/distrust ":	
					username = line[10:]
					self.mod_config("distrust", username, '')
					
				elif line[:11] == "/share-mode":
					if self.config["transfers"]["only_buddies"] == "true":
						self.send(messages.ConfigSet("transfers", "only_buddies", "false"))
						
					elif self.config["transfers"]["only_buddies"] == "false":
						self.send(messages.ConfigSet("transfers", "only_buddies", "true"))
			
					
				elif line[:11] == "/autobuddy":
					if mucous_config["mucous"]["autobuddy"]  == "yes":
						mucous_config["mucous"]["autobuddy"] = "no"
						self.Hlog("status", "AutoBuddy Disabled")
					elif mucous_config["mucous"]["autobuddy"]  == "no":
						mucous_config["mucous"]["autobuddy"] = "yes"
						self.Hlog("status", "AutoBuddy Enabled")
						
			
					'''
					List Users in room
					'''
				elif line[:5] == "/list":
					if line [5:6] == ' ':
						woom = line[6:]
					else:
						woom = self.Spl["room"]
					if woom != None:
						self.show_nick_list(woom)
						
				elif line[:6] == "/users":
					if line [6:7] == ' ':
						woom = line[7:]
					else:
						woom = self.Spl["room"]
					if woom != None:
						self.show_nick_list(woom)
						
				elif line == "/roombox":
					self.chat_room_cycle()
					
				elif line == "/login":
					self.send(messages.ConnectServer())
					
				elif line == "/logout":
					self.send(messages.DisconnectServer())
					
				elif line == "/globalrex":
					self.send(messages.GetGlobalRecommendations())
	
					
				elif line in ("/rex", "/recommendations"):
					self.send(messages.GetRecommendations())
					
				elif line[:10] == "/uploadto ":
					user = line[10:]
					if user.isspace() == 0 and user != "":
						self.usernames["upload"] = user
						
				elif line[:8] == "/upload":
					path = line[8:]
					if path.isspace() == 0 and path != "":
						self.send(messages.UploadFile(self.usernames["upload"], path))	
						
				elif line in ("/similar", "/similarusers"):
					self.send(messages.GetSimilarUsers())
					
				elif line[:9] == "/itemrex ":
					if line[9:] != "" and line[9:].isspace() == 0:
						item = line[9:]
						self.send(messages.GetItemRecommendations(item))
						
				elif line[:13] == "/itemsimilar ":
					if line[13:] != "" and line[13:].isspace() == 0:
						item = line[13:]
						self.send(messages.GetItemSimilarUsers(item))
						
				elif line[:6] == "/like ":
					interest = line[6:]
					self.send_add_interest(interest)
						
				elif line[:6] == "/hate ":
					interest = line[6:]
					self.send_add_hated_interest(interest)
						
				elif line[:11] == "/donotlike ":
					interest = line[11:]
					if interest in self.config["interests.like"]:
						self.send_remove_interest(interest)
						
				elif line[:11] == "/donothate ":
					interest = line[11:]
					if interest in self.config["interests.hate"]:
						self.send_remove_hated_interest(interest)
						
				elif line == "/transbox":
					if mucous_config["mucous"]["transbox"]=="split":
						mucous_config["mucous"]["transbox"]="tabbed"
					elif mucous_config["mucous"]["transbox"]=="tabbed":
						mucous_config["mucous"]["transbox"]="split"
					self.transfer_mode()
					'''
					List Rooms whose number of users is greater than the number you input
					'''
				elif line[:9] == "/roomlist":
					
					if line[9:] == '':
						self.rooms_mode()
					elif line[9:] == 'refresh':
						self.send(messages.RoomList())
						
				elif line in ("/privs", "/privileges"):
					self.send(messages.CheckPrivileges())
					
				elif line[:11] == "/giveprivs " :
					try:
						self.usernames["privileges"]  = str(line[11:])
						self.set_edit_title( "% Give Privileges to " + self.usernames["privileges"])
					except Exception, e:
						self.Hlog("debug", str(e))
					#self.send(messages.GivePrivileges("daelstorm", 20))
					
				elif line[:8] == "/inrooms" and line[8:] == '':
					w = ''
					for room in self.data["rooms"].keys():
						w += room + ', '
						
					self.Hlog("status", "You are in: %s" %w[:-2])
					
					'''
					Manual Download
					'''	
				elif line[:10] == "/downuser " and  line[10:] != '':
					self.transfer_mode()
					self.usernames["download"] = line[10:]
					self.set_edit_title("% % User: "+line[10:] + " (input download path) % %")
						
				elif line[:10] == "/downpath " and line[10:] != '':
					path = line[10:]
					if self.usernames["download"] != None and self.usernames["download"] != '':
						user = self.usernames["download"]
						self.send(messages.DownloadFile(user, path))
						self.Hlog("status", "Trying to Download: " + path+" from "+ user)
				elif line[:13] == "/downpathdir " and line[13:] != '':
					directory = line[13:]
					if self.usernames["download"] != None and self.usernames["download"] != '':
						user = self.usernames["download"]
						self.send(messages.GetFolderContents(user, directory))
						self.Hlog("status", "Try to Download directory: %s from %s" % (directory, user))
			
					'''
					Search Globally for files & Download them
					'''
				elif line[:11] == "/searchfor " and line[11:] != '':
					query = line[11:]
					if query not in ('mp3', ' ') and len(query) > 2:
						self.send(messages.Search(0, query))
						
					else:
						self.search_log("sstatus", "Query \""+ query+"\" was ignored", "default__", 0)
						
				elif line[:12] == "/searchuser " and line[12:] != '':
					self.usernames["search"] = user = line[12:]
					if self.display["mode"]=='search':
						self.search_mode()
				elif line[:13] == "/searchbuddy " and line[13:] != '':
					query = line[13:]
					self.send(messages.Search(1, query))
				elif line[:12] == "/searchroom " and line[12:] != '':
					query = line[12:]
					self.send(messages.Search(2, query))
						
				elif line[:10] == "/download " or line[:9] == "/downdir ":
					linput = None
					if line[:10] == "/download " and line[10:] != '':
						dtype = "file"
						linput = line[10:]
					elif line[:9] == "/downdir "  and line[9:] != '':
						dtype = "dir"
						linput = line[9:]
					if linput != None:
						if linput.isdigit():
							self.download_path_file(dtype, linput)
						else:
							self.Hlog("status", "Enter an Integer")
							
				elif line[:8] == "/filter " and line[8:] != '':
					
					self.sfilter=line[8:]
					if self.display["mode"]=='search':
						self.search_mode()
				elif line == "/filter":
					self.sfilter=None
					if self.display["mode"]=='search':
						self.search_mode()
					'''
					Browse Shares & Download from them
					'''
				elif line[:4] == "/cd " and line[4:] != '':
					self.user_shares_cd(line[4:])
					
		
					
				elif line[:4] == "/get" and line[4:] != '':
					linput = None
					if line[:5] == "/get " and line[5:] != '':
						dtype = "file"
						linput = line[5:]
					elif line[:8] == "/getdir "  and line[8:] != '':
						dtype = "dir"
						linput = line[8:]
					if linput != None:
						if linput.isdigit():
							self.download_path_file(dtype, linput)
						else:
							self.Hlog("status", "Enter an Integer")
							
					
				elif line[:12] == "/browseuser " or line[:7] == "/buser ":
					user = None
					if line[:12] == "/browseuser " and line[12:] != '':
						user = line[12:]
					elif line[:7] == "/buser " and line[7:] != '':
						user = line[7:]
					if user != None:
						self.start_browse(user)
						
						
				elif line[:14] == "/browsesearch " or line[:9] == "/bsearch ":
					l_input = None
					if line[:14] == "/browsesearch " and line[14:] != '':
						l_input = line[14:]
					elif line[:9] == "/bsearch " and line[9:] != '':
						l_input = line[9:]
					if l_input != None:
						self.bfilter = re.compile('.*' +str(l_input) + '.*', re.DOTALL | re.I)
						self.browse_display()
						curses.doupdate()
				elif line == "/browsesearch" or line == "/bsearch":
					self.bfilter = None
					self.browse_display()
					curses.doupdate()
					'''
					Manage Transfers
					'''
				elif line[:8] == "/abortd " or line[:11] == "/abortdown ":
					transfer = None
					if line[:8] == "/abortd " and line[8:] != '':
						if line[8:].isdigit():
							transfer = int(line[8:])
						else:
							self.Hlog("status", "Enter an Integer")
					elif line[:11] == "/abortdown " and line[11:] != '':
						try:
							transfer = int(line[11:])
						except:
							self.Hlog("status", "Enter an Integer")
						
					if transfer != None:
						if transfer in self.data["downloads"].keys():
							for username, path in self.data["downloads"][transfer].items():
								#self.Hlog("debug", username +' '+ path)
								self.Hlog("status", "Aborting download: [%s] %s" % (username, path))
								self.send(messages.TransferAbort(0, username, path))
						else:
							self.Hlog("status", "No such transfer #" + str(transfer))
				elif line[:8] == "/abortu " or line[:9] == "/abortup ":
					transfer = None
					if line[:8] == "/abortu " and line[8:] != '':
						try:
							transfer = int(line[8:])
						except:
							self.Hlog("status", "Enter an Integer")
					elif line[:9] == "/abortup " and line[9:] != '':
						try:
							transfer = int(line[9:])
						except:
							self.Hlog("status", "Enter an Integer")
					if transfer != None:
						if transfer in self.data["uploads"].keys():
							for username, path in self.data["uploads"][transfer].items():
								self.Hlog("status", "Aborting upload: [%s] %s" % (username, path))
								self.send(messages.TransferAbort(1, username, path))
						else:
							self.Hlog("status", "No such transfer #" + str(transfer))
				elif line[:9] == "/removeu " or line[:10] == "/removeup ":
					transfer = None
					if line[:9] == "/removeu " and line[9:] != '':
						try:
							transfer = int(line[9:])
						except:
							self.Hlog("status", "Enter an Integer")
					elif line[:10] == "/removeup " and line[10:] != '':
						try:
							transfer = int(line[10:])
						except:
							self.Hlog("status", "Enter an Integer")
					if transfer != None:
						if transfer in self.data["uploads"].keys():
							for username, path in self.data["uploads"][transfer].items():
								self.Hlog("status", "Removing upload: [%s] %s" % (username, path))
								self.send(messages.TransferRemove(1, username, path))
						else:
							self.Hlog("status", "No such transfer #" + str(transfer))
						
			
				elif line[:9] == "/removed " or line[:12] == "/removedown ":
					transfer = None
					if line[:9] == "/removed " and line[9:] != '':
						try:
							transfer = int(line[9:])
						except:
							self.Hlog("status", "Enter an Integer")
					elif line[:12] == "/removedown " and line[12:] != '':
						try:
							transfer = int(line[12:])
						except:
							self.Hlog("status", "Enter an Integer")
					if transfer != None:
						if transfer in self.data["downloads"].keys():
							for username, path in self.data["downloads"][transfer].items():
								self.Hlog("status", "Removing download: [%s] %s" % (username, path))
								self.send(messages.TransferRemove(0, username, path))
						else:
							self.Hlog("status", "No such transfer #" + str(transfer))
			
							
				elif line[:7] == "/retry " and line[7:] != '':
					transfer = None
					try:
						transfer = int(line[7:])
					except:
						self.Hlog("status", "Enter an Integer")
					if transfer != None:
						
						if transfer in self.data["downloads"].keys():
							for username, path in self.data["downloads"][transfer].items():
								self.Hlog("status", "Retrying download: [%s] %s" % (username, path))
								self.send(messages.DownloadFile(username, path))
						else:
							self.Hlog("status", "No such transfer #" + str(transfer))
							
				elif line[:9] == "/retryall":
					for user_path, transfer  in self.transfers["downloads"].items():
						if int(transfer[3]) in (10, 11, 12, 13, 14):
							self.send(messages.DownloadFile(transfer[1], transfer[2]))
			
				elif line[:7] == "/slots " and line[7:] != "":
					slots = None
					try:
						slots = int(line[7:])
					except:
						self.Hlog("status", "Enter an Integer")
					if slots != None:
						self.send(messages.ConfigSet("transfers", "upload_slots", str(slots)))
			
				elif line[:10] == "/privbuddy":
					if self.config["transfers"]["privilege_buddies"] == "true":
						self.send(messages.ConfigSet("transfers", "privilege_buddies", "false"))
						
					elif self.config["transfers"]["privilege_buddies"] == "false":
						self.send(messages.ConfigSet("transfers", "privilege_buddies", "true"))
						
						
				elif line[:10] == "/onlybuddy":
					if self.config["transfers"]["only_buddies"] == "true":
						self.send(messages.ConfigSet("transfers", "only_buddies", "false"))
					elif self.config["transfers"]["only_buddies"] == "false":
						self.send(messages.ConfigSet("transfers", "only_buddies", "true"))
			
				elif line[:7] == "/unhide":
					if self.display["password"] == "yes":
						self.display["password"] = "no"
					elif self.display["password"] == "no":
						self.display["password"] = "yes"
					if self.display["mode"] == "setup":
						self.setup_mode()
				elif line[:10] == "/buddyall":
					self.Hlog("status", "Buddying ALL users currently transferring to or from you.")
					currentusersintransferlist = {}
					for userpath, values in self.transfers["uploads"].items():
						currentusersintransferlist[values[1]] = 0
					for userpath, values in self.transfers["downloads"].items():
						currentusersintransferlist[values[1]] = 0
					for username in currentusersintransferlist.keys():
						if username not in self.config["buddies"].keys():
							self.send(messages.ConfigSet("buddies", username, "Buddied by mucous"))
							
				elif line[:6] == "/nick " and line[6:] != '':
					if self.usernames["username"] != None:
						self.send(messages.ConfigSet("server", "username", line[6:]))
				elif line == "/clearsearchs":
					self.clear_searchs()
				elif line[:8] == "/clearup":
					for userpath, values in self.transfers["uploads"].items():
						if values[3] in (0, 10, 11, 12, 13, 14):
							self.send(messages.TransferRemove(1, values[1], values[2]))
				elif line == "/percent":
					if self.display["t_speed"] == True:
						self.display["t_speed"] = False
					elif self.display["t_speed"] == False:
						self.display["t_speed"] = True
					self.transfer_mode()
					
				elif line[:10] == "/cleardown":
					for userpath, values in self.transfers["downloads"].items():
						if values[3] == 0:
							self.send(messages.TransferRemove(0, values[1], values[2]))
							
				elif line[:10] == "/clearroom":
					if line[10:] == '':
						
						self.logs["rooms"][self.Spl["room"]] = []
						if self.display["mode"] == "chat":
							self.chat_mode()
					elif line[10:11] == ' ' and line[11:] != '':
						if line[11:] in self.logs["rooms"].keys():
							self.logs["rooms"][line[11:]] = []
							if self.display["mode"] == "chat":
								self.chat_mode()
				elif line == "/aliases":
					self.Hlog("status", "Aliases:")
					for alias in mucous_config["aliases"].keys():
						self.Hlog("status", "/"+alias+": "+str(mucous_config["aliases"][alias]))
						self.Hlog("status", "")
						
				elif line[:7] == "/alias " and line[7:] != '':
					if line[7:].find(" ") != -1:
						splited = line[7:].split(" ")
						if len(splited) > 1:
							alias = splited[0]
							splited = splited[1:]
							if splited[0] != None:
								message = ''
								for i in splited:
									if i != splited[0]:
										message += ' ' +i
									else:
										message += i
								mucous_config["aliases"][alias] = str(message)
								if alias in mucous_config["aliases"].keys():
									self.Hlog("status", "Modified alias: "+alias)
								else:
									self.Hlog("status", "Created alias: "+alias)
								if "/"+alias not in self.commandlist:
									self.commandlist.append("/"+alias)
					else: 
						return 0
					
				elif line[:9] == "/unalias " and line[9:] != '':
					alias = line[9:]
					if alias in mucous_config["aliases"].keys():
						self.Hlog("status", "Deleted alias: "+alias)
						del mucous_config["aliases"][str(alias)]
						if "/"+alias in self.commandlist:
							self.commandlist.remove("/"+alias)
							
				elif line[:1] == "/":
					good = 0
					for alias in mucous_config["aliases"].keys():
						if line == '/'+alias:
							if self.display["mode"] == "chat":
								if self.Spl["room"] != None:
									self.say_in_chat("chat", self.Spl["room"], mucous_config["aliases"][alias])
									good = 1
									break
								
							elif self.display["mode"] == "private":
								if self.usernames["private"] != None:
									self.say_in_chat("private", self.usernames["private"], mucous_config["aliases"][alias])
									good = 1
									break
							
					if good != 1:
						return 0
					
				else:
					return 1
				
				
			elif self.Spl["title"]and line:
				'''
				Special Input Box for Downloading Manually
				'''
				# escape //
				if line[:2] == '//':
					line = line[1:]
				# Manual Download input box
				if self.Spl["title"][:10] == '% % User: ' and line != '':
					if self.usernames["download"] != None and self.usernames["download"] != '':
						path = line
						self.send(messages.DownloadFile(self.usernames["download"], path))
						self.Hlog("status", "Trying to Download: " + path+" from "+ self.usernames["download"])
				# Ticker set input box
				elif self.Spl["title"][:12] == '% Set ticker' and line != '':
					self.send(messages.RoomTickerSet(self.Spl["ticker_room"], line))
					
				elif self.Spl["title"]== '% Give Privileges to ' + str(self.usernames["privileges"]) and line != '':
					try:
						days = int(line)
						self.send(messages.GivePrivileges(self.usernames["privileges"], days))
						self.usernames["privileges"] = None
						if self.display["mode"] == "chat":
							self.set_edit_title(self.Spl["room"])
					except:
						self.Hlog("debug", "Enter the Number of days of privileges you wish to give " + self.usernames["privileges"])
			
				else:
					if line != '':
						if self.display["mode"] == "chat":
							#Normal Chat Room Message
							if self.Spl["room"]:
								self.say_in_chat("chat", self.Spl["room"], line)
						elif self.display["mode"] == "private":
							#Normal Private Messaging
							if self.usernames["private"] != None:
								# Private Message
								self.send_private_message(self.usernames["private"], line)
							else:
								# Set user to message
								self.usernames["private"] = self.decode_language( line)
								self.set_edit_title("Send message to: " + self.usernames["private"])
								self.start_pm(self.usernames["private"])
								
								
						elif self.display["mode"] == "search":
							
							if len(line) > 2 and line != 'mp3':
								# Normal Search
								query = line
								#self.decode_language( )
								if self.Spl["search_method"] == "globally":
									self.send(messages.Search(0, query ))
									
								# Buddies Search
								elif self.Spl["search_method"] == "buddies":
									self.send(messages.Search(1, query ))
								# Rooms Search	
								elif self.Spl["search_method"] == "rooms":	
									self.send(messages.Search(2, query ))
								elif self.Spl["search_method"] == "user":
									if self.usernames["search"] != None:
										self.send(messages.UserSearch(self.usernames["search"], query ))
								elif self.Spl["search_method"] == "wishlist":	
									self.send(messages.WishListSearch(query ))
						elif self.display["mode"] == "browse":
							# Browse User's shares
							if line[:3] == "cd ":
								self.user_shares_cd(line[3:])
								return 1
	
							elif line[:3] == "get" and line[3:] != '':
								linput = None
								if line[:4] == "get " and line[4:] != '':
									dtype = "file"
									linput = line[4:]
								elif line[:7] == "getdir "  and line[7:] != '':
									dtype = "dir"
									linput = line[7:]
								if linput != None:
									if linput.isdigit():
										self.download_path_file(dtype, linput)
									else:
										self.Hlog("status", "Enter an Integer")
									return 1
							
							
							self.start_browse(line)
							
							
						elif self.display["mode"] == "info":
							# Get User's UserInfo and PeerStats
							user = self.decode_language(line)
							self.info_log("Getting information about user: " + user)
							self.requests["info"].append(user)
							self.requests["statistics"].append(user)
							self.send(messages.UserInfo(user))
							self.send(messages.PeerStats(user))
							
						elif self.display["mode"] == "lists":
							if self.display["list"] == "buddies":
								self.mod_config("buddy", line, '')
							elif self.display["list"] == "banned":
								self.mod_config("ban", line, '')
							elif self.display["list"] == "ignored":
								self.mod_config("ignore", line, '')
							elif self.display["list"] == "interests":
								self.interests_input_parse(line)
						elif self.display["mode"] == "roomlist":
							self.send(messages.JoinRoom(line.decode(mucous_config["mucous"]["language"])))
						elif self.display["mode"] == "setup":
							self.setup_input_parse(line)
							#.decode(mucous_config["mucous"]["language"])
				try:
					self.edit.reset()
				except:
					pass
		except Exception,e:
			self.Hlog("debug", "commands: " + str(e))
			
	def send_add_interest(self, interest):
		try:
			if self.Spl["connected"] == 1 and not interest.isspace() and interest != "":
				self.send(messages.AddInterest(interest))
		except Exception,e:
			self.Hlog("debug", "send_add_interest: " + str(e))	
	def send_add_hated_interest(self, interest):
		try:
			if self.Spl["connected"] == 1 and not interest.isspace() and interest != "":
				self.send(messages.AddHatedInterest(interest))
		except Exception,e:
			self.Hlog("debug", "send_add_hated_interest: " + str(e))	
	def send_remove_interest(self, interest):
		try:
			if self.Spl["connected"] == 1 and not interest.isspace() and interest != "":
				if interest in self.config["interests.like"]:
					self.send(messages.RemoveInterest(interest))
		except Exception,e:
			self.Hlog("debug", "send_remove_interest: " + str(e))	
	def send_remove_hated_interest(self, interest):
		try:
			if self.Spl["connected"] == 1 and not interest.isspace() and interest != "":
				if interest in self.config["interests.hate"]:
					self.send(messages.RemoveHatedInterest(interest))
		except Exception,e:
			self.Hlog("debug", "send_remove_hated_interest: " + str(e))	
	def interests_input_parse(self, line):
		try:
			interest = self.decode_language(line)
			if self.display["interests"] == "likes":
				if self.Spl["interests_input"] == "add_likes":
					self.send_add_interest(interest)
				elif self.Spl["interests_input"] == "del_likes":
					self.send_remove_interest(interest)
			elif self.display["interests"] == "hates":
				if self.Spl["interests_input"] == "add_hates":
					self.send_add_hated_interest(interest)
				elif self.Spl["interests_input"] == "del_hates":
					self.send_remove_hated_interest(interest)
				
				
		except Exception,e:
			self.Hlog("debug", "interests_input_parse: " + str(e))
	def setup_input_parse(self, line):
		try:
			if self.Spl["setup_input"] == "interface":
				line = self.decode_language(line)
				mucous_config["connection"]["interface"] = line
			elif self.Spl["setup_input"]=="interface-password":
				line = self.decode_language(line)
				mucous_config["connection"]["passw"] = line
			elif self.Spl["setup_input"]=="custom-url":
				line = self.decode_language(line)
				if "$" in line:
					custom = line.split("$")
					if len(custom) > 1 and len(custom) < 3:
						mucous_config["mucous"]["url custom prefix"] = custom[0]
						mucous_config["mucous"]["url custom suffix"] = custom[1]
					elif len(custom) == 1:
						mucous_config["mucous"]["url custom prefix"] = custom[0]
						mucous_config["mucous"]["url custom suffix"] = ''
			elif self.Spl["setup_input"]=="museek-interface-password":
				self.send(messages.ConfigSet("interfaces", "password", line))
			elif self.Spl["setup_input"]=="museek-interface-bind":
				self.send(messages.ConfigSet("interfaces.bind", line))
			elif self.Spl["setup_input"]=="server-host":
				self.send(messages.ConfigSet("server", "host", line))
			elif self.Spl["setup_input"]=="server-port":
				self.send(messages.ConfigSet("server", "port", line))
			elif self.Spl["setup_input"]=="soulseek-username":
				line = self.decode_language(line)
				self.send(messages.ConfigSet("server", "username", line))
			elif self.Spl["setup_input"]=="soulseek-password":
				line = self.decode_language(line)
				self.send(messages.ConfigSet("server", "password", line))
			elif self.Spl["setup_input"]=="download-dir":
				self.send(messages.ConfigSet("transfers", "download-dir", line))
			elif self.Spl["setup_input"]=="incomplete-dir":
				self.send(messages.ConfigSet("transfers", "incomplete-dir", line))
			elif self.Spl["setup_input"]=="userinfo":
				try:
					if '\\n' in line:
						line = line.replace('\\n', '\n')
					self.send(messages.ConfigSet("userinfo", "text", line))
				except Exception, e:
					self.Hlog("debug", "set userinfo: "+str( e))
			elif self.Spl["setup_input"]=="userimage":
				try:
					self.send(messages.ConfigSet("userinfo", "image", line))
				except:
					pass
			elif self.Spl["setup_input"]=="adddir":
				line = self.decode_language(line)
				self.muscan_fuzzy = line
				self.muscan_command = ["muscan", "-s", self.muscan_fuzzy]
				self.muscan_timer.cancel()
				self.muscan_timer = threading.Timer(1.0, self.muscan_display)
				self.muscan_timer.start()
				self.Hlog("status", "Adding "+line+" to shares. Scanning will begin.")
			elif self.Spl["setup_input"]=="rmdir":
				line = self.decode_language(line)
				self.muscan_fuzzy = line
				self.muscan_command = ["muscan", "-u", self.muscan_fuzzy]
				self.muscan_timer.cancel()
				self.muscan_timer = threading.Timer(1.0, self.muscan_display)
				self.muscan_timer.start()
				self.Hlog("status", "Removing "+line+" from shares. Please rescan or update.")
			self.Spl["setup_input"] = "default"
			self.setup_mode()
		except Exception,e:
			self.Hlog("debug", "setup_input_parse: " + str(e))
		
	def logging_toggle(self):
		try:
			if "logging" in mucous_config["mucous"]:
				if str(mucous_config["mucous"]["logging"]) not in ("True", "False"):
					mucous_config["mucous"]["logging"] = "True"
				else:
					if str(mucous_config["mucous"]["logging"]) == "True":
						mucous_config["mucous"]["logging"] = "False"
					elif str(mucous_config["mucous"]["logging"]) == "False":
						mucous_config["mucous"]["logging"] = "True"
			else:
				if str(mucous_config["mucous"]["logging"]) == "True":
					mucous_config["mucous"]["logging"] = "False"
				elif str(mucous_config["mucous"]["logging"]) == "False":
					mucous_config["mucous"]["logging"] = "True"
					
			if str(mucous_config["mucous"]["logging"]) == "True":
				self.Hlog("status", "Logging Chat is now Enabled.")
			elif str(mucous_config["mucous"]["logging"]) == "False":
				self.Hlog("status", "Logging Chat is now Disabled.")
		except Exception,e:
			self.Hlog("debug", "logging_toggle: " + str(e))

	# -- v Museek Messages v

	
	def cb_login_error(self, reason):
		try:
			self.Spl["connected"] = 0
			if reason == "INVPASS":
				self.invalidpass = 1
				self.Hlog("status", "couldn't log in: Invalid Password")
				self.connect()
			else:
				self.invalidpass = 0
				self.Hlog("status", "couldn't log in: " + reason)
		except Exception,e:
			self.Hlog("debug", "cb_login_error: " + str(e))

	def cb_login_ok(self):
		try:
			self.invalidpass = 0
			self.Spl["connected"] = 1
			self.Hlog("status", "Logging into Museek at "+ mucous_config["connection"]["interface"])
			self.timeout_timer = threading.Timer(self.timeout_time, self.timeout)
			self.timeout_timer.start()
		except Exception,e:
			self.Hlog("debug", "cb_login_ok: " + str(e))
		
		
	def cb_disconnected(self):
		try:
			self.Spl["connected"] = 0
			self.logs["onlinestatus"]="Closed"
			self.onlinestatus.erase()
			self.onlinestatus.addstr(self.logs["onlinestatus"], self.colors["red"] | curses.A_BOLD |curses.A_REVERSE)
			self.onlinestatus.refresh()

			
			for room in self.data["rooms"].keys():
				msg = ("--- Disconnected from the Museek Daemon ---")
				self.say("Status", room, '!!!!', msg)
			uploadlist = []
			self.data["uploads"] = {}
			self.transfers["downloads"] = {}
			self.transfers["uploads"] = {}
			for room in self.data["rooms"].keys():
				self.data["rooms"][room] = []
				
			if self.display["mode"] == "chat":
				self.chat_mode()
			elif self.display["mode"] == "transfer":
				self.transfer_mode()
			self.update_title()
			self.upload_status("0")
			self.download_status("0")
			self.muscan_timer.cancel()
			self.timer.cancel()
			self.ticker_timer.cancel()
			self.retry_timer.cancel()
			self.clear_timer.cancel()
			self.timeout_timer.cancel()
		except Exception,e:
			self.Hlog("debug", "cb_disconnected: " + str(e))
			
			
	def cb_status_message(self, type, message):
		try:
			if type == 1:
				self.Hlog("status", "Peer Message: %s" % message)
			elif type == 0:
				self.Hlog("status", "Server Message: %s" % message)
		except Exception,e:
			self.Hlog("debug", "cb_status_message: " +str( e) )	
			
	def cb_server_state(self, state, username):
		try:
			self.usernames["username"] = username
			
			self.usernamewin.erase()
			self.usernamewin.addstr(self.decode_language(self.usernames["username"][:15]), self.colors["blafgcyabg"] )
			self.usernamewin.refresh()
		
			self.upload_status("0")
			self.download_status("0")
			self.search_status(0)
		
			if state:
# 				self.Hlog("status", "Connected to Server, username: " + username)
				
				self.logs["onlinestatus"]="Online"
				
	
				if self.data["rooms"].keys():
					for room in self.data["rooms"].keys():
						msg = ("--- Connected ---")
						self.say("Status", room, '!!!!', msg)
				
			else:
				self.Hlog("status", "Museek is not connected to Soulseek")
	
				self.logs["onlinestatus"]="Offline"
				
				
	
				if self.data["rooms"].keys():
					for room in self.data["rooms"].keys():
						msg = ("--- Disconnected from the Server ---")
						self.say("Status", room, '!!!!', msg)
				uploadlist = []
				self.data["uploads"] = {}
				self.transfers["downloads"] = {}
				self.transfers["uploads"] = {}
				for room in self.data["rooms"].keys():
					self.data["rooms"][room] = []
				if self.display["mode"] == "chat":
					self.chat_mode()
				elif self.display["mode"] == "transfer":
					self.transfer_mode()

			self.onlinestatus.erase()
			self.onlinestatus.addstr(self.decode_language(self.logs["onlinestatus"]), self.colors["blafgcyabg"] )
			self.onlinestatus.refresh()
			
		except Exception,e:
			self.Hlog("debug", "cb_server_state: " +str( e) )
		self.update_title()
		
	def toggle_away(self):
		try:
			if self.Spl["connected"] == 1:
				if self.Spl["status"] == 0:
					self.send(messages.SetStatus(1))
				elif self.Spl["status"] == 1:
					self.send(messages.SetStatus(0))
		except Exception,e:
			self.Hlog("debug", "toggle_away: " +str( e) )
			
	def update_title(self):
		# Changes Terminal TItle when Away Status changes
		try:
			if os.path.expandvars("$SHELL") in  ("/bin/bash", "/bin/sh"):
				if str(curses.termname() ) != "linux":
					os.system("echo -ne \"\033]0;Mucous %s: %s\007\" " %(Version, self.logs["onlinestatus"] ))
		except Exception,e:
			self.Hlog("debug", "update_title: " +str( e) )

			
	def cb_server_privileges(self, time_left):
		try: 
			time = time_left
			hours_i = time/3600
			minutes_i = time/60
			seconds_i = time - (60 * minutes_i)
			if minutes_i > 59:
				minutes_i = time/60 - (60 * hours_i)
				
			days = hours_i/24
			hours = hours_i - (days*24)
			time = 'You have %d Days, %2.2d:%2.2d:%2.2d of privileges left' % (days, hours, minutes_i, seconds_i)
				
			self.Hlog("status", time)
		except Exception,e:
			self.Hlog("debug", "cb_server_privileges: " +str( e) )
		
	def cb_room_state(self, roomlist, joined, tickers):
		try:
			for rooms1, numbers in roomlist.items():
				self.data["roomlist"][rooms1] = numbers
			
			for room in joined:
	
				if room not in self.logs["rooms"]:
					self.logs["rooms"][room] = []
					self.logs["status"][room] = []
					self.add_logs_to_chat(room)
						
				
# 				roomlist = []
	
				alpha_list  = SortedDict()
				
				for users in joined[room]:
# 					roomlist.append(users)
					self.user["status"][users] = joined[room][users][0]
					self.user["statistics"][users] = joined[room][users][1], joined[room][users][2 ], joined[room][users][3], joined[room][users][4]
					
				self.data["rooms"][room] = joined[room].keys()
					#avgspeed, numdownloads, numfiles, numdirs
	
				# tickers == (rooms, [(user1: message1), (user2: message2),] )
				# a string and then a dictionary
	
				for rooms14, ticks in tickers.items():
					if rooms14 == room:
						self.data["tickers"][room] = ticks
	
				for rooms2, ticks in alpha_list.items():
					if rooms2 == room:
						self.data["tickers"][room] = alpha_list[room]
						
				#SMALL ROOM USER PRINTOUT
	# 			
	# 			if self.display["chatshape"] not in ('big', 'small', "nostatuslog"):
	# 				if len(joined[room]) <= 30:
	# 					self.show_nick_list(room)
	# 				else:
	# 					self.say("List", room, '!!!!', [[str(len(joined[room])), "Normal"]])
	
				if mucous_config["tickers"]["tickers_enabled"] == 'yes':
					if len(joined[room]) <= 30:
						for rooms3, ticks in self.data["tickers"].items():
							if rooms3 == room:
								ttickers =[]
								ttickers = ticks.keys()
								if ttickers != []:
									self.info_log("Tickers in room: "+str(rooms3))
									ttickers.sort()
									for names in ttickers:
										self.info_log(" ["+str(names)+'] '+str(ticks[names]))
									self.info_log("")
	
					
			joined = self.data["rooms"].keys()
			joined.sort()
			if joined != []:
				if mucous_config["rooms"]["default_room"] != None:
					if mucous_config["rooms"]["default_room"] in joined:
						self.Spl["room"] = mucous_config["rooms"]["default_room"]
						self.change_room(mucous_config["rooms"]["default_room"])
					else:
						self.send(messages.JoinRoom(mucous_config["rooms"]["default_room"]))
						self.change_room(joined[0])
	
				else:
					self.Spl["room"] = joined[0]
					self.change_room(joined[0])

		except Exception, e:
			self.Hlog("debug", "CB Room state" + str(e))	
		
	def cb_room_list(self, roomlist):
		try:
			for name in  roomlist:
				alpha_list[name] = roomlist[name]
			
			self.data["roomlist"] = {}
			
			for x, y in alpha_list.items():
				self.data["roomlist"][x] = y
				
			if self.display["mode"]=="roomlist":
				self.rooms_mode()
		except Exception, e:
			self.Hlog("debug", "CB Room List" + str(e))
			
	def cb_get_global_recommendations(self, recommendations):
		try:
			self.data["recommendations"] = SortedDict()
			for rec, num in recommendations.items():
				self.data["recommendations"] [rec] = num
			if self.display["mode"] == "lists" and self.display["list"] == "interests":
				self.interests_draw()
		except Exception, e:
			self.Hlog("debug", "CB Get Global Recommendations" + str(e))

	def cb_get_similar_users(self, users):
		try:
			
			self.data["similar_users"] = SortedDict()
			for rec, num in users.items():
				self.data["similar_users"][rec] = num
			if self.display["mode"] == "lists" and self.display["list"] == "interests":
				self.interests_draw()
		except Exception, e:
			self.Hlog("debug", "CB Similar Users" + str(e))
			
	def cb_get_recommendations(self, recommendations):
		try:
			self.data["recommendations"] = SortedDict()
			for rec, num in recommendations.items():
				self.data["recommendations"] [rec] = num
			if self.display["mode"] == "lists" and self.display["list"] == "interests":
				self.interests_draw()
		except Exception, e:
			self.Hlog("debug", "CB Get  Recommendations" + str(e))
			
	def cb_get_item_similar_users(self, item, users):
		try:
			self.data["similar_users"] = SortedDict()
			for rec, num in users.items():
				self.data["similar_users"][rec] = num
			if self.display["mode"] == "lists" and self.display["list"] == "interests":
				self.interests_draw()
		except Exception, e:
			self.Hlog("debug", "CB Item Similar Users" + str(e))
			
	def cb_get_item_recommendations(self, item, recommendations):
		try:

			self.data["recommendations"] = SortedDict()
			for rec, num in recommendations.items():
				self.data["recommendations"] [rec] = num
			if self.display["mode"] == "lists" and self.display["list"] == "interests":
				self.interests_draw()
		except Exception, e:
			self.Hlog("debug", "CB Get Item Recommendations" + str(e))
			
# 	def cb_add_hated_interest(self, interest):
# 		self.Hlog("status", str(interest)) 
				
	def beep(self):
		try:
			if mucous_config["mucous"]["beep"] == "True":
				if os.path.expandvars("$SHELL") in  ("/bin/bash", "/bin/sh"):
					os.system("echo -ne \"\a\" " )
		except Exception,e:
			self.Hlog("debug", "beep: " + str(e))
				
	def cb_room_said(self, room, user, text):
		try:
			#text = text.replace('\n', " ").replace('\t', "     ")
			text = text.replace('\t', "     ")
			
			
	
			if text[:4] == "/me ":
				self.say("Me", room, user, text[4:])
				if self.usernames["username"] in text[4:]:
					if self.display["mode"] != "chat":
						self.alert_status(room)
						
						self.alert["CHAT"][room] = "nick"
						self.beep()
					elif self.display["mode"] == "chat" and self.Spl["room"] != room:
						self.alert_status(room[:14])
						self.alert["CHAT"][room] = "nick"
						self.beep()
					
				else:
					if self.display["mode"] != "chat":
						self.alert_status("%s" % room)
						if room not in self.alert["CHAT"]:
							self.alert["CHAT"][room] = "normal"
					elif self.display["mode"] == "chat" and self.Spl["room"] != room:
						self.alert_status(room)
						if room not in self.alert["CHAT"]:
							self.alert["CHAT"][room] = "normal"
			else:
				if self.usernames["username"] in text:
					self.say("Mentioned", room, user, text)
					if self.display["mode"] != "chat":
						self.alert_status(room)
						self.beep()
						self.alert["CHAT"][room] = "nick"
					elif self.display["mode"] == "chat" and self.Spl["room"] != room:
						self.alert_status(room)
						self.beep()
						self.alert["CHAT"][room] = "nick"
	
				else:
					self.say("Normal", room, user, text)
					if self.display["mode"] != "chat":
						self.alert_status( room)
						if room not in self.alert["CHAT"]:
							self.alert["CHAT"][room] = "normal"
	
					elif self.display["mode"] == "chat" and self.Spl["room"] != room:
						self.alert_status(room)
						if room not in self.alert["CHAT"]:
							self.alert["CHAT"][room] = "normal"
			self.hotkeys()
						
			if mucous_config["mucous"]["logging"] in (True, "True"):
				message = "[%s]\t%s" % (user, text)
				self.log_to_file("rooms", time.strftime("%d %b %Y %H:%M:%S"), room, message )
		except Exception, e:
			self.Hlog("debug", "CB Room Said" + str(e))
			
	
	def cb_room_joined(self, room, list_of_users):
		try:
			self.data["tickers"][room] = {}
			if room not in self.logs["rooms"]:
				self.logs["rooms"][room] = []
				self.logs["status"][room] = []
				
			for users, stats in list_of_users.items():
				self.user["statistics"][users] = stats[1], stats[2 ], stats[3], stats[4] #avgspeed, numdownloads, numfiles, numdirs
				self.user["status"][users] = stats[0] # online status
			
			self.data["rooms"][room] = list_of_users.keys()
			
			curses.doupdate()
		except Exception, e:
			self.Hlog("debug", "CB Room Joined: " + str(e))
	
	def cb_room_left(self, room):
		try:
			joined = self.data["rooms"].keys()
			joined.sort()
			del self.data["rooms"][room]
			if room == self.Spl["room"]:
				if len(joined) == 1:
					self.change_room(None)
				else:
					ix = joined.index(room)
					if ix > 0:
						ix -= 1
					elif ix == 0:
						ix = -1
					self.change_room(joined[ix])
					self.say("Status", joined[ix], '!!!!', "Left room %s" % room)
			joined.remove(room)
			
			if joined == []:
				self.change_room(None)
				self.drawchatwindow()
				self.windows["text"]["chat"].noutrefresh()
			else:
				joined.sort()
			if room in self.alert["CHAT"]:
				del self.alert["CHAT"][room]
			curses.doupdate()	
		except Exception, e:
			self.Hlog("debug", "CB Room Left" + str(e))
			
		if self.logs["alert"] == "%s" % room[:14]:
			self.alert_status("")
	
	def cb_room_user_joined(self, room, user, data):
		try:
			status, speed, downloads, files, dirs, other = data 
			s = self.windows["dimensions"]["chat"]
			did = "join"
			what = data
			if self.config !=  {}: 
				if "ignored" in self.config.keys(): 
					if user not in self.config["ignored"].keys():
						self.log_window(user, room, did, what)
			if user not in self.data["rooms"][room]:
				self.data["rooms"][room].append(user)
			self.user["statistics"][user] = speed, downloads, files, dirs
			self.user["status"][user] = status
			# correct placement in roombox
			if self.display["mode"] == "chat":
				if self.Spl["room"] == room:
					if self.display["chat"]  == "roombox":
						self.data["rooms"][room].sort()
						if self.data["rooms"][room].index(user) < self.scrolling["roombox"]:
							self.scrolling["roombox"] += 1

					self.roomstatusbox()
					for lines in self.logs["rooms"][self.Spl["room"]][ len(self.logs["rooms"][self.Spl["room"]]) - s["height"]:]:
						# Update Chat history if user changes status
						if lines[2] == user:
							self.change_room(self.Spl["room"])
							break
					curses.doupdate()
		except Exception, e:
			self.Hlog("debug", "CB Room User Joined" + str(e))

	
	def cb_room_user_left(self, room, user):
		try:
			did = "left"
			what = None
			if self.config !=  {}: 
				if "ignored" in self.config.keys(): 
					if user not in self.config["ignored"].keys():
						self.log_window(user, room, did, what)
			# correct placement in roombox
			if  self.display["mode"] == "chat" and self.display["chat"]  == "roombox":
				self.data["rooms"][room].sort()
				if self.data["rooms"][room].index(user) < self.scrolling["roombox"]:
					self.scrolling["roombox"] -= 1
			if user in self.data["rooms"][room]:
				self.data["rooms"][room].remove(user)
			if room in self.data["tickers"]:
				if user in self.data["tickers"][room]:
					del self.data["tickers"][room][user]
			if self.display["mode"] == "chat" and self.Spl["room"] == room:
				self.roomstatusbox()
				for lines in self.logs["rooms"][room][len(self.logs["rooms"][self.Spl["room"]]) - self.windows["dimensions"]["chat"]["height"]:]:
					# Update Chat history if user changes status
					if lines[2] == user:
						self.change_room(room)
						break
				curses.doupdate()
		except Exception, e:
			self.Hlog("debug", "CB Room User Left" + str(e))
	
	def cb_peer_status(self, user, status):
		try:
			if status == 1: what = "away"
			elif status == 2: what = "online"
			elif status == 0: what = "offline"
			
			if user in self.user["status"]:
				if self.user["status"][user] == status:
					return
				else: 
					self.user["status"][user] = status
			else:
				self.user["status"][user] = status

			room = None
			did = "change"
			if self.config !=  {}: 
				if "ignored" in self.config.keys(): 
					if user not in self.config["ignored"].keys():
						self.log_window(user, room, did, what)
						
			if self.display["mode"] == "chat" and user in self.data["rooms"][self.Spl["room"]]:
				self.roomstatusbox()
				curses.doupdate()
			elif self.display["mode"] in ("private", "info", "browse", "lists"):
				self.reload_mode(user)
		except Exception, e:
			self.Hlog("debug", "CB Peer Status" + str(e))
			
	def reload_mode(self, user):
		if self.display["mode"] == "private":
			if user in self.logs["private"].keys():
				self.private_mode()
		elif self.display["mode"] == "chat":
			if user in self.data["rooms"][self.Spl["room"]]:
				self.chat_mode()
		elif self.display["mode"] == "info":
			if user in self.activeitems["info"]:
				self.info_mode()
		elif self.display["mode"] == "lists":
			if self.display["list"] in self.config.keys():
				if user in self.config[self.display["list"]].keys():
					self.list_mode()
		elif self.display["mode"] == "browse":
			if user in self.activeitems["browse"]:
				self.browse_mode()
		elif self.display["mode"] == "search":
			if user in self.data["search_tickets"].keys():
				self.search_mode()
		elif self.display["mode"] == "transfers":
			self.transfer_mode()
		elif self.display["mode"] == "roomlist":
			self.rooms_mode()
		elif self.display["mode"] == "setup":
			self.setup_mode()
		elif self.display["mode"] in ("help", "debug", "status"):
			self.help_mode()
			
	def cb_user_info(self, user, info, picture, uploads, queue, slotsfree):
		try:
			if user in self.requests["info"]:
				self.requests["info"].remove(user)
				self.usernames["info"] = user
				message = info.split('\n')
				self.userinfo_log(user, message, [queue, uploads, slotsfree])
				if picture != '':
					r = file(config_dir+str(user)+".image", 'w')
					print >> r, str(picture)
					r.close()
					self.info_log( "Saved UserImage as: "+ str(user)+".image")
				if self.display["mode"] != "info":
					self.alert_status("New Userinfo")
					self.alert["INFO"].append(user)
					self.hotkeys()
		except Exception, e:
			self.Hlog( "debug", "cb_user_info: " + str(e))
				
	def cb_peer_address(self, user, ip, port):
		try:
			if user in self.requests["ip"]:
				self.requests["ip"].remove(user)
				
				if geoip_fail==0:
					try:
						country =  gi.country_name_by_addr( str(ip) )
						self.info_log("%s's IP: %s Port: %s Country: %s"  % (user, str(ip), str(port), country) )
					except Exception, e:
						self.Hlog("debug", "CB Peer Address: " + str(e))
				else:
					self.info_log("%s's IP: %s Port: %s"  % (user, str(ip), str(port)) )
				if self.display["mode"] != "info":
					self.alert_status("New IP")
		except Exception, e:
			self.Hlog( "debug", "cb_peer_address: " + str(e))
			
	def cb_peer_stats(self, user, avgspeed, numdownloads, numfiles, numdirs):
		try:
			self.user["statistics"][user] = avgspeed, numdownloads, numfiles, numdirs
			if user in self.requests["statistics"]:
	
				self.info_log("Peer Stats for: %s" % user)
				self.info_log("Speed: %sKB/s" % avgspeed/1024)
				self.info_log("Downloads: %s" % numdownloads)
				self.info_log("Files: %s" % numfiles)
				self.info_log("Directories: %s" % numdirs)
				
				self.requests["statistics"].remove(user)
				if self.display["mode"] != "info":
					self.alert_status("New Stats")
				else:
					self.display_userinfo_log()
			if user == self.usernames["username"]:
				self.data["mystats"] = user,  avgspeed, numdownloads, numfiles, numdirs
				if self.display["mode"] == "setup":
					self.setup_mode()
		except Exception, e:
			self.Hlog( "debug", "cb_peer_stats: " + str(e))

	def cb_private_message(self, direction, timestamp, user, message):
		try:
			
			ctcpversion = 0
			if message == curses.ascii.ctrl("A")+"VERSION"+curses.ascii.ctrl("A"):
				message = "CTCP VERSION"
				ctcpversion = 1
			
			if user not in self.logs["private"].keys():
				self.logs["private"][user] = []
				if mucous_config["mucous"]["logging"] in (True, "True"):
					self.add_logs_to_private(user)
				
			if mucous_config["mucous"]["logging"] in (True, "True"):
				if direction == 0:
					self.log_to_file("private", time.strftime("%d %b %Y %H:%M:%S"), user, "["+user+"]\t"+ message )
				elif direction == 1:
					self.log_to_file("private", time.strftime("%d %b %Y %H:%M:%S"), user, "["+self.usernames["username"]+"]\t"+ message )
			
			if self.usernames["private"] == None:
				self.usernames["private"] = user

			if direction == 0:	
				pmtype = "incoming"
			elif direction == 1:
				pmtype = "outgoing"
			
			self.private_log(pmtype, user, message)
			
			if self.display["mode"] != "private":
				self.alert_status("New PM")
				if user not in self.alert["PRIVATE"]:
					self.alert["PRIVATE"].append(user)
					self.hotkeys()
				self.beep()
				
			elif self.display["mode"] == "private" and self.usernames["private"] != user:
				if user not in self.alert["PRIVATE"]:
					self.alert["PRIVATE"].append(user)
					self.hotkeys()
				self.beep()
				
			if ctcpversion == 1 and direction == 0:
				if mucous_config["mucous"]["extra_requests"] == "Yes":
					self.send_private_message(user, "Mucous %s" % Version)
				
		except Exception, e:
			self.Hlog( "debug", "cb_private_message: " + str(e))
				
		
	def cb_server_status_set(self, status):
		try:
			self.Spl["status"] = status
			if status:
				stat = "Away"
			else:
				stat = "Online"
			
			self.logs["onlinestatus"]=stat
			
			try:
				self.onlinestatus.erase()
				self.onlinestatus.addstr(self.decode_language(self.logs["onlinestatus"]), self.colors["blafgcyabg"] )
				
			except:
				pass
			self.onlinestatus.refresh()
			self.update_title()
		except Exception, e:
			self.Hlog( "debug", "cb_server_status_set: " + str(e))
			
	def cb_room_tickers(self, room, tickers):
		try:
			for user, message in tickers.items():
				self.data["tickers"][room][user] = message
		except Exception, e:
			self.Hlog( "debug", "cb_room_tickers: " + str(e))
		
	def cb_room_ticker_set(self, room, user, message):
		try:
			what = message
			did = "ticker"
			if self.config !=  {}: 
				if "ignored" in self.config.keys(): 
					if user not in self.config["ignored"].keys():
						self.log_window(user, room, did, what)
			if room in self.data["tickers"].keys():
				
				self.data["tickers"][room][user] = message
					
		except Exception, e:
			self.Hlog( "debug", "cb_room_ticker_set: " + str(e))
			
	def cb_search_ticket(self, query, ticket):
		try:
			self.data["search_tickets"][str(ticket)] = query
			self.Spl["current_search"]=str(ticket)
			self.begin_search(self.Spl["current_search"], query)
		except Exception, e:
			self.Hlog( "debug", "cb_search_ticket: " + str(e))
		
	def cb_search_results(self, ticket, user, free, speed, queue, results):
		# search results
		try:
	
			for result in results:
				result_list = []
				# Create Result List for future use 
				# clear it next interation
				# Count Search Result
				self.search_number += 1
				# Send Num of Results to Search Window
				self.search_status(self.search_number)
	
				ftype = result[2]
				if ftype in ('', None):
					if result[0][-4:-3] == ".":
						ftype = result[0][-3:]
				ftype = ftype.upper()
				result_list = str(ticket), user, free, speed, queue, result[0], result[1], ftype, result[3]
				self.data["search_results"][self.search_number] = result_list
				
			if self.display["mode"] != "search" or self.Spl["current_search"] != str(ticket):
				if str(ticket) not in self.alert["SEARCH"]:
					self.alert["SEARCH"].append( str(ticket) )
					self.check_alert_state()
				
			if self.Spl["current_search"]!= "default__" and  self.Spl["show_menu"] != True:
					self.Format_Search_Results(str(ticket))
		except Exception, e:
			pass


	def cb_user_shares(self, user, shares):
		try:
			if user in self.requests["browse"] and shares != {}:
				
				if user not in self.activeitems["browse"]:
					self.activeitems["browse"].append(user)
				self.requests["browse"].remove(user)
				self.usernames["browse"] = user
				if self.display["mode"] != "browse":
					self.alert["BROWSE"].append(self.usernames["browse"])
					self.check_alert_state()

				#self.browse_log("Browsing files: " + user, user)
				self.data["browse_results"][user] = {}
				self.data["browse_num"][user] = 0
				self.data["browse_results"][user]["dirs"] = []
				# Debugging
				#self.Hlog("debug", shares.keys())
				#########
				sdirs = shares.keys()
				sdirs.sort()
				
				if sdirs != []:
					for item in sdirs:
						s = item.split("\\")
						path = ''
	
						parent = s[0]
						for seq in s[1:]:

							parent += "\\"
	
							path = parent+seq

			
							if path not in self.data["browse_results"][user]["dirs"]:
								self.data["browse_results"][user]["dirs"].append(path)
							parent =  path
									
				self.data["browse_results"][user]["dirs"].sort()
								
				self.Spl["dir_browse"]=self.data["browse_results"][user]["dirs"][0]
				
				self.data["shares"][user] = shares
				
				for dirs, files in shares.items():
					self.data["browse_results"][user][dirs] = files
					#result_list = []
					
				if self.display["mode"] == "browse":
					self.set_edit_title("Browse "+user+"'s files in " + self.Spl["dir_browse"] + " ")
					self.browse_mode()
					
		except Exception, e:
			self.Hlog("debug", "CB User Shares: " + str(e))

			
	def browse_file_stats(self, user, dirs):
		try:
			if self.display["mode"] != "browse":
				self.alert["BROWSE"].append(user)
				self.alert_status("Browse: %s" % user)
				return
			tw = self.windows["text"]["browse"]
			w = self.windows["dimensions"]["browse"]
			self.data["browse_num"][user] = 0
			browse_list = []
			count =0 
			# file, stats[ size, ftype, [bitrate, length ] ]
			if dirs not in self.data["shares"][user]:
				tw.erase()
				tw.addstr("Empty..")
				tw.refresh()
				self.files =  []
				return
			if self.data["shares"][user][dirs] == {}:
				tw.erase()
				tw.addstr("Empty..")
				tw.refresh()
				self.files =  []
				return
			length_list = len(str(len(self.data["shares"][user][dirs].keys() ) ) )
			for file, stats in self.data["shares"][user][dirs].items():
				count += 1
				
				self.data["browse_num"][user] = self.data["browse_num"][user] +1
				size  = self.byte_format(stats[0])
				if len(size) < 6:
					size = ' '* (6-len(size)) + size
				ftype =stats[1]
				
				if ftype in ('OGG', 'MP3', 'ogg', 'mp3') and stats[2] != []:
					bitrate =str(stats[2][0])
					if bitrate == '':
						bitrate = '0'	
					length =str(stats[2][1])
					if length != '' and length != None:
						minutes = int(length)/60
						seconds = str( int(length) - (60 * minutes))
						if len(seconds) < 2:
							seconds = '0' + seconds
						length = str(minutes)+":"+str(seconds)
					else:
						length = "0:00"
						bitrate = '0'
				else:
					ftype = "None"
					length = "0:00"
					bitrate = '0'
					
				filename = dirs + "\\" + file
				#result_list = user, filename
				# Activate Number for Result
				if len(str(count)) < length_list:
					s = " " * (length_list - len(str(count)))
				else:
					s = ''
				line = "%s%s|%s| %s" % ( s, str(count), size, file )
				browse_list.append(line)
				
			self.files = self.data["shares"][user][dirs].keys()
				
			if self.bfilter != None:
				a = []
				for path in browse_list:
					if re.match( self.bfilter, path):
						a.append(path)
				browse_list = a
				del a
					
			clipped_list, self.scrolling["browsefile"], self.windows["dimensions"]["browse"]["start"] = self.scrollbox(browse_list, self.scrolling["browsefile"], w["height"])
			sup = self.scrolling["browsefile"]
				
			

			count = 0
			tw.erase()
			for line in clipped_list:
				self.display_browse_text(line, count, sup)
				count += 1
			tw.refresh()
			
		except Exception, e:
			self.Hlog("debug", "browse_file_stats: " + str(e))
			
	
	
	def browse_file_bar(self):
		try:
			self.browse_bar.erase()
			num = self.scrolling["browsefile"]
			if self.Spl["dir_browse"] not in self.data["shares"][self.usernames["browse"]]:
				self.browse_bar.refresh()
				return
			if self.data["shares"][self.usernames["browse"]][self.Spl["dir_browse"]].keys() != []:
				file, stats = self.data["shares"][self.usernames["browse"]][self.Spl["dir_browse"]].items()[num]
			else: 
				self.browse_bar.refresh()
				return
	

			size  = self.byte_format(stats[0])
			
			ftype =stats[1]
			if ftype == '':
				ftype = "None"
				length = "0:00"
				bitrate = '0'
			else:
				bitrate =str(stats[2][0])
				if bitrate == '':
					bitrate = '0'	
				length =str(stats[2][1])
				if length != '' and length != None:
					minutes = int(length)/60
					seconds = str( int(length) - (60 * minutes))
					if len(seconds) < 2:
						seconds = '0' + seconds
					length = str(minutes)+":"+str(seconds)
				else:
					length = "0:00"
			
			#self.browse_file_bar('['+str(self.data["browse_num"][user])+'] '+" Size: " + str(size)+" Length: " + length + " Bitrate: " + bitrate)
			line ='['+str(num+1)+'] '+" Size: " + str(size)+" Length: " + length + " Bitrate: " + bitrate
			self.browse_bar.addstr(line)
			self.browse_bar.refresh()
		except Exception, e:
			self.Hlog("debug", "browse_file_bar: " + str(e))
			
# 	def get_shares(self, user, shares):
			
	def cb_transfer_state(self, downloads, uploads):
		try:
			for transfer in uploads:
	
				self.transfers["uploads"][(transfer.user, transfer.path)] =  [transfer.is_upload, transfer.user, transfer.path, int(transfer.state), transfer.error, transfer.filepos, transfer.filesize, transfer.rate, transfer.place]
			self.upload_status(str(len(self.transfers["uploads"].keys())))
			
			for transfer in downloads:
				self.transfers["downloads"][(transfer.user, transfer.path)] =  [transfer.is_upload, transfer.user, transfer.path, int(transfer.state), transfer.error, transfer.filepos, transfer.filesize, transfer.rate, transfer.place]
	
			self.download_status(str(len(self.transfers["downloads"].keys())))		
			if self.display["mode"] == "transfer":
				if mucous_config["mucous"]["transbox"] == "split":
					self.upload_manager()
					self.download_manager()
					curses.doupdate()
				else:
					if self.display["transfers"] == "uploads":
						self.upload_manager()
						curses.doupdate()
					else:
						self.download_manager()
						curses.doupdate()
			if mucous_config["mucous"]["Auto-Retry"] == "True":
				self.retry_timer.cancel()
				self.retry_timer = threading.Timer(30.0, self.retry_display)
				self.retry_timer.start()
			if mucous_config["mucous"]["Auto-Clear"] == "True":
				self.clear_timer.cancel()
				self.clear_timer = threading.Timer(30.0, self.clear_display)
				self.clear_timer.start()
		except Exception, e:
			self.Hlog("debug", "cb_transfer_state: " + str(e))
		
		
 	def cb_transfer_update(self, transfer):
		try:
			if transfer.is_upload:
				
				self.transfers["uploads"][(transfer.user, transfer.path)] =   [transfer.is_upload, transfer.user, transfer.path, int(transfer.state), transfer.error, transfer.filepos, transfer.filesize, transfer.rate, transfer.place]
				if self.display["mode"] == "transfer":
					if mucous_config["mucous"]["transbox"] == "split":
						self.upload_manager()
						curses.doupdate()
					else:
						if self.display["transfers"] == "uploads":
							self.upload_manager()
							curses.doupdate()
				self.upload_status(str(len(self.transfers["uploads"].keys())))
			else:
		
				self.transfers["downloads"][(transfer.user, transfer.path)] =  [transfer.is_upload, transfer.user, transfer.path, int(transfer.state), transfer.error, transfer.filepos, transfer.filesize, transfer.rate, transfer.place]
				if self.display["mode"] == "transfer":
					if mucous_config["mucous"]["transbox"] == "split":
						self.download_manager()
						curses.doupdate()
					else:
						if self.display["transfers"] == "uploads":
							pass
						else:
							self.download_manager()
							curses.doupdate()
				self.download_status(str(len(self.transfers["downloads"].keys())))
			if self.display["mode"] == "transfer":
				if self.Spl["show_menu"] == True:
					self.create_menu(self.Spl["current_menu"], self.Spl["menunumber"])
		except Exception, e:
			self.Hlog("debug", "cb_transfer_update: " + str(e))
		
	def cb_transfer_remove(self, transfer):
		try:
			user_path = transfer[1], transfer[2]
			if transfer[0]:
				del self.transfers["uploads"][user_path]
				if self.display["mode"] == "transfer":
					if mucous_config["mucous"]["transbox"] == "split":
						self.upload_manager()
						curses.doupdate()
					else:
						if self.display["transfers"] == "uploads":
							self.upload_manager()
							curses.doupdate()
				self.upload_status(str(len(self.transfers["uploads"].keys())))
						
			else:
				del self.transfers["downloads"][user_path]
				if self.display["mode"] == "transfer":
					if mucous_config["mucous"]["transbox"] == "split":
						self.download_manager()
						curses.doupdate()
					else:
						if self.display["transfers"] == "uploads":
							pass
						else:
							self.download_manager()
							curses.doupdate()
				self.download_status(str(len(self.transfers["downloads"].keys())))
		except Exception, e:
			self.Hlog("debug", "cb_transfer_remove: " + str(e))
			
	def cb_config_set(self, domain, key, value):
		try:
			if key in self.config[domain].keys():
				self.Hlog("status", "Modified <"+key+"> in <" +domain+"> to <"+value + ">")
				self.config[domain][key] = value
			else:
				if value == '' and domain is not "userinfo":
					self.Hlog("status", "Added <"+key+"> to <" +domain+">")
				else:
					self.Hlog("status", "Added <"+key+"> to <" +domain+"> and set to <"+value+">")
				self.config[domain][key] = value
			self.display_config_update(domain)
		except Exception, e:
			self.Hlog("debug", "cb_config_set: " + str(e))
			
	#Delete keys from self.config
	def cb_config_remove(self, domain, key):
		try:
			if key in self.config[domain].keys():
				self.Hlog("status", "Removed <"+key+"> from <" +domain+">")
				del self.config[domain][key]
			self.display_config_update(domain)
		except Exception, e:
			self.Hlog("debug", "cb_config_remove: " + str(e))
	
	#Copy config to self.config at connection
	def cb_config_state(self, config):
		try:
			self.config = config.copy()
			self.Hlog("status", "Server is at: "+self.config["server"]["host"]+":"+self.config["server"]["port"])
			self.buddylist()
			self.banlist()
			self.ignorelist()
		except Exception, e:
			self.Hlog("debug", "cb_config_state: " + str(e))
	# -- ^ Museek Messages ^

	def say_in_chat(self, mode, place, message):
		try:
			message = self.dencode_language(message)
			#message = self.encode_language(message)
			if place != None:
				if '\\n' in message:
					
					splited =  message.split('\\n')
					
					if len(splited) > 7:
						
						for i in range(8):
							if self.display["mode"] == "chat":
								
								self.send(messages.SayRoom(place, splited[i]))
							elif self.display["mode"] == "private":
								self.send(messages.PrivateMessage(1, place, splited[i]))
							
					else:
						for i in range(len(splited)):
							if self.display["mode"] == "chat":
								self.send(messages.SayRoom(place, splited[i]))
							elif self.display["mode"] == "private":
								self.send(messages.PrivateMessage(1, place, splited[i]))
					
	
				elif '\n' in message:
					splited =  message.split('\n')
					
					if len(splited) > 5:
						for i in range(5):
							if self.display["mode"] == "chat":
								self.send(messages.SayRoom(place, splited[i]))
							elif self.display["mode"] == "private":
								self.send(messages.PrivateMessage(1, place, splited[i]))
					else:
						for i in range(len(splited)):
							if self.display["mode"] == "chat":
								self.send(messages.SayRoom(place, splited[i]))
							elif self.display["mode"] == "private":
								self.send(messages.PrivateMessage(1, place, splited[i]))
				else:
					
					if self.display["mode"] == "chat":
						self.send(messages.SayRoom(place, message))
					elif self.display["mode"] == "private":
						self.send(messages.PrivateMessage(1, place, message))
		except Exception, e:
			self.Hlog("debug", "say_in_chat: " + str(e))
			
	def display_userinfo_log(self):
		try:
			itw = self.windows["text"]["infostats"]
			itw.erase()
			if self.usernames["info"] != None and self.display["mode"]=="info":
				userinfo = self.logs["info"][self.usernames["info"]]
				itw.addstr('Queue: '+str(userinfo[1][0]))
				itw.addstr('\nUploads: '+str(userinfo[1][1]))
				itw.addstr('\nSlots: '+str(userinfo[1][2]))

				if self.usernames["info"] in self.user["statistics"].keys():
					try:
						itw.addstr('\nSpeed: %sKB/s' % str(self.user["statistics"][self.usernames["info"]][0]/1024))
						itw.addstr('\nDown: '+str(self.user["statistics"][self.usernames["info"]][1]))
						itw.addstr('\nFiles: '+str(self.user["statistics"][self.usernames["info"]][2]))
						itw.addstr('\nDirs: '+str(self.user["statistics"][self.usernames["info"]][3]))
					except:
						pass
			itw.noutrefresh()
		except Exception, e:
			self.Hlog("debug", "display_userinfo_log: " + str(e))
				
	def userinfo_log(self, user, message, stats):
		try:
			if self.usernames["info"] == None:
				self.usernames["info"] = user
			if user not in self.logs["info"]:
				self.logs["info"][user] = []
			if user not in self.activeitems["info"]:
				self.activeitems["info"].append(user)
			self.logs["info"][user] = message, stats
			if user not in self.user["statistics"].keys():
				self.send(messages.PeerStats(user))
			if self.display["mode"] == 'info':
				self.info_mode()
		except Exception, e:
			self.Hlog("debug", "userinfo_log: " + str(e))
	
				
	def send_private_message(self, user, message):
		try:
			#Username is already utf-8ified
			lang = mucous_config["mucous"]["language"]
			if '\\n' in message:
				
				splited =  message.split('\\n')
				if len(splited) > 7:
					for i in range(8):
						self.send(messages.PrivateMessage(1, user, splited[i]))
				else:
					for i in range(len(splited)):
						self.send(messages.PrivateMessage(1, user, splited[i]))
				

			elif '\n' in message:
				splited =  message.split('\n')
				
				if len(splited) > 5:
					for i in range(5):
						self.send(messages.PrivateMessage(1, user, splited[i]))
				else:
					for i in range(len(splited)):
						self.send(messages.PrivateMessage(1, user, splited[i]))
			else:
				self.send(messages.PrivateMessage(1, user, self.decode_language(message) ) )
		
		 	if message == curses.ascii.ctrl("A")+"VERSION"+curses.ascii.ctrl("A"):
				message = "CTCP VERSION"
			if mucous_config["mucous"]["logging"] in (True, "True"):
				self.log_to_file("private", time.strftime("%d %b %Y %H:%M:%S"), user, "["+self.usernames["username"]+"]\t" +message )
			pmtype = "outgoing"
			self.private_log(pmtype, user, self.decode_language(message))
			
			if self.logs["alert"] == "New PM":
				self.alert_status("")
		except Exception ,e:
			self.Hlog("debug", "Send PM: " + str(e))
	

				
	def begin_search(self, ticket, query):
		try:
			if self.display["mode"] == "search":
				self.search_mode()
				if query not in self.logs["search"]:
					self.logs["search"][str(ticket)] = []
				
				self.search_log("sstatus", "Started search for: %s" % query, str(ticket), 0)
		except Exception, e:
			self.Hlog("debug", "begin_search: " + str(e))
			
	def Format_Search_Results(self, this_ticket):
		if self.display["mode"] == "search":
			try:
				tw = self.windows["text"]["search"]
				sorting_list = {}
				
				for numbers, results in self.data["search_results"].items():
					ticket, user, free, speed, queue, path, size, ftype, extended = results
					if this_ticket == ticket and  self.Spl["current_search"] == ticket and self.display["mode"] == "search":
						if ftype in ('MP3', 'OGG', 'mp3', 'ogg'):
							if extended != []:
								bitrate = extended[0]
								time = extended[1]
							else:
								bitrate = 0
								time = 0
						else: 
							bitrate = 0
							time = 0
	
						if time in ('', None):
							time = 0
						
							
						if self.Spl["search_order"] == "num":
							sorting_list[numbers] = 0
						elif self.Spl["search_order"] == "user":
							sorting_list[numbers] = user
						elif self.Spl["search_order"] == "free":
							sorting_list[numbers] =  free
						elif self.Spl["search_order"] == "speed":
							sorting_list[numbers] =  speed
						elif self.Spl["search_order"] == "que":
							sorting_list[numbers] =  queue
						elif self.Spl["search_order"] == "path":
							sorting_list[numbers] =  path
						elif self.Spl["search_order"] == "size":
							sorting_list[numbers] =  size
						elif self.Spl["search_order"] == "file":
							sorting_list[numbers] =  ftype
						elif self.Spl["search_order"] == "bitrate":
							sorting_list[numbers] = bitrate
						elif self.Spl["search_order"] == "time":
							sorting_list[numbers] = time
							
				
				#for n in sorting_list:
				slist = self.sortbyvalue (sorting_list)
				# Filter search while browsing
				if self.sfilter != None:
					s = []
					searchfilter = re.compile('.*' +str(self.sfilter) + '.*', re.DOTALL | re.I)
					for x,y  in slist:
						z =self.data["search_results"][x]
						for c in (z[1], z[5]) :
							if re.match(searchfilter, c): s.append(x); break
					
					self.sorted_search = s
				else:
					s = []
					for x,y  in slist:
						s.append(x)
					self.sorted_search = s
				if self.Spl["search_reverse"] == True:
					self.sorted_search.reverse()
				self.logs["search"][str(this_ticket)] = []
				
				clipped_list, self.scrolling["search"], self.windows["dimensions"]["search"]["start"] = self.scrollbox(self.sorted_search, self.scrolling["search"], self.windows["dimensions"]["search"]["height"])
				tw.erase()
				count = 0
				self.activeitems["search"] = clipped_list
				for number in clipped_list:
					#self.format_this_search(n)
					self.search_log("result1", number, str( self.data["search_results"][number][0] ), count )
					count += 1
				tw.noutrefresh()
			except Exception, e:
				self.Hlog("debug", "FSR: " + str(e))
	
	def byte_format(self, filesize):
		try:
			filesize =  int(filesize)
			if filesize >= 1073741824:
				filefrmt = str(filesize/1024/1024/1024) +"GB"
			elif filesize >= 1048576 and filesize <= 1073741824:
				filefrmt = str(filesize/1024/1024) +"MB"
			elif filesize < 1048576 and filesize >= 1024:
				filefrmt = str(filesize/1024) +"KB"
			elif filesize < 1024 and filesize > 0:
				filefrmt = str(filesize) +" B"	
			elif filesize == 0:
				filefrmt = '0'
			return filefrmt
		except Exception, e:
			self.Hlog("debug", "byte_format: " + str(e))
			
	def path_split(self, path):
		try:
			r = path.split('\\')
			directory = ''
			for s in r:
				if s is not r[-1]:
					directory += s+'\\'
				if s is r[-1]:
					file = s
			return directory, file
		except Exception, e:
			self.Hlog("debug", "path_split: " + str(e))
			
	def search_log(self, typer, result, ticket, count):
		if str(ticket) in self.logs["search"]:
			try:
				tw = self.windows["text"]["search"]
				if typer == "sstatus":
					#self.logs["search"][str(ticket)].append("%s" % result)
					#self.display_search_result(typer, -1, ticket)
					#if self.Spl["current_search"]==str(ticket) and 
					if self.display["mode"] == "search":
						#self.Hlog("debug", result)
						self.statswin.erase()
						self.statswin.addstr(self.decode_language(result), self.colors["cyan"])
						self.statswin.noutrefresh()
				elif typer == "result1":
					number = result
					ticket, user, free, speed, queue, path, size, ftype, extended = self.data["search_results"][number]
					size  = self.byte_format(size)

					if ftype in ('MP3', 'OGG', "mp3", "ogg"):
						if extended != []:
							bitrate = extended[0]
							length = int(extended[1])
							minutes = length/60
							seconds = str(length - (60 * minutes))
							
							if len(seconds) < 2:
								seconds = '0' + seconds
						else:
							bitrate = '0'
							minutes = '0'
							seconds = '00'
							length = 0
					else:
						bitrate = '0'
						minutes = '0'
						seconds = '00'
						length = 0
					if free:
						free = 'Y'
					else:
						free = 'N'
			
					
					if self.Spl["current_search"]==str(ticket) and self.display["mode"] == "search":
						#result = -1
						if count + self.windows["dimensions"]["search"]["start"]== self.scrolling["search"]:
							attr =  curses.A_REVERSE | curses.A_BOLD
							attrc = self.colors["cybg"]| curses.A_BOLD
							self.statswin.erase()

							self.statswin.addstr("F: ")
							atr = self.colors["cyan"] | curses.A_BOLD
							self.statswin.addstr(free, atr )
							self.statswin.addstr(" | Q:")
							self.statswin.addstr(str(queue), atr )
							self.statswin.addstr(" | ")
							self.statswin.addstr(user[:15], atr )
							self.statswin.addstr(" | ")
							self.statswin.addstr(str(speed/1024), atr )
							self.statswin.addstr("KB/s | Size: ")
							self.statswin.addstr(str(size), atr )
							if bitrate != '0' and length != 0:
								self.statswin.addstr(" | ")
								self.statswin.addstr(str(bitrate), atr )
								self.statswin.addstr("KHz | Len: ")
								self.statswin.addstr(str(minutes), atr )
								self.statswin.addstr(":")
								self.statswin.addstr(str(seconds), atr )
							self.statswin.noutrefresh()
						else:
							attr = curses.A_NORMAL
							attrc = self.colors["cyan"]
						try:
							sn = len(str(number))
							sr = len(str(self.search_number))
							if sn < sr :
								nub = (" " * (sr - sn)) + str(number)
							else:
								nub = str(number)
							
							if len(nub+"| ")+len(path) >= self.w-2:
								pos = self.w-2-len(str(nub)+"| ")-len(path)
								#pp = path[-pos:]
								directory, file = self.path_split(path)
								if abs(pos) > len(directory):
									a = abs(pos) - len(directory)
									file = file[:-a]
									directory = ''
								else:
									directory = directory[-pos:]
									
								extra = ''
							else:
								if len(str(nub)+"| "+ path) < self.w-2:
									
									directory, file = self.path_split(path)
									extra = " " * (self.w-2-len(str(nub)+"| "+ path))
								else:
									directory, file = self.path_split(path)
									extra = ''
							tw.addstr(nub, attrc)
							tw.addstr("| "+directory, attr)
							tw.addstr(file, attrc)
							tw.addstr(extra, attr)
						except:
							pass

			except Exception, e:
				self.Hlog("debug", "Search Log: " + str(e))
				
	def display_search_result(self, typer, result, ticket):
		try:
			lang = mucous_config["mucous"]["language"]
			if self.Spl["current_search"]==str(ticket) and self.display["mode"] == "search":
				tw = self.windows["text"]["search"]
				search = self.logs["search"][ str(ticket)][result]
				try:
					if typer =="result1":
						tw.addstr(self.decode_language(search[0]))
						tw.addstr(self.decode_language(search[1]), self.colors["blafgcyabg"] | curses.A_BOLD| curses.A_REVERSE)
						z = self.w-2-len(self.decode_language( search[result][1] ))
						space = ""
						while z >0:
							z -= 1
							space +=" "
						tw.addstr(space, self.colors["blafgcyabg"] |curses.A_REVERSE|curses.A_BOLD)
					elif typer =="sstatus":
						tw.addstr(self.decode_language(search))
					
				except Exception, e:
					pass
		except Exception, e:
			self.Hlog("debug", "display_search_result: " + str(e))
			
	def user_shares_cd(self, line):
		try:
			if self.Spl["dir_browse"]== '' or line[0:1] == '\\' or line[1:2] == ":":
				if self.usernames["browse"] in self.data["browse_results"].keys():
					if line[0:1] == '\\':
						if line in self.data["browse_results"][self.usernames["browse"]].keys():
							self.Spl["dir_browse"] = line
						else:
							self.Hlog("status", "No such directory: %s user:" % (line[1:],  self.usernames["browse"]))
					if line[1:2] == ":":
						if line in self.data["browse_results"][self.usernames["browse"]].keys():
							self.Spl["dir_browse"] = line
						else:
							self.Hlog("status", "No such directory: %s user:" % (line,  self.usernames["browse"]))
					else:
						if line in self.data["browse_results"][self.usernames["browse"]].keys():
							self.Spl["dir_browse"] = line
						else:
							self.Hlog("status", "No such directory: %s user:" % (line,  self.usernames["browse"]))
				
			elif line =='..':
				z = self.cd_dot_dot()
				if z != 0:
					self.Spl["dir_browse"] = z
				else:
					self.Hlog("status", "No parent directory, User: " +  self.usernames["browse"])
			else:
				if self.Spl["dir_browse"] + '\\'+line in self.data["browse_results"][self.usernames["browse"]].keys():
					self.Spl["dir_browse"] += '\\'+line
				else:
					self.Hlog("status", "No such directory: %sUser: " % (line, self.usernames["browse"]) )
					
			if self.usernames["browse"] == None:
				self.set_edit_title("Choose a user to Browse Shares")
			else:
				s = "Browse "+self.usernames["browse"]+"'s files in "
				ls = len(s)
				self.set_edit_title(s  + self.Spl["dir_browse"][:self.w-ls-4] + " ")
		except Exception, e:
			self.Hlog("debug", "user_shares_cd: " + str(e))
			
	def cd_dot_dot(self):
		try:
			splitit = self.Spl["dir_browse"]
			splitit = splitit.split("\\")
			s = len(splitit)
			z=''
			for r in range(s-1):
				if r == 0:
					z += splitit[r]
				else:
					z += "\\"+splitit[r]
					
			if z in self.data["browse_results"][self.usernames["browse"]].keys():
				return z
			else:
				return 0
		except Exception, e:
			self.Hlog("debug", "cd_dot_dot: " + str(e))
			
	#Add new/replace old keys to self.config
	def mod_config(self, changetype, username, value):
		try:
			username = self.decode_language(username)
			if changetype == "buddy":
				if username not in self.config["buddies"].keys():
					self.send(messages.ConfigSet("buddies", username, "buddied by mucous"))
					
			elif changetype == "unbuddy":
				if username in self.config["buddies"].keys():
					self.send(messages.ConfigRemove("buddies", username))
				else:
					self.Hlog("status", "User not in buddy list: %s" % username)
			elif changetype == "ban":
				if username not in self.config["banned"].keys():
					self.send(messages.ConfigSet("banned", username, "banned by mucous"))
			elif changetype == "unban":
				if username in self.config["banned"].keys():
					self.send(messages.ConfigRemove("banned", username))
				else:
					self.Hlog("status", "User not in ban list: %s" % username)
			elif changetype == "ignore":
				if username not in self.config["ignored"].keys():
					self.send(messages.ConfigSet("ignored", username, ""))
					self.Hlog("status", "Ignored: %s" % username)
			elif changetype == "unignore":
				if username in self.config["ignored"].keys():
					self.send(messages.ConfigRemove("ignored", username))
				else:
					self.Hlog("status", "User not in ignore list: %s" % username)
			elif changetype == "autojoin":
				room = username
				if room not in self.config["autojoin"].keys():
					self.send(messages.ConfigSet("autojoin", room, ""))
				else:
					self.send(messages.ConfigRemove("autojoin", room))
	
			elif changetype == "unautojoin":
				room = username
				if room in self.config["autojoin"].keys():
					self.send(messages.ConfigRemove("autojoin", room))
				else:
					self.send(messages.ConfigSet("autojoin", room, ""))
			elif changetype == "trust":
				if username not in self.config["trusted"].keys():
					self.send(messages.ConfigSet("trusted", username,  ""))
			elif changetype == "distrust":
				if username in self.config["trusted"].keys():
					self.send(messages.ConfigRemove("trusted", username))
		except Exception, e:
			self.Hlog("debug", "mod_config: " + str(e))
			
	def display_config_update(self, domain):
		try:
			if domain in ("buddies", "banned", "ignored",  "autojoin", "trusted"):
				if self.display["mode"] == "lists":
					if self.display["list"] == "buddies" and domain == "buddies":
						self.buddy_mode()
					elif self.display["list"] == "banned"  and domain == "banned":
						self.ban_mode()
					elif self.display["list"] == "ignored" and domain == "ignored":
						self.ignore_mode()
				elif self.display["mode"] == "chat" :
					self.roomstatusbox()
					
				if self.Spl["show_menu"] == True:
					self.draw_menu(self.Spl["current_menu"])
					
			elif domain in ("interests.like", "interests.hate"):
				if self.display["mode"] == "lists" and self.display["list"] == "interests":
					self.interests_mode()
			elif domain in ("clients", "transfers", "server", "interfaces", "interfaces.bind", "userinfo") and self.display["mode"] == "setup":
				self.setup_mode()
			elif domain in ("encoding.users", "encoding" ) and self.display["mode"] == "browse":
				self.browse_mode()
			elif domain in ("encoding.users" ) and self.display["mode"] == "private":	
				self.private_mode()
			elif domain in ("encoding.rooms" ) and self.display["mode"] == "chat":
				self.chat_mode()
		except Exception, e:
			self.Hlog("debug", "display_config_update: " + str(e))
			
	def download_path_file(self, dtype, number):
		try:
			number = int(number)
			if self.display["mode"]=="search":
				if self.data["search_results"] != {}:
					if self.data["search_results"][number] != None:
						user = self.data["search_results"][number][1]
						path = self.data["search_results"][number][5]
					else:
						self.Hlog("status", "No such file")
				else:
					self.Hlog("status", "You need to search, first ;)")
					
			elif self.display["mode"]=="browse":
				if self.display["browse"] == "files":
					w = self.windows["dimensions"]["browse"]
					if dtype == "dir":
						path = self.Spl["dir_browse"]
						#self.files[self.Sup+w["start"]
						user = self.usernames["browse"]
						#self.send(messages.GetFolderContents(user, directory))
					elif dtype == "file":
						user = self.usernames["browse"]
						path = self.Spl["dir_browse"]+"\\"+self.files[number]
				elif self.display["browse"] == "directories":
					w = self.windows["dimensions"]["directories"]
					if dtype == "dir":
						path = self.Spl["dir_browse"]
						user = self.usernames["browse"]
						#self.send(messages.GetFolderContents(user, directory))
			if user != None and path != None:
				if dtype == "file":
					self.send(messages.DownloadFile(user, path))
					self.Hlog("status", "Try to Download file: %s from %s" % (path, user))
				elif dtype == "dir":
					r = path.split('\\')
					directory = ''
					for s in r:
						if s != r[-1]:
							directory += s+'\\'
					self.send(messages.GetFolderContents(user, directory))
					self.Hlog("status", "Try to Download directory: %s from %s" % (directory, user))
				
				if mucous_config["mucous"]["autobuddy"]  == "yes":
					if user not in self.config["buddies"].keys():
						self.send(messages.ConfigSet("buddies", user, "buddied by mucous"))
						self.Hlog("status", "Auto-Buddied: %s" % user)
				
		except Exception, e:
			self.Hlog("debug", "DPF: " + str(e))
			
	def upload_manager(self):
		try: 
			if self.display["mode"] == "transfer":
	
				if self.display["transfer_sort"] == 'active':
					status_list = (1, 2, 3, 4, 5, 6, 8, 9,)
				elif self.display["transfer_sort"] == 'all':
					status_list = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
				elif self.display["transfer_sort"] == 'finished':
					status_list = (0, 99999)
				elif self.display["transfer_sort"] == 'queued':
					status_list = (7, 99999)
				elif self.display["transfer_sort"] == 'failed':
					status_list = (  10, 11, 12, 13)
				uploadlist = []
				num = 0
				self.data["uploads"] = {}
				userlist = self.transfers["uploads"].keys()
				userlist.sort()
				
				self.sorted_transfer_list["uploads"] = userlist
				for user_path in userlist:
					num += 1
					item = self.transfer_item("uploads", user_path, num, status_list)
					if item != None:
						uploadlist.append(item)
					
				
				if mucous_config["mucous"]["transbox"] == "split":
					self.Win_Height =self.h/2-5
				else:
					self.Win_Height =self.h -8
				clipped_list, self.scrolling["uploads"], start = self.scrollbox(uploadlist, self.scrolling["uploads"], self.Win_Height)
				s = self.scrolling["uploads"]
				self.windows["dimensions"]["uploads"]["start"] = start
				
				try:
					if self.display["transfers"] == "uploads" or mucous_config["mucous"]["transbox"] == "split":
						
						if self.display["t_speed"] == True:
							swting = "Numb|Speed| Size | Username |  Status  |  Path"
						else:
							swting = "Numb|Perc | Size | Username |  Status  |  Path"
						spaces = self.w-2-len(swting)
						while spaces > 0:
							spaces -= 1
							swting += " "
						self.upwin.erase()
						if self.display["transfers"] == "uploads":
							self.upwin.addstr(swting, self.colors["green"] | curses.A_REVERSE)
						else:
							self.upwin.addstr(swting, self.colors["blafgcyabg"] )
				except Exception, e:
					self.Hlog("debug", "Upload Item: " + str(e))
					
				try:
					if clipped_list != []:
						count = 0
						for transfers in clipped_list:
							
							if transfers[1] == 1:
								attr = self.colors["green"]
							elif transfers[1] == 0:
								attr = self.colors["magenta"]
							elif transfers[1] in (10, 11, 12, 13, 14):
								attr = self.colors["red"]
							else:
								attr = curses.color_pair(0)
							if count + start == s:
								attr = curses.A_REVERSE | curses.A_BOLD
							try:
								self.upwin.addstr(self.decode_language(transfers[0]), attr)
							except:
								pass
							count += 1
					else:
						self.upwin.addstr("\nNo transfers in this category, hit INSERT to switch to another.")
						
				except:
					pass
			self.upwin.noutrefresh()
		except Exception, e:
			self.Hlog("debug", "Upload Manager: " + str(e))
			
	def transfer_item(self, tran, user_path, num, status_list):
		try:
			if tran == 'downloads':
				vals = self.transfers["downloads"][user_path]
			else:
				vals = self.transfers["uploads"][user_path]
				
			transfer, user, path, status, error, filepos, filesize, rate, place = vals[0], vals[1], vals[2], vals[3], vals[4], vals[5], vals[6], vals[7], vals[8]
			
			username = {}
			username[user] = path
			if tran == 'downloads':
				self.data["downloads"][num] = username
			elif tran == "uploads":
				self.data["uploads"][num] = username
	
			if status in status_list:
	
				if filesize != 0:
					percent = str(100 * filepos / filesize)
					if len(percent) < 2:
						percent = '  ' + percent
					if len(percent) < 3:
						percent = ' ' + percent
					filefrmt  = self.byte_format(filesize)
					if len(filefrmt) < 6:
						filefrmt = ' ' * (6-len(filefrmt)) + filefrmt

				else: 
					percent = '  0'
					filefrmt = '0 Bits'
	
				ae = str(num)
				while len(ae) < 4:
					ae = ' '+ae
				mo = {}
				while len(user[:10]) < 10:
					user += " "
				cut_status = self.states[status][:10]
				if len(cut_status) < 10:
					cut_status += (10-len(cut_status)) *" "
				
				if tran == "downloads":
					if place == 4294967295:
						place = ""
					else:
						place = str(place)
					if len(place) < 4:
						cut_place = (" " * (4 -(len(place) )) )+ place
					else:
						cut_place = place[:3] + "~"

				if self.display["t_speed"] == True:
					ratefrmt  = self.byte_format(rate)
					if len(ratefrmt) < 5:
						ratefrmt += ' '* (5-len(ratefrmt))
					
					
					#Speed
					if tran == "downloads":
						ea = "%s|%s|%s|%s|%s|%s|%s" % (str(ae), ratefrmt[:5], filefrmt , user[:10], cut_status, cut_place, path[-self.w+45+2:])
					else:
						ea = "%s|%s|%s|%s|%s|%s" % (str(ae), ratefrmt[:5], filefrmt , user[:10], cut_status,  path[-self.w+40+2:])
				else:
					# Percent
					if tran == "downloads":
						ea = "%s| %s%%|%s|%s|%s|%s|%s" % (str(ae), percent[:5] , filefrmt , user[:10], cut_status, cut_place, path[-self.w+45+2:])
					else:
						ea = "%s| %s%%|%s|%s|%s|%s" % (str(ae), percent[:5] , filefrmt , user[:10], cut_status,  path[-self.w+40+2:])
	
				if len(ea) < self.w-2:
					ea += " " * (self.w -2- len(ea))
				mo = ea, status
				return mo
		except Exception, e:
			self.Hlog("debug", "Transfer Item: "+tran +": " + str(e))
			
	def download_manager(self):
		try:
			if self.display["mode"] == "transfer":
				w = self.windows["dimensions"]["downloads"]
				if self.display["transfer_sort"] == 'active':
					status_list = (1, 2, 3, 4, 5, 6, 8, 9,)
				elif self.display["transfer_sort"] == 'all':
					status_list = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,  14)
				elif self.display["transfer_sort"] == 'finished':
					status_list = (0, 99999)
				elif self.display["transfer_sort"] == 'queued':
					status_list = (7, 99999)
				elif self.display["transfer_sort"] == 'failed':
					status_list = (  10, 11, 12, 13)
				downloadlist = []
				num = 0
				self.data["downloads"] = {}
				userlist = self.transfers["downloads"].keys()
				userlist.sort()
				self.sorted_transfer_list["downloads"] = userlist
				for user_path in userlist:
					num += 1
					item = self.transfer_item("downloads", user_path, num, status_list)
					if item != None:
						downloadlist.append(item)
				#self.Hlog("debug", downloadlist)
				if self.display["transfers"] == "downloads":
					self.Win_Height =self.windows["dimensions"]["downloads"]["height"]-1
					
				clipped_list, self.scrolling["downloads"], start = self.scrollbox(downloadlist, self.scrolling["downloads"], self.Win_Height)
				s = self.scrolling["downloads"]
# 				clipped_list, self.Sup, start = self.scrollbox(downloadlist, self.Sup, self.Win_Height)
				self.windows["dimensions"]["downloads"]["start"] = start
				if self.display["transfers"] == "downloads" or mucous_config["mucous"]["transbox"] == "split":
					
					try:
						if self.display["t_speed"] == True:
							swting = "Numb|Speed| Size | Username |  Status  | Que|  Path"
						else:
							swting = "Numb|Perc | Size | Username |  Status  | Que|  Path"
							#4294967295
						spaces = self.w-2-len(swting)
						while spaces > 0:
							spaces -= 1
							swting += " "
						self.downwin.erase()
						if self.display["transfers"] == "downloads":
							self.downwin.addstr(swting, self.colors["green"] | curses.A_REVERSE)
						else:
							self.downwin.addstr(swting, self.colors["blafgcyabg"] )
					except:
						pass
					try:
						
						if clipped_list != []:
							count = 0
							for transfers in clipped_list:
								if transfers == None:
									continue
								
								if transfers[1] == 1:
									attr = self.colors["green"]
								elif transfers[1] == 0:
									attr = self.colors["magenta"]
								elif transfers[1] in (10, 11, 12, 13, 14):
									attr = self.colors["red"]
								else:
									attr = curses.color_pair(0)
								if count + start == s:
									attr = curses.A_REVERSE | curses.A_BOLD
								try:
									self.downwin.addstr(self.encode_language(transfers[0])[:w["width"]], attr)
									
								except:
									pass
								count += 1
						else:
						
							self.downwin.addstr("\nNo transfers in this category, hit INSERT to switch to another.")
					except Exception, e:
						self.Hlog("debug", "Download log: " + str(e))
					self.downwin.noutrefresh()

		except Exception, e:
			self.Hlog("debug", "Download Manager: " + str(e))
		
		# Change Room Title in edit window
		
	def scrollbox(self, current_list, hightlight_position, height):
		try:
			length =len(current_list)
			if hightlight_position < 0:
				hightlight_position = 0
			elif hightlight_position > length -1:
				hightlight_position = length-1
			
			start = hightlight_position-height/2
			
			if start  < 0:
				to = hightlight_position + (height-height/2)-start
				start  = 0
				
			else:
				to = hightlight_position + (height-height/2)
				
			if to >= length:
				start = abs(to - length - start)
				to =length
				
			if length < height:
				start =0
			#self.Hlog("debug", "s%se%su%s"%(start,to,hightlight_position) )
			if current_list[start:to] != [None]:
				clipped_list = current_list[start:to]
			else:
				clipped_list = []
			return clipped_list, hightlight_position, start
		except Exception, e:
			self.Hlog("debug", "scrollbox: " + str(e))
			
	def show_nick_list(self, room):
		try:
			self.colorednicks = {}
			
			if self.data["rooms"][room] != None:
				
				self.colorednicks[room] = []
				alphanicks=[]
				alphanicks = self.data["rooms"][room]
				alphanicks.sort()
				self.Hlog("status", "Users in " + room)
				for username in alphanicks:
					if username == self.usernames["username"]:
						self.colorednicks[room].append([username, "Me"])
					elif username not in self.data["rooms"][room]:
						self.colorednicks[room].append([username, "Left"])
					elif username in self.config["banned"]:
						self.colorednicks[room].append([username, "Banned"])
					elif username in self.config["buddies"]:
						self.colorednicks[room].append([username, "Buddies" ])
					else:
						self.colorednicks[room].append([username, "Normal"])
					self.colorednicks[room].append([" ["+str(self.user["statistics"][username])+"]", "Normal"])
					line = username + (" " * (30 - len(username)) ) + "Files: " + str(self.user["statistics"][username][2])
					
					#line = "%s": [%s] Files" % (username,  )
					self.Hlog("status", line)
					if username is not alphanicks[-1]:
						self.colorednicks[room].append([", ", "NotLast"])
				mtype = "List"
				user = "!!!!"
				msg = self.colorednicks[room]
				
				#self.say("List", room, '!!!!', msg)
		except Exception, e:
			self.Hlog("debug", "show_nick_list: " + str(e))
			
			
	def close_userinfo(self, user):
		try:
			if user in self.activeitems["info"]:
				self.activeitems["info"].remove(user)
			if self.activeitems["info"] != []:
				for users in self.activeitems["info"]:
					self.usernames["info"] = users
					break
			else:
				self.usernames["info"] = None
			if user in self.alert["INFO"]:
				self.alert["INFO"].remove(user)
			if self.display["mode"] == 'info':
				self.info_mode()
		except Exception, e:
			self.Hlog("debug", "close_userinfo: " + str(e))
			
	def close_private_chat(self, user):
		try:
			if user in self.logs["private"].keys():
				del self.logs["private"][user]
			if self.logs["private"].keys() != []:
				for users in self.logs["private"].keys():
					self.usernames["private"] = users
					break
			else:
				self.usernames["private"] = None
			if user in self.alert["PRIVATE"]:
				self.alert["PRIVATE"].remove(user)
			if self.display["mode"] == 'private':
				self.private_mode()
		except Exception, e:
			self.Hlog("debug", "close_private_chat: %s" % str(e))
					
	def close_search(self, ticket):
		try:
			if ticket in self.data["search_tickets"].keys():
				del self.data["search_tickets"][ticket]
			if ticket in self.logs["search"]:
				del self.logs["search"][ticket]
			if self.data["search_tickets"].keys() != []:
				self.Spl["current_search"] = self.data["search_tickets"].keys()[0]
			else:
				self.Spl["current_search"] = "default__"
				
			if ticket in self.alert["SEARCH"]:
				self.alert["SEARCH"].remove(ticket)
			self.search_mode()
		except Exception, e:
			self.Hlog("debug", "close_search: " + str(e))
			
	def close_browse(self, user):
		try:
			if user in self.activeitems["browse"]:
				self.activeitems["browse"].remove(user)
				self.scrolling["browsedir"] = 0
			if user in self.logs["browse"]:
				del self.logs["browse"][user]
			if self.activeitems["browse"] != []:
				if self.usernames["browse"] == user:
					self.usernames["browse"] = self.activeitems["browse"][0]
			else:
				self.usernames["browse"] = "default__"
			if user in self.alert["BROWSE"] and user != "__default":
				self.alert["BROWSE"].remove(user)
			self.browse_mode()
		except Exception, e:
			self.Hlog("debug", "close_browse: " + str(e))
			
	def clear_searchs(self):
		try:
			self.data["search_tickets"] = {}
			self.logs["search"] = {}
			self.search_number = 0
			self.Spl["current_search"]="default__"
			self.search_mode()
		except Exception, e:
			self.Hlog("debug", "clear_searchs: " + str(e))
	
		
	# Rebuild Buddylist from self.config
 	def buddylist(self):
		try:
			if "buddies" in self.config.keys():
				self.logs["buddies"] = []
				alpha_list = SortedDict()
				for keyname, keyvalue in self.config["buddies"].items():
					alpha_list[keyname] = keyvalue
				
				for keyname, keyvalue in alpha_list.items():
					banned = None
					ignored = None
					for bdomain, bkey in self.config.items()[:]:
						if bdomain == "banned":
							for bkeyname, bkeyvalue in bkey.items():
								if keyname == bkeyname:
									banned = 1
						elif bdomain == "ignored":
							for bkeyname, bkeyvalue in bkey.items():
								if keyname == bkeyname:
									ignored = 1
					if banned != None:
						self.buddy_log("Banned",  keyname, keyvalue)
					elif ignored != None:
						self.buddy_log("Ignored",  keyname, keyvalue)
					else:
						self.buddy_log("Normal",  keyname, keyvalue)
		except Exception, e:
			self.Hlog("debug", "buddylist: " + str(e))
			
	# Rebuild Banlist from self.config
 	def banlist(self):
		try:
			if "banned" in self.config.keys():
				self.logs["banned"] = []
				alpha_list = SortedDict()
				for keyname, keyvalue in self.config["banned"].items():
					alpha_list[keyname] = keyvalue
				
				for keyname, keyvalue in alpha_list.items():
					buddies = None
					ignored = None
					for bdomain, bkey in self.config.items()[:]:
						if bdomain == "buddies":
							for bkeyname, bkeyvalue in bkey.items():
								if keyname == bkeyname:
									buddies = 1
						elif bdomain == "ignored":
							for bkeyname, bkeyvalue in bkey.items():
								if keyname == bkeyname:
									ignored = 1
					if buddies != None:
						self.ban_log("Buddies", keyname, keyvalue)
					elif ignored != None:
						self.ban_log("Ignored",  keyname, keyvalue)
					else:
						self.ban_log("Normal",  keyname, keyvalue)
		except Exception, e:
			self.Hlog("debug", "banlist: " + str(e))
	# Rebuild Ignorelist from self.config
	def ignorelist(self):
		try:
			if self.config !=  {}:
				if "ignored" in self.config.keys():
					self.logs["ignored"] = []
					alpha_list = SortedDict()
					for keyname, keyvalue in self.config["ignored"].items():
						alpha_list[keyname] = keyvalue
					
					for keyname, keyvalue in alpha_list.items():
						banned = None
						buddies = None
						for bdomain, bkey in self.config.items()[:]:
							if bdomain == "buddies":
								for bkeyname, bkeyvalue in bkey.items():
									if keyname == bkeyname:
										buddies = 1
							elif bdomain == "banned":
								for bkeyname, bkeyvalue in bkey.items():
									if keyname == bkeyname:
										banned = 1	
						if buddies != None:
							self.ignore_log("Buddies",  keyname, keyvalue)
						elif banned != None:
							self.ignore_log("Banned",  keyname, keyvalue)
						else:
							self.ignore_log("Normal",  keyname, keyvalue)
		except Exception, e:
			self.Hlog("debug", "ignorelist: " + str(e))
					
	def completion_list(self):
		try:
			usercompletionlist = {}
			if "buddies" in self.config:
				for users in self.config["buddies"].keys():
					usercompletionlist[self.decode_language(users)] = 0
			if "banned" in self.config:
				for users in self.config["banned"].keys():
					usercompletionlist[self.decode_language(users)] = 0
			if "ignored" in self.config:
				for users in self.config["ignored"].keys():
					usercompletionlist[self.decode_language(users)] = 0
			if self.data["rooms"].keys() != []:
				for room in self.data["rooms"].keys():
					for users in  self.data["rooms"][room]:
						usercompletionlist[self.decode_language(users)] = 0
			if self.transfers["uploads"].keys() != []:
				for userpath, values in self.transfers["uploads"].items():
					usercompletionlist[self.decode_language(values[1])] = 0
			if self.transfers["downloads"].keys() != []:
				for userpath, values in self.transfers["downloads"].items():
					usercompletionlist[self.decode_language(values[1])] = 0
			if self.display["mode"] == "browse":
				if self.usernames["browse"] != None:
					if self.usernames["browse"] in self.data["browse_results"]:
						for dirs in self.data["browse_results"][self.usernames["browse"]].keys():
							usercompletionlist[self.decode_language(dirs)] = 0
			for values in self.commandlist:
				usercompletionlist[self.decode_language(values)] = 0
				
			if usercompletionlist.keys() != []:
				self.logs["tab_completion"] = usercompletionlist.keys()
				self.logs["tab_completion"].sort()
			else:
				self.logs["tab_completion"]=[]
		except Exception, e:
			self.Hlog("debug", "completion_list: " + str(e))

	def scrolltext(self, line):
		try:
			key = self.key
			color_added = None
			scrolltext = None
			if self.display["mode"] in ( "transfer", "search", "help", "debug", "info", "private", "lists", "roomlist", "chat", "browse"):
				if self.display["mode"] == "chat":
					if self.display["chat"] == "chatroom":
						scrolltext = "chatroom"
						
						w = self.windows["dimensions"]["chat"]
						if self.Spl["room"] != None:
							selected_log = self.logs["rooms"][self.Spl["room"]]
						else: 
							self.drawchatwindow()
							self.windows["text"]["chat"].refresh()
							return
					elif self.display["chat"] == "roombox":
						scrolltext = "roombox"
						w = self.windows["dimensions"]["roombox"]
						selected_log = self.logs["roombox"][self.Spl["room"]]
					elif self.display["chat"] == "roomstatus":
						scrolltext = "roomstatus"
						w = self.windows["dimensions"]["roomstatus"]
						selected_log = self.logs["status"][self.Spl["room"]]
					scrolldiff = w["height"]
				elif self.display["mode"] == "browse":
					if self.display["browse"] == "directories":
						scrolltext = "browsedir"
					else:
						scrolltext = "browsefile"
					scrolldiff = self.windows["dimensions"]["browse"]["height"]
				elif self.display["mode"] in ("debug", "help"):
					scrolltext = self.display["mode"]
					scrolldiff = self.windows["dimensions"]["help"]["height"]
				elif self.display["mode"] in ("info", "private"):
					scrolltext = self.display["mode"]
					scrolldiff = self.windows["dimensions"][self.display["mode"]]["height"]
				elif self.display["mode"] == "search":
					scrolltext = self.display["mode"]
					scrolldiff = self.windows["dimensions"]["search"]["height"]
				elif self.display["mode"] == "lists":
					if self.display["list"] == "buddies":
						scrolltext = self.display["list"]
						scrolldiff = self.windows["dimensions"][self.display["list"]]["height"]
						selected_log = self.logs["buddies"]
					elif self.display["list"] == "banned":
						scrolltext = self.display["list"]
						scrolldiff = self.windows["dimensions"][self.display["list"]]["height"]
						selected_log = self.logs["banned"]
					elif self.display["list"] == "ignored":
						scrolltext = self.display["list"]
						scrolldiff = self.windows["dimensions"][self.display["list"]]["height"]
						selected_log = self.logs["ignored"]
					elif self.display["list"] == "interests":
						scrolltext = self.display["interests"]
						scrolldiff = self.windows["dimensions"][self.display["list"]]["height"]
						selected_log = self.logs[self.display["interests"]]
				elif self.display["mode"] == "roomlist":
					scrolltext = "roomlist"
					scrolldiff = self.windows["dimensions"][ self.display["mode"] ]["height"]
				elif self.display["mode"] == "transfer":
					if mucous_config["mucous"]["transbox"] == "split":
						if self.display["transfers"] == "uploads":
							scrolltext = "uploads"
							scrolldiff = self.windows["dimensions"]["uploads"]["height"]-1
						elif self.display["transfers"] == "downloads":
							scrolltext = "downloads"
							scrolldiff = self.windows["dimensions"]["downloads"]["height"]-1
					else:
						scrolldiff = self.h-7
						
				if key == "KEY_UP":	
					self.scrolling[scrolltext] -= 1
				elif key == "KEY_DOWN":
					self.scrolling[scrolltext] += 1
				elif key == "KEY_PPAGE":
					self.scrolling[scrolltext] -= scrolldiff + 1
					# upload or download window height - one line for heading
				elif key == "KEY_NPAGE":
					self.scrolling[scrolltext] += scrolldiff + 1
				if self.scrolling[scrolltext] < 0:
					self.scrolling[scrolltext] = 0
				
				if self.display["mode"] == "chat":
					if self.display["chat"]  == "chatroom":
						#start -= 1
						self.chat_display()
					elif self.display["chat"]  == "roombox":
						self.chat_roombox_display()
				elif self.display["mode"] == "browse":	
					
					self.browse_display()
					curses.doupdate()
				elif self.display["mode"] == "info":
					self.info_display()
				elif self.display["mode"] == "private":
					self.private_display()
				elif self.display["mode"] == "search":
					self.search_display()
				elif self.display["mode"] == "lists":
					if self.display["list"] != "interests":
						self.display_lists()
					else:
						self.like_draw()
						self.hate_draw()
						self.recommendations_draw()
						self.similar_draw()
					return
				elif self.display["mode"] == "roomlist":
					self.display_room_list_mode()
					return self.sizedrooms[self.scrolling["roomlist"]]
				elif self.display["mode"] in ("help", "debug"):
					self.help_display()
				elif self.display["mode"] == "transfer":
					if self.display["transfers"] == "uploads":
						self.upload_manager()
						curses.doupdate()
					elif self.display["transfers"] == "downloads":
						self.download_manager()
						curses.doupdate()
				
			self.key = None
		except Exception, e:
			self.Hlog("debug", "scrolltext: " + str(e))
	# ---v  KEYS v
	
	# Tab completion
	def tabbing(self, line, word, firsttab, listline):
		try:
			self.firsttab = firsttab
			self.listline = listline
			if self.firsttab ==0:
				self.completion_list()
			if self.logs["tab_completion"] !=[]:
				
				if self.display["mode"] in ("roomlist", "chat", "lists", "info", "private", "browse", "transfer", "setup", "search", "help", "debug", "status"):
					if self.firsttab ==0:
						self.keepit=[]
						if self.display["mode"] == "roomlist":
							for words in self.data["roomlist"].keys():
								if words.startswith(word[0:1]):
									self.keepit.append(words)
						else:
							for words in self.logs["tab_completion"]:
								if word[0:1] == '/':
									if len(word) > 2:
										if words.startswith(word[0:3]):
											self.keepit.append(words)
									else:
										if words.startswith(word[0:2]):
											self.keepit.append(words)
									# Be more picky with /commands
								else:
									if words.startswith(word[0:1]):
										self.keepit.append(words)
						self.keepit.sort()
		
					self.firsttab +=1
					if self.listline == []:
						self.listline = line.split(" ")
					split_line = self.listline
					
					for words in self.keepit:
						if len(split_line[-1]) > 1:
							x = len(split_line[-1])
						else:
							x = 1
						# WOO HOO
						# The above x fixes the previously broken tabbing
						if words.startswith(split_line[-1][0:x]) and split_line[-1] != ' ' and split_line[-1] != '':
							self.listline = []
							r = len(split_line)
							if r >1:
								
								for s in split_line:
									if s is not split_line[-1]:
										self.listline.append(s)
									elif s is split_line[-1]:
										if s != words:
											self.listline.append(words)
											break
										elif s == words:
											if self.firsttab ==0:
												if words.startswith(split_line[-1]):
													self.listline.append(self.keepit[0])
													break
											else:
												self.keepit.append(self.keepit[0])
												del self.keepit[0]
												self.listline.append(self.keepit[0])
												break
								break
							else:
								s =  split_line[0]
								if s != words:
									if words.startswith(s):
										self.listline.append(words)
										break
								elif s == words:
									if self.firsttab ==0:
										if words.startswith(split_line[-1]):
											self.listline.append(self.keepit[0])
											break
									else:
										
										self.keepit.append(self.keepit[0])
										del self.keepit[0]
										self.listline.append(self.keepit[0])
										break
		
		
					return self.listline, self.firsttab
			return self.listline, self.firsttab
		except Exception, e:
			self.Hlog("debug", "tabbing: " + str(e))
							
	def history(self, key, line, history_count):
		try:
			self.Spl["history_count"] = history_count
			if line not in self.logs["history"] and line !='':
				if line.isspace():
					pass
				else:
					self.logs["history"].append(line)
			if len(self.logs["history"]) == 0:
				return line, self.Spl["history_count"]
			if key == "KEY_UP":
				self.Spl["history_count"] += 1
			if key == "KEY_DOWN":
				self.Spl["history_count"] -= 1
	
			last_line = len(self.logs["history"]) -1 - self.Spl["history_count"]
			if last_line < 0:
				last_line = len(self.logs["history"]) -1
				self.Spl["history_count"] = 0
			elif last_line > len(self.logs["history"]) -1:
				last_line = len(self.logs["history"]) -1
				self.Spl["history_count"] += 1
			line = self.logs["history"][ last_line]
			
			return line, self.Spl["history_count"]
		except Exception, e:
			self.Hlog("debug", "history: " + str(e))
			
	def get_transfer_number(self, this_list):
		try:
			if self.display["transfers"] != "downloads":
				mode = "uploads"
			else:
				mode = "downloads"
			number = None
			username = this_list[self.scrolling[mode]][1] 
			path = this_list[self.scrolling[mode]][2]
			
			userpath = (username, path)
			
			
			count = 1
			transfer = None
			for user, path  in self.sorted_transfer_list[mode]:
				if (user, path) == userpath:
					#transfer = count
					number = count
					break
				count += 1
			return number
		except Exception, e:
			self.Hlog("debug", "get_transfer_number: " + str(e))

	def create_menu(self, menu, up):
		try:
			
			self.Spl["current_menu"]=menu
			title = None
			number = None
			self.Spl["menunumber"] = up
			this_list = self.find_menu()
			if this_list == []:
				return
			if menu == "roombox":
				mode == "roombox"
				if self.display["chatshape"] == "rightlist":
					left = self.windows["dimensions"]["roombox"]["left"] - 22
				else:
					left = self.windows["dimensions"]["roombox"]["left"]+self.windows["dimensions"]["roombox"]["width"]+1
				top = 2; width = 20
				title = "%s" % (self.logs["roombox"][self.Spl["room"]][self.scrolling[mode]])[:16]
				user = name = self.logs["roombox"][self.Spl["room"]][self.scrolling[mode]]
				if user in self.user["statistics"].keys():
					number = str(self.user["statistics"][user][2]) + " Files"
				items = [["Private Message", "all"], ["Userinfo", "all"], ["IP Address", "all"], ["Browse", "all"], ["", "line"], ["Buddy", "buddies"], ["Ban", "banned"], ["Ignore", "ignored"], ["Trusted", "trusted"], ["Give Privileges", "giveprivs"]  ]
				height = len(items) + 2	
			elif menu == "lists":
				mode = self.display["interests"]
				left = 25; top = 2; width = 20
				title = "%s" % (this_list[self.scrolling[mode]])[1][:16]
				name = this_list[self.scrolling[mode]][1]
				items = [["Private Message", "all"], ["Userinfo", "all"], ["IP Address", "all"], ["Browse", "all"], ["", "line"], ["Buddy", "buddies"], ["Ban", "banned"], ["Ignore", "ignored"], ["Trusted", "trusted"], ["Give Privileges", "giveprivs"]  ]
				height = len(items) + 2	
				
			elif menu == "transfers":
				mode = self.display["transfers"]
				left = 25; top = 1; width = 20
				
				title = "%s" % this_list[self.scrolling[mode]][1][:16]
				name = this_list[self.scrolling[mode]][1]
				
				number = self.get_transfer_number(this_list)
				if self.display["transfers"] == "downloads":
					items = [["Retry", "transfers"], ["Retry All", "transfers"],["Abort", "transfers"], ["Abort User", "transfers"], ["Clear", "transfers"], ["Clear Finished", "transfers"], ["Clear User", "transfers"], ["", "line"], ["Private Message", "all"], ["Userinfo", "all"], ["IP Address", "all"], ["Browse", "all"], ["", "line"], ["Buddy", "buddies"], ["Ban", "banned"], ["Ignore", "ignored"], ["Trusted", "trusted"], ["Give Privileges", "giveprivs"],  ["Get Queue Place", "getplace"] ]
				else:
					items = [["Retry", "transfers"], ["Retry All", "transfers"],["Abort", "transfers"], ["Abort User", "transfers"], ["Clear", "transfers"], ["Clear Finished", "transfers"], ["Clear User", "transfers"], ["", "line"], ["Private Message", "all"], ["Userinfo", "all"], ["IP Address", "all"], ["Browse", "all"], ["", "line"], ["Buddy", "buddies"], ["Ban", "banned"], ["Ignore", "ignored"], ["Trusted", "trusted"], ["Give Privileges", "giveprivs"]  ]
				height = len(items) + 2	
			elif menu == "search":
				mode = search
				left = 25; top = 5; width = 20
				number = this_list[self.scrolling[mode]-self.windows["dimensions"]["search"]["start"]]
				title = "%s" % (self.data["search_results"][number][1])
				name = self.data["search_results"][number][1]
				
				items = [ ["Download", "download"], ["Download Dir", "downdir"], ["Display Full Path", "displaypath"], ["", "line"], ["Private Message", "all"], ["Userinfo", "all"], ["IP Address", "all"], ["Browse", "all"], ["", "line"], ["Buddy", "buddies"], ["Ban", "banned"], ["Ignore", "ignored"], ["Trusted", "trusted"], ["Give Privileges", "giveprivs"]]
				height = len(items) + 2	
			elif menu == "browse-dirs":
				mode = "browsedir"
				left = 23; top = 5; width = 20
				#number = this_list[self.scrolling[mode]-self.windows["dimensions"]["directories"]["start"]]
				title = "Directory" 
				name = self.usernames["browse"]
				
				items = [ ["Download Dir", "downdir"], ["Display Full Path", "displaypath"], ["", "line"], ["Private Message", "all"], ["Userinfo", "all"], ["IP Address", "all"], ["Refresh Shares", "all"], ["", "line"], ["Buddy", "buddies"], ["Ban", "banned"], ["Ignore", "ignored"], ["Trusted", "trusted"],  ["Give Privileges", "giveprivs"]]
				height = len(items) + 2	
			elif menu == "browse-files":	
				mode = "browsefile"
				left = 2; top = 5; width = 20
				number =self.scrolling[mode] + 1 #self.windows["dimensions"]["browse"]["start"]+1
				title = "File"
				name = self.usernames["browse"]
				
				items = [ ["Download", "download"], ["Download Dir", "downdir"], ["Display Full Path", "displaypath"], ["", "line"], ["Private Message", "all"], ["Userinfo", "all"], ["IP Address", "all"], ["Browse", "all"], ["", "line"], ["Buddy", "buddies"], ["Ban", "banned"], ["Ignore", "ignored"], ["Trusted", "trusted"], ["Give Privileges", "giveprivs"]]
				height = len(items) + 2	
			elif menu == "encoding":
				left = self.w-27; top = 2; width = 20
				number =  None
				title = "Encoding"
				
				if self.display["mode"] == "browse":
					if self.usernames["browse"] != "default__":
						name = self.usernames["browse"]
					else:
						name = "Filesystem"
				elif self.display["mode"] == "chat":
					name = self.Spl["room"]
				elif self.display["mode"] == "private":
					name = self.usernames["private"]
					
				items = [ ["UTF-8", ""], ["iso-8859-1", ""], ["iso-8859-2", ""], ["iso-8859-3", ""], ["iso-8859-4", ""], ["iso-8859-5", ""], ["iso-8859-6", ""], ["iso-8859-7", ""], ["iso-8859-8", ""], ["iso-8859-9", ""], ["iso-8859-10", ""], ["iso-8859-11", ""], ["iso-8859-13", ""],["iso-8859-14", ""],["iso-8859-15", ""], ["iso-8859-16", ""],["KIO8-R", ""], ["CP1250", ""], ["CP1251", ""],["CP1252", ""],["CP1253", ""],["CP1254", ""],["CP1255", ""],["CP1256", ""],["CP1257", ""],["CP1258", ""],["CP874", ""] ]
				if  len(items)+2 > self.h-9:
					height = self.h-9
				else:
					height = len(items)+2
			winbg =  curses.newwin(height+1, width+1, top, left)
			winbg.erase()
			winbg.noutrefresh()
			win =  curses.newwin(height, width, top, left)
			win.attron(self.colors["green"] | curses.A_BOLD)
# 			win.bkgdset(" ", self.colors["green"])
			win.erase()
			win.border()
			if title != None:
				win.addstr(0, 1,  "<%s>" % title)
			if number != None:
				win.addstr(height-1, 1,  "< %s >" % number)
			win.attroff(self.colors["green"] | curses.A_BOLD)
			win.noutrefresh()
			scroll = win.subwin(height-2, width-2, top+1, left+1)
# 			scroll.erase()
			scroll.scrollok(0)
# 			scroll.noutrefresh()
			self.menus[menu] = {"window": win, "scroll": scroll, "name": name, "items": items, "top": top, "width": width, "height": height, "left": left}
			self.draw_menu(menu)
			
			#sleep(1)
		except Exception, e:
			self.Hlog("debug", "Create Menu " +str(e))
		
	def draw_menu(self, menu):
		try:
			self.menus[menu]["scroll"].erase()
			c = 0

			clipped_list, self.Spl["menunumber"], start = self.scrollbox(self.menus[menu]["items"], self.Spl["menunumber"], self.menus[menu]["height"]-2)
			#for z in self.menus[menu]["items"]:
			for z in clipped_list:
				try:
					username = self.menus[menu]["name"]
						
					if z[1] in ("banned", "ignored", "buddies", "trusted"):
						if z[1]=="buddies":
							that_list = self.config["buddies"].keys()
						elif z[1]=="banned":
							that_list = self.config["banned"].keys()
						elif z[1]=="ignored":
							that_list = self.config["ignored"].keys()
						elif z[1]=="trusted":
							that_list = self.config["trusted"].keys()	
						r = 0
						if username in that_list:
							r = 1
								
						if r == 1:
							self.menus[menu]["scroll"].addstr("* ", self.colors["green"])
						else:
							self.menus[menu]["scroll"].addstr("* ", self.colors["red"])
						
						spaces = " " * (self.menus[menu]["width"]-2 - len(z[1]) -2)
						line = z[1].capitalize()+spaces
	
					elif z[1] == "line":
						line =" "  * (self.menus[menu]["width"]-2)
						if self.Spl["menunumber"] == c + start:
							self.menus[menu]["scroll"].addstr(line, self.colors["green"] | curses.ACS_HLINE)
						else:
							self.menus[menu]["scroll"].addstr(line,  curses.ACS_HLINE)
						c += 1
						continue
					else:
						spaces = " " * (self.menus[menu]["width"]-2 - len(z[0]) )
						line = z[0] + spaces
						
					if self.Spl["menunumber"] == c +start:
						self.menus[menu]["scroll"].addstr(line, self.colors["green"])
					else:
						self.menus[menu]["scroll"].addstr(line)
				except Exception, e:
	
					pass
				c += 1
			self.menus[menu]["scroll"].noutrefresh()
			curses.doupdate()
		except Exception, e:
			self.Hlog("debug", "draw_menu " +str(e))
			
	def find_menu(self):
		try:
			if self.Spl["current_menu"] == "encoding":
				return [""]
			if self.display["mode"] == "chat":
				this_list = self.logs["roombox"][self.Spl["room"]]
			elif self.display["mode"] == "lists":
				if self.display["list"]=="buddies":
					this_list = self.logs["buddies"]
				elif self.display["list"]=="banned":
					this_list = self.logs["banned"]
				elif self.display["list"]=="ignored":
					this_list = self.logs["ignored"]
			elif self.display["mode"] == "transfer":
				this_list = self.get_transfers_list()
			elif self.display["mode"] == "search":
				this_list = self.activeitems["search"]
			elif self.display["mode"] == "browse":
				if self.usernames["browse"] != "default__":
					if self.display["browse"] == "files":
						this_list = self.files
					elif self.display["browse"] == "directories":
						this_list = self.directories
				
			return this_list
		except Exception, e:
			self.Hlog("debug", "find_menu " +str(e))
			
	def get_transfers_list(self):
		try:
			this_list = []
			
			if self.display["transfer_sort"] == 'active':
				status_list = (1, 2, 3, 4, 5, 6, 8, 9,)
			elif self.display["transfer_sort"] == 'all':
				status_list = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,  14)
			elif self.display["transfer_sort"] == 'finished':
				status_list = (0, 99999)
			elif self.display["transfer_sort"] == 'queued':
				status_list = (7, 99999)
			elif self.display["transfer_sort"] == 'failed':
				status_list = (  10, 11, 12, 13)
			if self.display["transfers"] == "uploads":
				
				for username, path in self.sorted_transfer_list["uploads"]:
					vals = self.transfers["uploads"][(username, path)]
					upload, username, path, status, error, filepos, filesize, rate = vals[0], vals[1], vals[2], vals[3], vals[4], vals[5], vals[6], vals[7]
					if status in status_list:
						this_list.append(vals)
						
			elif self.display["transfers"] == "downloads":
				#self.Hlog("debug", self.sorted_transfer_list["downloads"])
				for username, path in self.sorted_transfer_list["downloads"]:
					vals = self.transfers["downloads"][(username, path)]
					upload, username, path, status, error, filepos, filesize, rate = vals[0], vals[1], vals[2], vals[3], vals[4], vals[5], vals[6], vals[7]
					if status in status_list:
						this_list.append(vals)
			#this_list.sort()
			return this_list
		except Exception, e:
			self.Hlog("debug", "get_transfers_list: " + str(e))
			
	def pick_menu_item(self, x, y, click):
		try:
			width = self.menus[self.Spl["current_menu"]]["width"]
			top = self.menus[self.Spl["current_menu"]]["top"]
			height = self.menus[self.Spl["current_menu"]]["height"]
			left = self.menus[self.Spl["current_menu"]]["left"]
			
			if x >= left and x < width + left and y >= top and y < top + height:
				if y > top and y < top + height -1:
					y -= top+1
					#self.error_bar("y"+str(y) + " x"+ str(x))
					self.Spl["menunumber"] = y
					self.draw_menu(self.Spl["current_menu"])
					if click in (2, 8, 16384):
						
						s = self.menu_exec()
						if s == 0:
							self.refresh_windows()
							self.Spl["show_menu"] = False
							self.Spl["current_menu"] = None
						elif s == 3:
							self.Spl["show_menu"] = False
							self.Spl["current_menu"] = None
			else:
				self.Spl["show_menu"] = False
				self.Spl["current_menu"] = None
				self.refresh_menu()
		except Exception, e:
			self.Hlog("debug", "pick_menu_item: " + str(e))
			
	def menu_enter(self):
		try:
			s = self.menu_exec()
			if s == 0:
				self.refresh_windows()
				self.Spl["show_menu"] = False
				self.Spl["current_menu"] = None
			elif s == 3:
				self.Spl["show_menu"] = False
				self.Spl["current_menu"] = None
			else:
				self.draw_menu(self.Spl["current_menu"])
			#self.menu()
		except Exception, e:
			self.Hlog("debug", "menu_enter: " + str(e))
			
	def refresh_menu(self):
		try:
			#self.menu()
			self.refresh_windows()
		except Exception, e:
			self.Hlog("debug", "refresh_menu: " + str(e))
			
	def menu_clear(self):
		try:
			self.Spl["show_menu"] = False
			self.Spl["current_menu"] = None
			self.refresh_menu()
		except Exception, e:
			self.Hlog("debug", "menu_clear: " + str(e))
			
	def menu_exec(self):
		try:
			num = self.Spl["menunumber"]
			if self.Spl["current_menu"] in ("roombox", "lists", "transfers", "search", "browse-dirs", "browse-files"):
				if self.Spl["current_menu"] == "roombox":
					mode = "roombox"
					username = self.logs["roombox"][self.Spl["room"]][self.scrolling[mode]]
				elif self.Spl["current_menu"] == "lists":
					mode = self.display["list"]
					username = self.find_menu()[self.scrolling[mode]][1]
				elif self.Spl["current_menu"] == "transfers":
					mode = self.display["transfers"]
					the_list = self.find_menu()
					item_num = self.scrolling[mode]
					username = the_list[item_num][1] 
					
					path = the_list[item_num][2]
					userpath = (username, path)
					transfer = self.get_transfer_number(the_list)
					if transfer == None:
						return
					if num == 0:
						# RETRY DOWNLOAD
						if self.display["transfers"] != "downloads":
							return 1
						if transfer in self.data["downloads"].keys():
							for username, path in self.data["downloads"][transfer].items():
								self.Hlog("status", "Retrying download: [%s] %s" % (username, path))
								self.send(messages.DownloadFile(username, path))
						else:
							self.Hlog("status", "No such transfer #" + str(transfer))
						return 0
					elif num == 1:
						# RETRY ALL DOWNLOADS
						if self.display["transfers"] != "downloads":
							return 1
						for user_path, transfer  in self.transfers["downloads"].items():
							if int(transfer[3]) in (10, 11, 12, 13, 14):
								self.send(messages.DownloadFile(transfer[1], transfer[2]))
						return 0
					elif num == 2:
						# ABORT TRANSFER
						if self.display["transfers"] == "downloads":
							if transfer in self.data["downloads"].keys():
								for username, path in self.data["downloads"][transfer].items():
									self.Hlog("status", "Aborting download: [%s] %s" % (username, path))
									self.send(messages.TransferAbort(0, username, path))
							else:
								self.Hlog("status", "No such transfer #" + str(transfer))
						elif self.display["transfers"] == "uploads":
							if transfer in self.data["uploads"].keys():
								for username, path in self.data["uploads"][transfer].items():
									self.Hlog("status", "Aborting upload: [%s] %s" % (username, path))
									self.send(messages.TransferAbort(1, username, path))
							else:
								self.Hlog("status", "No such transfer #" + str(transfer))
						return 0
					elif num == 3:
						# ABORT USER's TRANSFER(s)
						if self.display["transfers"] == "downloads":
							for userpath, values in self.transfers["downloads"].items():
								if userpath[0] == username:
									self.Hlog("status", "Aborting download: [%s] %s" % (username, values[2]))
									self.send(messages.TransferAbort(0, username, values[2]))
	
						elif self.display["transfers"] == "uploads":
							for userpath, values in self.transfers["uploads"].items():
								if userpath[0] == username:
									self.Hlog("status", "Aborting upload: [%s] %s" % (username, values[2]))
									self.send(messages.TransferAbort(1, username, values[2]))
	
						return 0
					elif num == 4:
						# Clear
						if self.display["transfers"] == "downloads":
							if transfer in self.data["downloads"].keys():
								for username, path in self.data["downloads"][transfer].items():
									self.Hlog("status", "Removing download: [%s] %s" % (username, path))
									self.send(messages.TransferRemove(0, username, path))
							else:
								self.Hlog("status", "No such transfer #" + str(transfer))
							
						elif self.display["transfers"] == "uploads":
							if transfer in self.data["uploads"].keys():
								for username, path in self.data["uploads"][transfer].items():
									self.Hlog("status", "Removing upload: [%s] %s" % (username, path))
									self.send(messages.TransferRemove(1, username, path))
							else:
								self.Hlog("status", "No such transfer #" + str(transfer))
						return 0
					elif num == 5:
						# Clear ALL FINISHED/FAILED
						if self.display["transfers"] == "downloads":
							for userpath, values in self.transfers["downloads"].items():
								if values[3] == 0:
									self.send(messages.TransferRemove(0, values[1], values[2]))
						elif self.display["transfers"] == "uploads":
							for userpath, values in self.transfers["uploads"].items():
								if values[3] in (0, 10, 11, 12, 13, 14):
									self.send(messages.TransferRemove(1, values[1], values[2]))
						return 0
					elif num == 6:
						# Clear USER's Transfers
						if self.display["transfers"] == "downloads":
							for userpath, values in self.transfers["downloads"].items():
								if userpath[0] == username:
									self.send(messages.TransferRemove(0, values[1], values[2]))
						elif self.display["transfers"] == "uploads":
							for userpath, values in self.transfers["uploads"].items():
								if userpath[0] == username:
									self.send(messages.TransferRemove(1, values[1], values[2]))
						return 0
					elif num == 7:
						return 1
					else:
						num -=8
				elif self.Spl["current_menu"] == "search":
					the_list = self.find_menu()
					mode = "search"
					number = the_list[self.scrolling[mode]-self.windows["dimensions"]["search"]["start"]]
					#self.Hlog("status", number)
					username = self.data["search_results"][number][1]
					path = self.data["search_results"][number][5]
					
					userpath = (username, path)
					
					if num == 0:
						# Download
						self.download_path_file("file", number)
						return 0
					elif num == 1:
						# Download Dir
						self.download_path_file("dir", number)
						return 0
					elif num == 2:
						self.Hlog("status", "[%d] %s" % (number, path))
						return 0
					elif num == 3:
						# Line
						return 1
					else:
						num -= 4
				elif self.Spl["current_menu"] in ("browse-dirs", "browse-files"):
					the_list = self.find_menu()
					username = self.usernames["browse"]

					path = self.Spl["dir_browse"]
					
					userpath = (username, path)
					
					if self.display["browse"] == "directories":
						mode = "browsedir"
						number = self.scrolling[mode]-self.windows["dimensions"]["directories"]["start"]
						if num == 0:
							# Download
							self.download_path_file("dir", number)
							return 0
						elif num == 1:
							self.Hlog("status", "[%d] %s" % (number, path))
							return 0
						else:
							num -= 2
					if self.display["browse"] == "files":
						mode = "browsefile"
						number = self.scrolling[mode]
						if num == 0:
							# Download
							self.download_path_file("file", number)
							return 0
						elif num == 1:
							# Download Dir
							self.download_path_file("dir", number)
							return 0
					
						elif num == 2:
							self.Hlog("status", "[%d] %s" % (number, path))
							return 0
						else:
							num -= 3
	
					if num == 0:
						return 1
					else:
						num -=1
				if num == 0:
					self.start_pm(username)
					self.private_mode()
				elif num == 1:
					self.requests["info"].append( username)
					self.send(messages.UserInfo(username))
					self.info_mode()
				elif num == 2:
					self.requests["ip"].append(username)
					self.send(messages.PeerAddress(username))
					self.info_mode()
				elif num == 3:
					self.start_browse(username)
				elif num == 4:
					return 1
				elif num == 5:
					if username not in self.config["buddies"].keys():
						self.mod_config("buddy", username, '')
					else:
						self.mod_config("unbuddy", username, '')
					return 1
				elif num == 6:
					if username not in self.config["banned"].keys():
						self.mod_config("ban", username, '')
					else:
						self.mod_config("unban", username, '')
					return 1
				elif num == 7:
					if username not in self.config["ignored"].keys():
						self.mod_config("ignore", username, '')
					else:
						self.mod_config("unignore", username, '')
					return 1
				elif num == 8:
					if username not in self.config["trusted"].keys():
						self.mod_config("trust", username, '')
					else:
						self.mod_config("distrust", username, '')
					return 1
				elif num == 9:
					self.usernames["privileges"] = username
					self.set_edit_title( "% Give Privileges to " + self.usernames["privileges"])
				elif num == 10:
					self.send(messages.TransferUpdate(username, path) )
			elif self.Spl["current_menu"] == "encoding":
				if num == 0: coding = "UTF-8"
				elif num == 1: coding = "iso-8859-1"  
				elif num == 2: coding = "iso-8859-2"  
				elif num == 3: coding = "iso-8859-3"  
				elif num == 4: coding = "iso-8859-4"  
				elif num == 5: coding = "iso-8859-5"  
				elif num == 6: coding = "iso-8859-6"  
				elif num == 7: coding = "iso-8859-7" 
				elif num == 8: coding = "iso-8859-8"  
				elif num == 9: coding = "iso-8859-9"  
				elif num == 10: coding = "iso-8859-10"  
				elif num == 11: coding = "iso-8859-11"  
				elif num == 12: coding = "iso-8859-13" 
				elif num == 13: coding = "iso-8859-14" 
				elif num == 14: coding = "iso-8859-15"  
				elif num == 15: coding = "iso-8859-16" 
				elif num == 16: coding = "KIO8-R" 
				elif num == 17: coding = "CP1250" 
				elif num == 18: coding = "CP1251" 
				elif num == 19: coding = "CP1252" 
				elif num == 20: coding = "CP1253" 
				elif num == 21: coding = "CP1254" 
				elif num == 22: coding = "CP1255" 
				elif num == 23: coding = "CP1256" 
				elif num == 24: coding = "CP1257" 
				elif num == 25: coding = "CP1258"
				elif num == 26: coding = "CP874" 
				#self.Hlog("debug", coding)
				if self.display["mode"] == "chat":
					self.send(messages.ConfigSet("encoding.rooms", self.Spl["room"], coding))
				elif self.display["mode"] == "private":
					self.send(messages.ConfigSet("encoding.users", self.usernames["private"], coding))
				elif self.display["mode"] == "browse":
					if self.usernames["browse"] != "default__":
						self.send(messages.ConfigSet("encoding.users", self.usernames["browse"], coding))
					else:
						self.send(messages.ConfigSet("encoding", "filesystem", coding))
					
			return 0
		except Exception, e:
			self.Hlog("debug", "menu_exec " +str(e))

	def refresh_windows(self):
		
		try:
			if self.display["mode"] =="transfer":
				if mucous_config["mucous"]["transbox"]=="split":
					self.transwin2.redrawwin()
					self.transwin2.refresh()
					self.transwin.redrawwin()
					self.transwin.refresh()
				else:
					if self.display["transfers"] == "downloads":
						self.transwin.redrawwin()
						self.transwin.refresh()
					elif self.display["transfers"] == "uploads":
						self.transwin2.redrawwin()
						self.transwin2.refresh()
			elif self.display["mode"] =="lists":
				self.windows["border"][self.display["list"]].redrawwin()
				self.windows["border"][self.display["list"]].refresh()
				self.windows["text"][self.display["list"]].redrawwin()
				self.windows["text"][self.display["list"]].refresh()
			elif self.display["mode"] =="chat":
				self.windows["border"]["chat"].redrawwin()
				self.windows["border"]["chat"].refresh()
				self.windows["text"]["chat"].redrawwin()
				self.windows["text"]["chat"].refresh()
				if self.display["chatshape"] !=  "nostatuslog":
					self.logwin.redrawwin()
					self.logwin.refresh()
					self.borderlogwin.redrawwin()
					self.borderlogwin.refresh()
				if self.display["chatshape"] not in ( "noroombox", "chat-only"):
					self.roomstatusborderwin.redrawwin()
					self.roomstatusborderwin.refresh()
					
			elif self.display["mode"] =="browse":
				self.browse_redraw()
				self.browse_display()
				curses.doupdate()
			else:
				self.windows["border"][self.display["mode"]].redrawwin()
				self.windows["border"][self.display["mode"]].refresh()
				self.windows["text"][self.display["mode"]].redrawwin()
				self.windows["text"][self.display["mode"]].refresh()
				
			self.windows["border"]["input"].redrawwin()
			self.windows["border"]["input"].refresh()
		except Exception,e:
			self.Hlog("debug", "Refresh Windows: "+str(e))
		
	def math_transfer_window(self, w, event, x, y, up):
		try:
			if y >= w["top"]+1 and y < w["top"] + w["height"] and x >= w["left"] and x < w["left"] +w["width"]:
							
				y -= w["top"] +1
				if y  + w["start"] in range(len( self.get_transfers_list() )):
					if self.display["mode"] in ("chat", "private", "info", "search", "browse", "transfer"):
						mode = self.display["transfers"]
						self.scrolling[mode] = y  + w["start"]
	
				
				if self.display["transfers"] == "downloads":
					self.download_manager()
					curses.doupdate()
				else:
					self.upload_manager()
					curses.doupdate()
				if event in ( 4096, 16384):
					if self.get_transfers_list() != []:
						self.Spl["show_menu"] = True
						self.create_menu("transfers", 0)
				return 1
			elif y == w["top"] + w["height"]:
				if x >=2 and x < 18:
					if mucous_config["mucous"]["transbox"]=="split":
						mucous_config["mucous"]["transbox"]="tabbed"
					elif mucous_config["mucous"]["transbox"]=="tabbed":
						mucous_config["mucous"]["transbox"]="split"
					self.transfer_mode()
					return
				elif x >= 20:
					if x >=20 and x < 28:
						self.display["transfer_sort"] = 'all'
					elif x >=28 and x < 39:
						self.display["transfer_sort"] = 'active'
					elif x >=39 and x < 50:
						self.display["transfer_sort"] = 'queued'	
					elif x >=50 and x < 58:
						self.display["transfer_sort"] = 'finished'
					elif x >=63 and x < 75:
						self.display["transfer_sort"] = 'failed'
					self.transfer_mode()
					return 1
			return 0
		except Exception, e:
			self.Hlog("debug", "math_transfer_window: " + str(e))
			
	def tab_click(self, x, chosen):
		try:
			choz = self.activeitems["positions"][chosen]
			match = None
			if x >= choz[0] and x < choz[1]:
				# do nothing if chose search is clicked
				return chosen, 'yes'
			else:
				for key, pos in self.activeitems["positions"].items():
					if x >= pos[0]   and x < pos[1] :
						match = 'yes'
						break
			if match != None:
				return key, match
			else:
				return chosen, None
		except Exception, e:
			self.Hlog("debug", "tab_click: " +str(e) )
			
	def key_mouse_funks(self, key, line):
		try:
			if key == "KEY_RESIZE":
				self.line = line 
				self.stdscr.keypad(1)
				self.build()
				
			elif key in ("KEY_UP",  "KEY_DOWN", "KEY_PPAGE", "KEY_NPAGE"):
				if self.Spl["show_menu"] == True:
					if key =="KEY_UP":
						key = "menu_up"
					elif key =="KEY_DOWN":
						key = "menu_down"
				else:
					self.key = key
					sline = self.scrolltext(line)
					#self.Hlog("debug", "scrolltext"+str(sline))
					if sline != None:
						line = sline
	
			elif key == "KEY_F(1)":
				if self.display["mode"] != "chat": self.chat_mode()
				return
			elif key == "KEY_F(2)":
				if self.display["mode"] != "private": self.private_mode()
				return
			elif key == "KEY_F(3)":
				if self.display["mode"] != "transfer": self.transfer_mode()
				return
			elif key == "KEY_F(4)":
				if self.display["mode"] != "search": self.search_mode()
				return
			elif key == "KEY_F(5)":
				if self.display["mode"] != "info": self.info_mode()
				return
			elif key == "KEY_F(6)":
				if self.display["mode"] != "browse": self.browse_mode()
				return
			elif key == "KEY_F(7)":
				if self.display["mode"] != "lists": self.list_mode()
				return
			elif key == "KEY_F(8)":
				if self.display["mode"] != "roomlist": self.rooms_mode()
				return
			elif key == "KEY_F(9)":
				if self.display["mode"] != "setup": self.setup_mode()
				return
			elif key == "KEY_F(10)":
				if self.display["mode"] not in ("help", "debug", "status") : self.help_mode()
				return
			elif key == chr(10) or key == "KEY_ENTER":
				if line not in self.logs["history"] and line !='':
					self.logs["history"].append(line)
			elif key in ("popup"):
				if self.Spl["show_menu"] == True:
					self.menu_clear()
				else:
					self.Spl["show_menu"] = True
					if self.display["mode"] == "chat":
						if self.display["chatshape"] not in ( "noroombox", "chat-only"):
							self.create_menu("roombox", 0)
						else:
							return
					elif self.display["mode"] == "lists":
						self.create_menu("lists", 0)
					elif self.display["mode"] == "transfer":
						self.create_menu("transfers", 0)
					elif self.display["mode"] == "search":
						if self.Spl["current_search"] != "default__":
							self.create_menu("search", 0)
					elif self.display["mode"] == "browse":
						
						if self.usernames["browse"] != "default__":
							if self.display["browse"] == "files":
								self.create_menu("browse-files", 0)
							elif self.display["browse"] == "directories":
								self.create_menu("browse-dirs", 0)
			elif key in ("delete"):
				if self.display["mode"] == "lists" and self.display["list"] == "interests":
					inp = self.Spl["interests_input"]
					if inp == "add_likes":
						inp = "del_likes"
					elif inp == "del_likes":
						inp = "add_likes"
					elif inp == "del_hates":
						inp = "add_hates"
					elif inp == "add_hates":
						inp = "del_hates"
					self.Spl["interests_input"]  = inp
					self.interests_mode()
				
					
			elif key in ("switch", "KEY_HOME", "KEY_END"):
				if self.display["mode"] == "transfer":
					# Tab to switch between upload and download scrolling
					if self.display["transfers"] == "uploads":
						self.display["transfers"]="downloads"
					elif self.display["transfers"]=="downloads":
						self.display["transfers"]="uploads"
					self.transfer_mode()
				
				elif self.display["mode"] == "chat":
					if key in ("switch"):
						if self.display["chat"] == "chatroom":
							if self.display["chatshape"] not in ( "noroombox", "chat-only"):
								self.display["chat"] = "roombox"
						elif self.display["chat"] == "roombox":
							self.display["chat"] = "chatroom"
 						self.chat_mode()
						
					elif key == "KEY_END":
						if self.display["chat"] == "chatroom":
							self.scroling["chatroom"] = -1
							self.chat_display()
						elif self.display["chat"] == "roombox":
							self.scroling["roombox"] = len(self.data["rooms"][self.Spl["room"]])
	 						self.chat_mode()
					elif key == "KEY_HOME":
						if self.display["chat"] == "chatroom":
							self.scroling["chatroom"] = 0 
							self.chat_display()
						elif self.display["chat"] == "roombox":
							self.scroling["roombox"] = 0
							self.chat_mode()
						
					
				elif self.display["mode"] == "search":
					# Hotkeys to switch types of searches
					if self.Spl["search_method"] == "globally":
						self.Spl["search_method"] = "buddies"
					elif self.Spl["search_method"] == "buddies":
						self.Spl["search_method"] = "rooms"
					elif self.Spl["search_method"] == "rooms":
						self.Spl["search_method"] = "user"
					elif self.Spl["search_method"] == "user":
						self.Spl["search_method"] = "wishlist"
					elif self.Spl["search_method"] == "wishlist":
						self.Spl["search_method"] = "globally"
					self.search_mode()
				elif self.display["mode"] == "browse":	
					if self.display["browse"] == "files":
						self.display["browse"] = "directories"
					elif self.display["browse"] == "directories":
						self.display["browse"] = "files"
					self.browse_mode()
				elif self.display["mode"] == "lists" and self.display["list"] == "interests":
					if self.display["interests"] == "recommendations":
						self.display["interests"] = "similar_users"
					elif self.display["interests"] == "similar_users":
						self.display["interests"] = "likes"
					elif self.display["interests"] == "likes":
						self.display["interests"] = "hates"
					elif self.display["interests"] == "hates":
						self.display["interests"] = "recommendations"
					self.interests_mode()
			elif key == "KEY_MOUSE":
				(id,x,y,z,event)=curses.getmouse()
				#self.Hlog("debug", "%d %d %d %d %d" % (id, x, y, z,event))
				if event in (1, 128, 8192):
					# Ignore PRESSED and RELEASED
					return
				if x in range(8) and y == 0:
					if self.Spl["connected"] == 0:
						self.connect()
					elif self.Spl["connected"] == 1:
						self.toggle_away()
					return
	# 1Chat 2Private 3Transfers 4Search 5Info 6Browse 7Users 8Rooms 9Setup 10Help
				if y >= self.h-1:
					# clickable mode switching
					if x >= 0 and x < 7:
						self.chat_mode()
					elif x >= 7 and x < 16:
						self.private_mode()
					elif x >= 16 and x < 27:
						self.transfer_mode()
					elif x >= 27 and x < 35:
						self.search_mode()
					elif x >= 35 and x < 41:
						self.info_mode()
					elif x >= 41 and x < 49:
						self.browse_mode()
					elif x >= 49 and x < 56:
						self.list_mode()
					elif x >= 56 and x < 63:
						self.rooms_mode()
					elif x >= 63 and x < 70:
						self.setup_mode()
					elif x >= 70 and x < 76:
						self.help_mode()
						
				if self.Spl["show_menu"] == True and self.Spl["current_menu"] != None:
					width = self.menus[self.Spl["current_menu"]]["width"]
					top = self.menus[self.Spl["current_menu"]]["top"]
					height = self.menus[self.Spl["current_menu"]]["height"]
					left = self.menus[self.Spl["current_menu"]]["left"]
					if x >= left and x < left+width and y >= top and y < top+height:
						self.pick_menu_item(x, y, event)
						return
					else:
						self.menu_clear()
	
				if self.display["mode"] == "chat":
					w = self.windows["dimensions"]["chat"]
					if y == w["top"]-1 and x >= w["left"]-1 and x < w["left"]+3:
						self.chat_room_cycle()
						return
					# Clickable room switch
					
					if "roombox" in self.windows["dimensions"] and self.display["chatshape"] not in ( "noroombox", "chat-only"):
						roombox = self.windows["dimensions"]["roombox"]
						if y >= roombox["top"] and y < roombox["top"] + roombox["height"] and x < roombox["width"] + roombox["left"] and x > roombox["left"]:
							if self.display["chat"] != "roombox":
								self.display["chat"] = "roombox"
								self.chat_mode()
							y -= roombox["top"]
							if "start" not in roombox:
								return
							if y  + roombox["start"] in range(len(self.logs["roombox"][self.Spl["room"]])):
								
								sup = y  + roombox["start"]
								if event in ( 4096, 16384):
									if sup != self.scrolling["roombox"]:
										self.scrolling["roombox"] = sup
									self.roomstatusbox()
									
									self.Spl["show_menu"] = True
									self.create_menu("roombox", 0)
									curses.doupdate()
								else:
									if sup != self.scrolling["roombox"]:
										self.scrolling["roombox"] = sup
										self.roomstatusbox()
										curses.doupdate()
							return
								
					if y == self.h-3 or y == self.h-4:
						if x>= self.w-27 and x < self.w-18:
							self.Spl["show_menu"] = True
							self.create_menu("encoding", 0)
						
						elif x >= self.w-17 and x < self.w-1:
							joined = self.data["rooms"].keys()
							joined.sort()
							if not self.Spl["room"] in joined:
								ix = 0
							else:
								ix = joined.index(self.Spl["room"])
								
								if x >= self.w-9 and x < self.w-1:
									# Next Button
									ix += 1
								elif x <= self.w-10 and x >= self.w-17:
									# Prev Button
									ix -= 1
								else:
									return
								if ix < 0:
									ix = -1
								elif ix >= len(joined):
									ix = 0
							self.change_room(joined[ix])
							
					elif y  in (w["top"] + w["height"], w["top"] + w["height"]-1) and x >= w["left"] + w["width"]-5 and x <= w["left"] + w["width"]:
						self.key = "KEY_NPAGE"
						self.scrolltext(line)
						
					elif y in ( w["top"], w["top"]+1)  and x >= w["left"] + w["width"]-5 and x <= w["left"] + w["width"]:
						self.key = "KEY_PPAGE"
						self.scrolltext(line)
					else:
						if y >= w["top"]-1 and y < w["top"] + w["height"] +1 and x >= w["left"] -1 and x < w["left"] +w["width"]+1:
							if self.display["chat"] != "chatroom":
								self.display["chat"] = "chatroom"
								self.chat_mode()
							
					
				elif self.display["mode"] == "private":
					# Clickable private message switch
					if self.usernames["private"] != None:
						if y in (2, 3, 4):
							if len(self.logs["private"].keys()) > 1:
								pmusers =  self.logs["private"].keys()
								pmusers.sort()
								self.usernames["private"], match = self.tab_click(x, self.usernames["private"])
								if match == None:
									s = pmusers.index(self.usernames["private"])
									self.usernames["private"] = pmusers[s-1]
								self.start_pm(self.usernames["private"])
								self.private_mode()
								
						if y == self.h-3 or y == self.h-4:
							if x>= self.w-27 and x < self.w-18:
								self.Spl["show_menu"] = True
								self.create_menu("encoding", 0)
							elif x >=self.w-10 and x < self.w-1:
								self.close_private_chat(self.usernames["private"])
								
				elif self.display["mode"] == "browse":
					d = self.windows["dimensions"]["directories"]
					w = self.windows["dimensions"]["browse"]
					if y in (1, 2, 3):
						if len(self.activeitems["browse"]) >= 1:
							
							if self.usernames["browse"] == "default__":
								self.usernames["browse"] = self.activeitems["browse"][0]
							else:
								self.usernames["browse"], match = self.tab_click(x, self.usernames["browse"])
								if match == None:
									s = self.activeitems["browse"].index(self.usernames["browse"])
									self.usernames["browse"] = self.activeitems["browse"][s-1]
								sdirs =  self.data["browse_results"][self.usernames["browse"]].keys()
								sdirs.sort()
								self.Spl["dir_browse"]=sdirs[0]
							
							self.browse_mode()
					
					elif y == w["top"]-1:
						if x >=self.w-17 and self.usernames["browse"] != "default__":
							self.usernames["browse"]="default__"
							self.browse_mode()
					elif x in range(d["width"]) and y >= d["top"] and y <= d["top"] + d["height"]:
						if self.usernames["browse"] == "default__":
							return
						if self.display["browse"] != "directories":
							self.display["browse"] = "directories"
							self.browse_redraw()
							
						self.scrolling["browsedir"] = y - d["top"] + d["start"]
						self.browse_display()
						
						if event in ( 4096, 16384):
							self.roomstatusbox()
							self.Spl["show_menu"] = True
							self.create_menu("browse-dirs", 0)
						else:
							self.roomstatusbox()
						curses.doupdate()
						
					elif x >=  w["left"] and y >= w["top"] and y <= w["top"] + w["height"]:
						if self.usernames["browse"] == "default__":
							return
						if self.display["browse"] != "files":
							self.display["browse"] = "files"
							self.browse_redraw()
						self.scrolling["browsefile"] = y - w["top"]+ w["start"]
						self.browse_display()
						
						if event in ( 4096, 16384):
							self.roomstatusbox()
							self.Spl["show_menu"] = True
							self.create_menu("browse-files", 0)
						else:
							self.roomstatusbox()
						curses.doupdate()
						
					elif y in ( self.h-5, self.h-6):
						if x>= self.w-27 and x < self.w-18:
							self.Spl["show_menu"] = True
							self.create_menu("encoding", 0)
							return
						elif x >=self.w-10 and x < self.w-1 and self.usernames["browse"] != "default__":
							self.close_browse(self.usernames["browse"])
							
								
				elif self.display["mode"] == "info":
					# Clickable user info tabs
					
					if y in (2, 3, 4):
						if len(self.activeitems["info"]) >= 1:
							
							if self.usernames["info"] == None:
								self.usernames["info"] = self.activeitems["info"][0]
							self.usernames["info"], match = self.tab_click(x, self.usernames["info"])
							if match == None:
								s = self.activeitems["info"].index(self.usernames["info"])
								self.usernames["info"] = self.activeitems["info"][s-1]
							#self.display_userinfo_log()
							self.info_mode()
							
					if self.usernames["info"] != None:
						if y  in (5,6):
							if x >=self.w-19-2-16 and x < self.w-12:
								self.usernames["info"]=None
								self.info_mode()
						elif y in ( self.h-3, self.h-4, self.h-5):
							if x >=self.w-10 and x < self.w-1:
								self.close_userinfo(self.usernames["info"])
				
				elif self.display["mode"] == "search":
					w = self.windows["dimensions"]["search"]
					if self.Spl["current_search"] != "default__":
						if y >= w["top"] and y < w["top"] + w["height"] and x >= w["left"] and x < w["left"] +w["width"]:
							#self.Hlog("debug", "%d:%d::%d" %(x,y,w["top"]) )
							y1 = y- w["top"]
							
							if y1  + w["start"] in range(self.search_number):
								self.scrolling["search"]  = y1  + w["start"]
								self.search_display()
								if event in ( 4096, 16384):
									self.Spl["show_menu"] = True
									self.create_menu("search", 0)
									return

					if y in (1, 2, 3):
						if len(self.data["search_tickets"].keys()) >= 1:
							
							
							if self.Spl["current_search"] == "default__":
								self.Spl["current_search"] = self.data["search_tickets"].keys()[0]

							self.Spl["current_search"], match = self.tab_click(x, self.Spl["current_search"])	
								
							if match == None:
								s = self.data["search_tickets"].keys().index(self.Spl["current_search"])
								self.Spl["current_search"] = self.data["search_tickets"].keys()[s-1]
							self.search_mode()
	
					elif y in ( self.h-3, self.h-4):
						if x >= 10 and x <= 20:
							# Toggle type of search
							if self.Spl["search_method"] == "globally":
								self.Spl["search_method"] = "buddies"
							elif self.Spl["search_method"] == "buddies":
								self.Spl["search_method"] = "rooms"
							elif self.Spl["search_method"] == "rooms":
								self.Spl["search_method"] = "globally"
							self.search_mode()
							
					elif y in ( self.h-5, self.h-6):
#m< Num|User|Free|Speed|Que|Path|Size|File|Bitrate|Time >< Reverse >

						change = 0
						if x >= 2 and x <= 6 and self.Spl["search_order"] != "num":
							self.Spl["search_order"] = "num"
							change = 1
						elif x >= 7 and x <= 11 and self.Spl["search_order"] != "user":
							self.Spl["search_order"] = "user"
							change = 1
						elif x >= 12 and x <= 16  and self.Spl["search_order"] != "free":
							self.Spl["search_order"] = "free"
							change = 1
						elif x >= 17 and x <= 22  and self.Spl["search_order"] != "speed":
							self.Spl["search_order"] = "speed"
							change = 1
						elif x >= 23 and x <= 26  and self.Spl["search_order"] != "que":
							self.Spl["search_order"] = "que"
							change = 1
						elif x >= 27 and x <= 31  and self.Spl["search_order"] != "path":
							self.Spl["search_order"] = "path"
							change = 1
						elif x >= 33 and x <= 36  and self.Spl["search_order"] != "size":
							self.Spl["search_order"] = "size"
							change = 1
						elif x >= 37 and x <= 41  and self.Spl["search_order"] != "file":
							self.Spl["search_order"] = "file"
							change = 1
						elif x >= 42 and x <= 49  and self.Spl["search_order"] != "bitrate":
							self.Spl["search_order"] = "bitrate"
							change = 1
						elif x >= 50 and x <= 54  and self.Spl["search_order"] != "time":
							self.Spl["search_order"] = "time"
							change = 1
						elif x >= 56 and x <= self.w-10:
							if self.Spl["search_reverse"] == True:
								self.Spl["search_reverse"] = False
							elif self.Spl["search_reverse"] == False:
								self.Spl["search_reverse"]= True
							change = 1
						elif x >=self.w-10 and x < self.w-1:
							self.close_search(self.Spl["current_search"])
						if change == 1:
							self.search_mode()
					
					elif y == 4:
						if self.Spl["current_search"] != "default__":
							if x >=self.w-18:
								self.Spl["current_search"]="default__"
								self.search_mode()
	
				elif self.display["mode"] == "roomlist":
					# ROOMLIST BUTTONS
					if y == self.h-5:
						if x >= 14 and x <= 22:
							mucous_config["mucous"]["rooms_sort"] = "alpha"
							self.rooms_mode()
						elif x >= 24 and x <= 35:
							mucous_config["mucous"]["rooms_sort"] = "alpha-reversed"
							self.rooms_mode()
						elif x >= 37 and x <= 46:
							mucous_config["mucous"]["rooms_sort"] = "size"
							self.rooms_mode()
						elif x >= 47 and x <= 56:
							mucous_config["mucous"]["rooms_sort"] = "size-reversed"
							self.rooms_mode()
						elif x >= self.w-16:
							self.send(messages.RoomList())
							
					w = self.windows["dimensions"]["roomlist"]
					if y >= w["top"] and y < w["top"] + w["height"] and x >= w["left"] and x < w["left"] +w["width"]:
						y -= w["top"]
						if y  + w["start"] in range(len(self.sizedrooms)):
							self.scrolling["roomlist"]  = y  + w["start"]
							self.display_room_list_mode()
							return self.sizedrooms[self.scrolling["roomlist"]]

							
				elif self.display["mode"] == "lists":
					w = self.windows["dimensions"][self.display["list"]]
					if y == 1:
						if x >= 4 and x <= 15:
							self.display["list"]="buddies"
							self.list_mode()
						elif x >= 17 and x <= 27:
							self.display["list"]="banned"
							self.list_mode()
						elif x >= 29 and x <= 40:
							self.display["list"]="ignored"
							self.list_mode()
						elif x >= 42 and x <= 55:
							self.display["list"]="interests"
							self.list_mode()
							
					if self.display["list"] == "interests":
						rexw = self.windows["dimensions"]["recommendations"]
						userw = self.windows["dimensions"]["similar_users"]
						hatew = self.windows["dimensions"]["hates"]
						likew = self.windows["dimensions"]["likes"]
						
# 						self.Hlog("debug", "%d %d" % (x, y) )
						if y >= userw["top"]-1 and y < userw["top"] + userw["height"]+1 and x >= userw["left"]-1 and x < userw["left"]+1 +userw["width"]:
# 							self.Hlog("debug", "sim")
							w = userw
							if self.display["interests"] != "similar_users":
								self.display["interests"] = "similar_users"
						
							if y == w["top"] + w["height"]:
								if x >= w["left"]+w["width"] -11 and x <=  w["left"]+w["width"]:
									self.send(messages.GetSimilarUsers())
							if y >= w["top"] and y < w["top"] + w["height"] and x >= w["left"] and x < w["left"] +w["width"]:
								y -= w["top"]
								this_list = self.logs[self.display["interests"]]
								if y  + w["start"] in range(len(this_list)):
									self.scrolling[self.display["interests"]]  = y  + w["start"]
									self.line = str(self.logs[self.display["interests"]][self.scrolling[self.display["interests"]]][0])
							self.interests_mode()
							return self.line
						elif y >= likew["top"]-1 and y < likew["top"] + likew["height"]+1 and x >= likew["left"]-1 and x < likew["left"]+1 +likew["width"]:
# 							self.Hlog("debug", "lik")
							w = likew
							if self.display["interests"] != "likes":
								self.display["interests"] = "likes"
								
							
							if y == w["top"] + w["height"]:
								
								if x >= w["left"]+2 and x <= w["left"]+7:
									
									if self.Spl["interests_input"] == "add_likes":
										self.send_add_interest(self.line)
									else:
										self.Spl["interests_input"] = "add_likes"
								elif x >= w["left"]+9 and x <= w["left"]+w["width"]:
									if self.Spl["interests_input"] == "del_likes":
										self.send_remove_interest(self.line)
									else:
										self.Spl["interests_input"] = "del_likes"
									
							if y >= w["top"] and y < w["top"] + w["height"] and x >= w["left"] and x < w["left"] +w["width"]:
								y -= w["top"]
								this_list = self.logs[self.display["interests"]]
								
								if y  + w["start"] in range(len(this_list)):
									self.scrolling[self.display["interests"]]  = y  + w["start"]
 									self.line = self.logs[self.display["interests"]][self.scrolling[self.display["interests"]]]

								
							self.interests_mode()
							return self.line
						elif y >= hatew["top"]-1 and y < hatew["top"] + hatew["height"]+1 and x >= hatew["left"]-1 and x < hatew["left"]+1 +hatew["width"]:
# 							self.Hlog("debug", "hat")
							w = hatew
							if self.display["interests"] != "hates":
								self.display["interests"] = "hates"
							if y == w["top"] + w["height"]:
								if x >= 2 and x <= 7:
									if self.Spl["interests_input"] == "add_hates":
										self.send_add_hated_interest(self.line)
									else:
										self.Spl["interests_input"] = "add_hates"
									
								elif x >= w["left"]+9 and x <= w["left"]+w["width"]:
									if self.Spl["interests_input"] == "del_hates":
										self.send_remove_hated_interest(self.line)
									else:
										self.Spl["interests_input"] = "del_hates"
							if y >= w["top"] and y < w["top"] + w["height"] and x >= w["left"] and x < w["left"] +w["width"]:
								y -= w["top"]
								this_list = self.logs[self.display["interests"]]
								if y  + w["start"] in range(len(this_list)):
									self.scrolling[self.display["interests"]]  = y  + w["start"]
									self.line = self.logs[self.display["interests"]][self.scrolling[self.display["interests"]]]
							self.interests_mode()
							return self.line
						elif y >= rexw["top"]-1 and y < rexw["top"] + rexw["height"]+1 and x >= rexw["left"]-1 and x < rexw["left"]+1 +rexw["width"]:
							w = rexw
# 							self.Hlog("debug", "rec")
							if self.display["interests"] != "recommendations":
								self.display["interests"] = "recommendations"
							if y == w["top"] -1:
# 								self.Hlog("debug", w["left"]+w["width"] -len(self.Spl["interests_input"]) -5)
# 								self.Hlog("debug", w["left"]+w["width"])
								if x >= w["left"]+w["width"] -len(self.Spl["recommend_sort"]) -5 and x <=  w["left"]+w["width"]:
									if self.Spl["recommend_sort"] == "size":
										self.Spl["recommend_sort"] = "alpha"
									elif self.Spl["recommend_sort"] == "alpha":
										self.Spl["recommend_sort"] = "size"
							elif y == w["top"] + w["height"]:
								if x >= w["left"]+ 1 and x <=  w["left"]+12:
									self.send(messages.GetRecommendations())
								elif x >= w["left"]+w["width"] -10 and x <=  w["left"]+w["width"]:
									self.send(messages.GetGlobalRecommendations())
							elif y >= w["top"] and y < w["top"] + w["height"] and x >= w["left"] and x < w["left"] +w["width"]:
								y -= w["top"]
								this_list = self.logs[self.display["interests"]]
								if y  + w["start"] in range(len(this_list)):
									self.scrolling[self.display["interests"]]  = y  + w["start"]
									self.line = self.logs[self.display["interests"]][self.scrolling[self.display["interests"]]][0]
									
							self.interests_mode()
							return self.line
					elif self.display["list"] in ("buddies", "banned", "ignored", "trusted"):
						
						if y >= w["top"] and y < w["top"] + w["height"] and x >= w["left"] and x < w["left"] +w["width"]:
							y -= w["top"]
							
							this_list = self.logs[self.display["list"]]
							if y  + w["start"] in range(len(this_list)):
								self.scrolling[self.display["list"]]  = y  + w["start"]
								
								if event in ( 4096, 16384):
									self.display_lists()
									self.Spl["show_menu"] = True
									self.create_menu("lists", 0)
								else:
									self.display_lists()
							
							
				elif self.display["mode"] == "transfer":
					# TRANSFERS BUTTONS
					# Clickable transfer type switcher
					up = self.scrolling[self.display["transfers"]]
					if mucous_config["mucous"]["transbox"]=="split":
						u = self.windows["dimensions"]["uploads"]
						d = self.windows["dimensions"]["downloads"]
						
						w = None
						
						if y >= u["top"]+1 and y <= u["top"] + u["height"] and x >= u["left"] and x < u["left"] +u["width"]:
							if self.display["transfers"] != "uploads":
								self.display["transfers"] = "uploads"
								self.transfer_mode()
							w = u
							#y -= w["top"]+1
						elif y >= d["top"]+1 and y <= d["top"] + d["height"] and x >= d["left"] and x < d["left"] +d["width"]:
							if self.display["transfers"] != "downloads":
								self.display["transfers"] = "downloads"
								self.transfer_mode()
							w = d
	
						if w != None:
							if self.math_transfer_window(w, event, x, y, up) == 1:
								return
	
					else:
						if y == 1:
							if x >=2 and x < 26:
								self.display["transfers"]="uploads"
							elif x >=27 and x < 40:	
								self.display["transfers"]="downloads"
							self.transfer_mode()
							return
							
						if self.display["transfers"] == "uploads":
							w = self.windows["dimensions"]["uploads"]
						else:
							w = self.windows["dimensions"]["downloads"]
						r = self.math_transfer_window(w, event, x, y, up)
						if r == 1:
							return	
		
				elif self.display["mode"] == "setup":
					if y in (0, 1):
						if x >=1 and x <=12:
							self.display["setup"]="mucous"
						elif x >=16 and x <=26:
							self.display["setup"]="museek"
						elif x >=31 and x <=41:
							self.display["setup"]="shares"
						elif x >=46 and x <=57:
							self.display["setup"]="userinfo"
						elif x >=60 and x <=69:
							self.display["setup"]="logs"
						self.setup_mode()
						
					if self.display["setup"]=="shares":
						if y in ( 3, 4, 5):
							if x >= 1 and x <= 16:
								self.muscan_command = ["muscan", "-v", "-r"]
								self.muscan_timer.cancel()
								self.muscan_timer = threading.Timer(1.0, self.muscan_display)
								self.muscan_timer.start()
								self.Hlog("status", "Rescanning shares with muscan, don't forget to Reload them.")
							elif x >= 17 and x <= 29:
							
								self.muscan_command = ["muscan", "-v"]
								self.muscan_timer.cancel()
								self.muscan_timer = threading.Timer(1.0, self.muscan_display)
								self.muscan_timer.start()
								self.Hlog("status", "Updating shares with muscan, don't forget to Reload them.")
							elif x >= 33 and x <= 49:
								self.send(messages.ReloadShares())
	
						if y in ( 6, 7, 8):
							if x >= 1 and x <= 16:
								self.muscan_command = ["muscan",  "-l"]
								self.muscan_timer.cancel()
								self.muscan_timer = threading.Timer(1.0, self.muscan_display)
								self.muscan_timer.start()
								self.Hlog("status", "Listing shares with muscan.")
							elif x >= 17 and x <= 29:
								self.Spl["setup_input"]="adddir"
								self.setup_mode()
							elif x >= 33 and x <= 49:
								self.Spl["setup_input"]="rmdir"
								self.setup_mode()
					elif self.display["setup"]=="userinfo":
						if y >= 1 and y < self.h-7:
							self.Spl["setup_input"]="userinfo"
						elif y <= self.h-5 and y >= self.h-7:
							self.Spl["setup_input"]="userimage"
						self.setup_mode()
					elif self.display["setup"]=="logs":
						if y >= 2 and y <= 4 and x < 17:
							self.logging_toggle()
							self.setup_mode()
						
							
					elif self.display["setup"] in ("museek", "mucous"):
						
						if y in (2, 3, 4):
							
							if x >=1 and x <=35:
								if self.display["setup"]=="museek":
									self.Spl["setup_input"]="server-host"
								elif self.display["setup"]=="mucous":
									self.Spl["setup_input"]="interface"
									self.setup_mode()

							elif x >=36 and x <=64:
								if self.display["setup"]=="museek":
									self.Spl["setup_input"]="soulseek-username"
									self.setup_mode()
									

						elif y in (5, 6, 7):
							if self.display["setup"]=="museek":
								if x >=36 and x <=64:
									self.Spl["setup_input"]="soulseek-password"
								elif x >=1 and x <=35:	
									self.Spl["setup_input"]="museek-interface-password"
								self.setup_mode()
							elif self.display["setup"]=="mucous":
								if x >=1 and x <=35:
									self.Spl["setup_input"]="interface-password"
								self.setup_mode()
						elif y in (8, 9, 10):
							if x >=1 and x <=16:
								#Buddies-only
								if self.display["setup"]=="museek":
									if "transfers" in self.config:
										if self.config["transfers"]["only_buddies"] == "true":
											self.send(messages.ConfigSet("transfers", "only_buddies", "false"))
										elif self.config["transfers"]["only_buddies"] == "false":
											self.send(messages.ConfigSet("transfers", "only_buddies", "true"))
								elif self.display["setup"]=="mucous":
									if mucous_config["tickers"]["tickers_enabled"] == 'no':
										mucous_config["tickers"]["tickers_enabled"] = 'yes'
										
									elif mucous_config["tickers"]["tickers_enabled"] == 'yes':
										mucous_config["tickers"]["tickers_enabled"] = 'no'
									self.setup_mode()
									
									
	
							elif x >=17 and x <=31:
								if self.display["setup"]=="museek":
									#buddy-privs
									if "transfers" in self.config:
										if self.config["transfers"]["privilege_buddies"] == "true":
											self.send(messages.ConfigSet("transfers", "privilege_buddies", "false"))
												
										elif self.config["transfers"]["privilege_buddies"] == "false":
											self.send(messages.ConfigSet("transfers", "privilege_buddies", "true"))
								elif self.display["setup"]=="mucous":
									# Minimum size of rooms displayed in room list
									if x >=17 and x <=23:
										mucous_config["mucous"]["roomlistminsize"] -= 1
									elif x >=24 and x <=31:
										mucous_config["mucous"]["roomlistminsize"] += 1
									if mucous_config["mucous"]["roomlistminsize"] < 1:
										mucous_config["mucous"]["roomlistminsize"] = 1
									self.setup_mode()
							elif x >=32 and x <=47:
								
								if self.display["setup"]=="museek":
									# Connect Mode
									if "clients" in self.config:
										if self.config["clients"]["connectmode"] == "passive":
											self.send(messages.ConfigSet("clients", "connectmode", "active"))
										elif self.config["clients"]["connectmode"] == "active":
											self.send(messages.ConfigSet("clients", "connectmode", "passive"))
								elif self.display["setup"]=="mucous":
									# Toggle Autobuddy
									if mucous_config["mucous"]["autobuddy"]  == "yes":
										mucous_config["mucous"]["autobuddy"] = "no"
			
									elif mucous_config["mucous"]["autobuddy"]  == "no":
										mucous_config["mucous"]["autobuddy"] = "yes"
									self.setup_mode()
							elif x >=47 and x <=62:
								if self.display["setup"]=="museek" and "transfers" in self.config:
									
									s = int(self.config["transfers"]["upload_slots"]) 
									if x >=47 and x <=53:
										s  -= 1
									elif x >=53 and x <=62:
										s  += 1
									if s < 0:
										s = 0
									s = str(s)
									self.send(messages.ConfigSet("transfers", "upload_slots", s))
									self.setup_mode()
									
								if self.display["setup"]=="mucous":
									if mucous_config["mucous"]["Auto-Retry"] == "True":
										mucous_config["mucous"]["Auto-Retry"] = "False"
										self.retry_timer.cancel()
									elif mucous_config["mucous"]["Auto-Retry"] == "False":
										mucous_config["mucous"]["Auto-Retry"] ="True"
										self.retry_timer.cancel()
										self.retry_timer = threading.Timer(30.0, self.retry_display)
										self.retry_timer.start()
									self.setup_mode()
									
	
										
											
									
						elif y in (11, 12, 13, 14):
							if self.display["setup"]=="mucous" and "transfers" in self.config:
								if x >=1 and x <=16:
									
									if mucous_config["tickers"]["ticker_cycle"] == 'no':
										mucous_config["tickers"]["ticker_cycle"] = 'yes'
										
									elif mucous_config["tickers"]["ticker_cycle"] == 'yes':
										mucous_config["tickers"]["ticker_cycle"] = 'no'
									self.setup_mode()
								elif x >=17 and x <=32:
									if mucous_config["mucous"]["url reader"] == 'lynx':
										mucous_config["mucous"]["url reader"] = 'links'
									elif mucous_config["mucous"]["url reader"] == 'links':
										mucous_config["mucous"]["url reader"] = 'elinks'
									elif mucous_config["mucous"]["url reader"] == 'elinks':
										mucous_config["mucous"]["url reader"] = 'firefox'
									elif mucous_config["mucous"]["url reader"] == 'firefox':
										mucous_config["mucous"]["url reader"] = 'custom'
									elif mucous_config["mucous"]["url reader"] == 'custom':
										mucous_config["mucous"]["url reader"] = 'lynx'
									self.setup_mode()
								elif x >=33 and x <=49:
									# Change charset, encoding, language that text is piped thru
									if "language" in mucous_config["mucous"]:
										if mucous_config["mucous"]["language"] in self.encodings:
											pos = self.encodings.index(mucous_config["mucous"]["language"])
											pos +=1
											if pos not in range(len(self.encodings)):
												pos = 0
											mucous_config["mucous"]["language"]=self.encodings [pos]
											self.setup_mode()
										else:
											mucous_config["mucous"]["language"]=self.encodings [0]
											self.setup_mode()
								elif x >=50 and x <=66:
									if mucous_config["mucous"]["Auto-Clear"] == "True":
										mucous_config["mucous"]["Auto-Clear"] = "False"
										self.clear_timer.cancel()
										self.clear_timer = threading.Timer(30.0, self.clear_display)
										
									elif mucous_config["mucous"]["Auto-Clear"] == "False":
										mucous_config["mucous"]["Auto-Clear"] ="True"
										self.clear_timer.cancel()
										self.clear_timer = threading.Timer(30.0, self.clear_display)
										self.clear_timer.start()
									self.setup_mode()
					
							elif self.display["setup"]=="museek":
								if x >=1 and x <=61:
									#Directories
									if y in (11, 12):
										self.Spl["setup_input"]="download-dir"
									elif y in (13, 14):
										self.Spl["setup_input"]="incomplete-dir"
									self.setup_mode()
									
						elif y in (15, 16, 17):
							if self.display["setup"]=="mucous":
								if x >=1 and x <=32:
									self.Spl["setup_input"]="custom-url"
									self.setup_mode()
								elif x >=33 and x <=49:
									
									if mucous_config["mucous"]["beep"] == "True":
										mucous_config["mucous"]["beep"] = "False"
									elif mucous_config["mucous"]["beep"] == "False":
										mucous_config["mucous"]["beep"] = "True"
									self.setup_mode()
								elif x >=50 and x <=65:
									update_config()
									self.Hlog("status", "Config Saved")
								
				elif self.display["mode"] in ("help", "debug"):
					if y == self.windows["dimensions"]["help"]["top"]-1:
						if x >= 4 and x <= 16 and self.display["mode"] != "help":
							self.display["mode"] = "help"
							self.help_mode()
						elif x >= 18 and x <= 31 and self.display["mode"] != "debug":
							self.display["mode"] = "debug"
							self.help_mode()
				# END OF MOUSE
				
				
			if key in( "KEY_LEFT", chr(91), chr(34), "KEY_RIGHT", chr(93), chr(35), "KEY_IC"):
				
	
				if self.display["mode"] == "chat":
					joined = self.data["rooms"].keys()
					joined.sort()
					if not joined:
						return
					# Hotkeys to switch rooms
					if not self.Spl["room"] in joined:
						if key == "KEY_LEFT" or key == chr(91) or key == chr(34):
							ix = -1
						elif key == "KEY_RIGHT" or key == chr(93) or key == chr(35) or key == "KEY_IC":
							ix = 0
						
	
					else:
						ix = joined.index(self.Spl["room"])
						if key == "KEY_LEFT" or key == chr(91)  or key == chr(34):
							ix -= 1
						elif key == "KEY_RIGHT" or key == chr(93) or key == chr(35) or key == "KEY_IC":
							ix += 1
						
						if ix < 0:
							ix = -1
						elif ix >= len(joined):
							ix = 0
					if ix != None:
						self.change_room(joined[ix])
						self.ticker_z = 0
						try:
							if mucous_config["tickers"]["ticker_cycle"] == "yes" and mucous_config["tickers"]["tickers_enabled"] == "yes":
								self.ticker_timer.cancel()
								self.ticker_timer = threading.Timer(3.0, self.ticker_display)
								self.ticker_timer.start()
						except:
							pass
							
				elif self.display["mode"] == "info":
					if len(self.activeitems["info"]) >= 1:
						if self.usernames["info"] == None:
							self.usernames["info"] = self.activeitems["info"][0]
						s = self.activeitems["info"].index(self.usernames["info"])
						self.usernames["info"] = self.activeitems["info"][s-1]
						#self.display_userinfo_log()
						self.info_mode()
				elif self.display["mode"] == "private":
					if self.usernames["private"] != None:
						if len(self.logs["private"].keys()) > 1:
							pmusers =  self.logs["private"].keys()
							pmusers.sort()
							s = pmusers.index(self.usernames["private"])
							self.usernames["private"] = pmusers[s-1]
							self.start_pm(self.usernames["private"])
							self.private_mode()
							
				elif self.display["mode"] == "setup":
					if self.display["setup"] == "mucous":
						self.display["setup"] = "museek"
					elif self.display["setup"] == "museek":
						self.display["setup"] = "shares"
					elif self.display["setup"] == "shares":
						self.display["setup"] = "userinfo"
					elif self.display["setup"] == "userinfo":
						self.display["setup"]="logs"
					elif self.display["setup"]=="logs":
						self.display["setup"] = "mucous"
					self.setup_mode()
					
				elif self.display["mode"] == "transfer":
					# Hotkeys to switch listing transfer types
					if self.display["transfer_sort"] == 'all':
						self.display["transfer_sort"] = 'active'
					elif self.display["transfer_sort"] == 'active':
						self.display["transfer_sort"] = 'queued'	
					elif self.display["transfer_sort"] == 'queued':
						self.display["transfer_sort"] = 'finished'
					elif self.display["transfer_sort"] == 'finished':
						self.display["transfer_sort"] = 'failed'
					elif self.display["transfer_sort"] == 'failed':
						self.display["transfer_sort"] = 'all'
	
					self.transfer_mode()
		
				elif self.display["mode"] == "search":
					if key in( "KEY_LEFT", chr(91), chr(34), "KEY_RIGHT", chr(93), chr(35)):
						if len(self.data["search_tickets"].keys()) >= 1:
						
							if self.Spl["current_search"] == "default__":
								self.Spl["current_search"] = self.data["search_tickets"].keys()[0]
							s = self.data["search_tickets"].keys().index(self.Spl["current_search"])
							self.Spl["current_search"] = self.data["search_tickets"].keys()[s-1]
							self.search_mode()
							
					if key == "KEY_IC":
						sf = self.Spl["search_order"]
						if sf == "num":
							self.Spl["search_order"] = "user"
						elif sf == "user":
							self.Spl["search_order"] = "free"
						elif sf == "free":
							self.Spl["search_order"] = "speed"
						elif sf == "speed":
							self.Spl["search_order"] = "que"
						elif sf == "que":
							self.Spl["search_order"] = "path"
						elif sf == "path":
							self.Spl["search_order"] = "size"
						elif sf == "size":
							self.Spl["search_order"] = "file"
						elif sf == "file":
							self.Spl["search_order"] = "bitrate"
						elif sf == "bitrate":
							self.Spl["search_order"] = "time"
						elif sf == "time":
							self.Spl["search_order"] = "num"

						self.search_sortbar()
						if self.Spl["current_search"]!= "default__":
							self.Format_Search_Results(self.Spl["current_search"])
						curses.doupdate()
					
				elif self.display["mode"] == "browse":
					if len(self.activeitems["browse"]) >= 1:
						if self.usernames["browse"] == "default__":
							self.usernames["browse"] = self.activeitems["browse"][0]
						s = self.activeitems["browse"].index(self.usernames["browse"])
						self.usernames["browse"] = self.activeitems["browse"][s-1]
						sdirs =  self.data["browse_results"][self.usernames["browse"]].keys()
						sdirs.sort()
						self.Spl["dir_browse"]=sdirs[0]
						
						self.browse_mode()
						
				elif self.display["mode"]=="lists":
					if self.display["list"]=="buddies":
						self.display["list"]="banned"
					elif self.display["list"]=="banned":
						self.display["list"]="ignored"
					elif self.display["list"]=="ignored":
						self.display["list"]="interests"
					elif self.display["list"]=="interests":
						self.display["list"]="buddies"
					self.list_mode()
					
				elif self.display["mode"]=="roomlist":
					if mucous_config["mucous"]["rooms_sort"] =="alpha":
						mucous_config["mucous"]["rooms_sort"] ="alpha-reversed"
					elif mucous_config["mucous"]["rooms_sort"] =="alpha-reversed":
						mucous_config["mucous"]["rooms_sort"] ="size"
					elif mucous_config["mucous"]["rooms_sort"] =="size":
						mucous_config["mucous"]["rooms_sort"] ="size-reversed"
					elif mucous_config["mucous"]["rooms_sort"] =="size-reversed":
						mucous_config["mucous"]["rooms_sort"] ="alpha"
					self.rooms_mode()
			
			if self.display["mode"] in ("chat", "lists", "transfer", "search", "browse") and self.Spl["show_menu"] == True:
				# POPUP menu up and down keys
				try:
					if self.Spl["current_menu"] == None:
							return
					if key == "menu_up":
						if self.Spl["menunumber"] >0:
							self.Spl["menunumber"] -= 1
							self.draw_menu(self.Spl["current_menu"])
							
					elif key == "menu_down":
						if self.Spl["menunumber"] < len(self.menus[self.Spl["current_menu"]]['items'])-1:
							self.Spl["menunumber"] += 1
							self.draw_menu(self.Spl["current_menu"])
				except Exception, e:
					pass
			
			return line
		except Exception, e:
			self.Hlog("debug", "Keypresses: " + str(e))
	# ---^  KEYS ^
	
	def display_status_log(self):
		try:
			if self.Spl["show_menu"] == True: raise  Exception,  "popup"
			s = self.windows["dimensions"]["chat"]
			if self.display["mode"] == "chat":
				if self.display["chatshape"] in ("nothing", "big", "small", "widelist", "rightlist", "noroombox"):
					self.logwin.erase()
					self.logwin.scrollok(1)
					self.logwin.idlok(1)
			
					if self.Spl["room"] != None:
						if len(self.logs["status"][self.Spl["room"]]) != 0:
							for i in range(len(self.logs["status"][self.Spl["room"]])):
								try:
									if i == 0:
										self.logwin.addstr(self.decode_language( self.logs["status"][self.Spl["room"]][i][1:] ))
									else:
										self.logwin.addstr(self.decode_language( self.logs["status"][self.Spl["room"]][i] ))
								except:
									pass
					
					self.logwin.noutrefresh()
		except Exception, e:
			#self.Hlog("debug", e)
			pass
									
	def now_playing(self):
		try:
			if "now-playing" in mucous_config["mucous"].keys():
				if mucous_config["mucous"]["now-playing"] == "default":
					p = "/tmp/xmms-info"
					if os.path.exists(p):
						fsock = open(p)
						for i in range(3):  s = fsock.readline()[8:-1]
						for i in range(10):  m = fsock.readline()[7:-1]
						if "now-playing-prefix" in mucous_config["mucous"].keys():
							if mucous_config["mucous"]["now-playing-prefix"] != 'None':
								message = ("%s %s") %(mucous_config["mucous"]["now-playing-prefix"], m)
							else:
								message ="Now %s: %s " % (s, m)
						else:
							message ="Now %s: %s " % (s, m)
						fsock.close()
						if self.display["mode"] == "chat":
							self.say_in_chat("chat", self.Spl["room"], message)
							#self.send(messages.SayRoom(self.Spl["room"], message))
						elif self.display["mode"] == "private":
							self.send_private_message(self.usernames["private"], message)
					else: self.Hlog("status", "WARNING: XMMS or BMP isn't running or the InfoPipe plugin isn't enabled")
				else:
					p = mucous_config["mucous"]["now-playing"]
					nowplaying = commands.getoutput(p)
					nowplaying = nowplaying.split('\n')
					nowplaying = nowplaying[0]
					if mucous_config["mucous"]["now-playing-prefix"] != None and mucous_config["mucous"]["now-playing-prefix"] != 'None':
						message = "%s %s" % (mucous_config["mucous"]["now-playing-prefix"], nowplaying)
						if self.display["mode"] == "chat" and self.Spl["room"] != None:
							self.say_in_chat("chat", self.Spl["room"], message)
							#self.send(messages.SayRoom(self.Spl["room"].decode(mucous_config["mucous"]["language"]),  message.decode(mucous_config["mucous"]["language"])) )
						elif self.display["mode"] == "private" and self.usernames["private"] != None:
							self.send_private_message(self.usernames["private"], message )
					else:
						message = nowplaying
						if self.display["mode"] == "chat" and self.Spl["room"] != None:
							self.say_in_chat("chat", self.Spl["room"], message)
							#self.send(messages.SayRoom(self.Spl["room"].decode(mucous_config["mucous"]["language"]),  message.decode(mucous_config["mucous"]["language"])) )
						elif self.display["mode"] == "private" and self.usernames["private"] != None:
							self.send_private_message(self.usernames["private"], message )
		except Exception, e:
			self.Hlog("debug", "now_playing " +str(e))
	# ---v  MODES v
	def showroomstatusbox(self, users, start):
		# RoomBox List Display
		try:
			w = self.windows["dimensions"]["roombox"]
			if self.Spl["room"] != None:
				if self.logs["roombox"][self.Spl["room"]] !=[]:
					#for users in self.logs["roombox"][self.Spl["room"]][self.boxstart:self.boxend]:
					try:
						#if users != self.logs["roombox"][self.Spl["room"]][0]:
						#	self.roomstatuswin.addstr('\n')
						if users in self.user["status"]:
							if self.user["status"][users] == 1:
								self.roomstatuswin.addstr('* ', self.colors["yellow"]|curses.A_BOLD)
							elif  self.user["status"][users] == 2:
								self.roomstatuswin.addstr('* ', self.colors["green"]|curses.A_BOLD)
							elif self.user["status"][users] == 0:
								self.roomstatuswin.addstr('* ', self.colors["red"]|curses.A_BOLD)
						else:
							self.roomstatuswin.addstr('* ', curses.A_BOLD)
							
						if users in self.config["banned"].keys():
							if self.scrolling["roombox"] == self.logs["roombox"][self.Spl["room"]].index(users):
								attrib = curses.A_BOLD | curses.A_REVERSE | self.colors["red"]
							else: attrib = self.colors["red"]
							
						elif users in self.config["ignored"].keys():
							if self.scrolling["roombox"] == self.logs["roombox"][self.Spl["room"]].index(users):
								attrib = curses.A_BOLD | curses.A_REVERSE | self.colors["yellow"]
							else: attrib = self.colors["yellow"]
							
						elif users in self.config["buddies"].keys():
							if self.scrolling["roombox"] == self.logs["roombox"][self.Spl["room"]].index(users):
								attrib = curses.A_BOLD | curses.A_REVERSE | self.colors["green"]
							else:
								attrib = self.colors["green"]
							
						else:
							if self.scrolling["roombox"] == self.logs["roombox"][self.Spl["room"]].index(users):
								attrib = curses.A_BOLD | curses.A_REVERSE 
							else:
								attrib = curses.A_NORMAL
						if len(users[:w["width"]-2]) < w["width"]-2:
							space = " " * ( w["width"]-2 - len(users[:w["width"]-2]))
						else: space =''
						self.roomstatuswin.addstr(self.decode_language(users[:w["width"]-2])+space, attrib)	
						
					except:
						pass
				else:
					self.roomstatuswin.addstr("No one")
		except Exception, e:
			self.Hlog("debug", "showroomstatusbox " +str(e))	
			
			
	def roomstatusbox(self):
		# RoomBox Shape Display
		try:
			if self.display["mode"]=='chat' and self.display["chatshape"] != "noroombox":
				if self.display["chatshape"] in ("big", "nostatuslog", "widelist", "rightlist"):
					w = self.windows["dimensions"]["chat"]
					if self.display["chatshape"] == "rightlist":
						s = self.windows["dimensions"]["roombox"] = {"height": self.h-7, "top": 2, "left": (4+w["width"])-1, "width": self.w-4-w["width"] }
					else:
						s = self.windows["dimensions"]["roombox"] = {"height": self.h-7, "top": 2, "left": 1, "width": self.w-4-w["width"] }
					#s = self.windows["dimensions"]["roombox"] = {"height": self.h-7, "top": 2, "left": 1, "width": 13}
					self.roomstatusborderwin = curses.newwin(s["height"]+2, s["width"]+2, s["top"]-1, s["left"]-1)
					if self.display["chat"] == "roombox":
						self.roomstatusborderwin.attron(self.colors["green"])
					self.roomstatusborderwin.border()
					self.roomstatusborderwin.attroff(self.colors["green"])
					self.roomstatuswin = self.roomstatusborderwin.subwin(s["height"], s["width"], s["top"], s["left"])
				elif self.display["chatshape"] == "small":
					s = self.windows["dimensions"]["roombox"] = {"height": 4, "top": 2, "left": 1,  "width": 13}
					self.roomstatusborderwin = curses.newwin(s["height"]+2, s["width"]+2, s["top"]-1, s["left"]-1)
					if self.display["chat"] == "roombox":
						self.roomstatusborderwin.attron(self.colors["green"])
					self.roomstatusborderwin.border()
					self.roomstatusborderwin.attroff(self.colors["green"])
					self.roomstatuswin = self.roomstatusborderwin.subwin(s["height"], s["width"], s["top"], s["left"])
					
				if self.display["chatshape"] in ("big", "small", "nostatuslog", "widelist", "rightlist"):
					self.roomstatuswin.scrollok(0)
					self.roomstatuswin.idlok(1)
				
	
					if self.Spl["room"] != None:
						try:
							if self.display["chat"] == "roombox":
								
								self.roomstatusborderwin.addstr(0, 1, "<           >", self.colors["green"])
								self.roomstatusborderwin.addstr(0, 2, "Users: "+str(len(self.data["rooms"][self.Spl["room"]])), self.colors["green"]|curses.A_BOLD)
							else:
								self.roomstatusborderwin.addstr(0, 1, "<           >")
								self.roomstatusborderwin.addstr(0, 2, "Users: "+str(len(self.data["rooms"][self.Spl["room"]])),  curses.A_BOLD)
							
						except:
							pass
						
						if self.Spl["room"] in self.config["autojoin"].keys():
							try:
								self.roomstatusborderwin.addstr(self.windows["dimensions"]["roombox"]["height"]+1, 2, "Auto-Joined",  curses.A_BOLD)
							except Exception, e:
								self.Hlog("debug", "AutoJoined: " + str(e))
					self.roomstatusborderwin.noutrefresh()
				
					if self.Spl["room"] != None:
						self.logs["roombox"][self.Spl["room"]] = []
						if len( self.data["rooms"][self.Spl["room"]] ) > 0:
							self.logs["roombox"][self.Spl["room"]] = self.data["rooms"][self.Spl["room"]]
							self.logs["roombox"][self.Spl["room"]].sort()
					
						try:
							if self.logs["roombox"][self.Spl["room"]] != []:
								#if self.display["chatshape"] in  ("big", "nostatuslog"):
									#self.roomstatuswin.erase()
								clipped_list, self.scrolling["roombox"], self.windows["dimensions"]["roombox"]["start"] = self.scrollbox(self.logs["roombox"][self.Spl["room"]], self.scrolling["roombox"], self.windows["dimensions"]["roombox"]["height"])
									
								self.chat_roombox_display()
								#for lines in clipped_list:
								#	self.showroomstatusbox(lines, self.windows["dimensions"]["roombox"]["start"])
							else:
								self.roomstatuswin.addstr("* Empty")
								self.roomstatuswin.noutrefresh()
						except Exception, e:
							self.Hlog("debug", "RSB: " + str(e))
				#curses.doupdate()
		except Exception, e:
			self.Hlog("debug", "roomstatusbox " +str(e))
			
	def chat_mode(self):
		try:
			self.display["mode"] = "chat"
			self.Spl["show_menu"] = False
			
			# Arrangements: 
			cs = None
			if self.display["chatshape"] == "big":
				w = self.windows["dimensions"]["chat"] = {"height": self.h-13, "width": self.w-17, "top": 8, "left": 16}
				cs = self.windows["dimensions"]["roomstatus"] = {"height": 6, "width": w["width"]+2, "top": 1, "left": w["left"]-1}
			elif self.display["chatshape"] == "widelist":
				w = self.windows["dimensions"]["chat"] = {"height": self.h-13, "width": self.w-27, "top": 8, "left": 26}
				cs = self.windows["dimensions"]["roomstatus"] = {"height": 6, "width": w["width"]+2, "top": 1, "left": w["left"]-1}
			elif self.display["chatshape"] in ("noroombox", "small"):
				w = self.windows["dimensions"]["chat"] = {"height": self.h-13, "width": self.w-2, "top": 8, "left": 1}
				if self.display["chatshape"] in ("noroombox"):
					cs = self.windows["dimensions"]["roomstatus"] = {"height": 6, "width": w["width"]+2, "top": 1, "left": 0}
					#cs["height"]-2, cs["width"]-1, cs["top"]+1,cs["left"]+1
					#self.logwin = self.borderlogwin.subwin(4, cs["width"], 2, 1)
				elif self.display["chatshape"] in ("small"):
					cs = self.windows["dimensions"]["roomstatus"] = {"height": 6, "width": w["width"]+2, "top": 1, "left": 15}
			elif self.display["chatshape"] == "rightlist":
				w = self.windows["dimensions"]["chat"] = {"height": self.h-13, "width": self.w-17, "top": 8, "left": 1}
				cs = self.windows["dimensions"]["roomstatus"] = {"height": 6, "width": w["width"]+2, "top": 1, "left": 0}
			elif self.display["chatshape"] == "nostatuslog":
				w = self.windows["dimensions"]["chat"] = {"height": self.h-7, "width": self.w-17, "top": 2, "left": 16}
			elif self.display["chatshape"] == "chat-only":
				w = self.windows["dimensions"]["chat"] = {"height": self.h-7, "width": self.w-2, "top": 2, "left": 1}
			
			if cs != None:
				self.borderlogwin = curses.newwin(cs["height"], cs["width"], cs["top"], cs["left"])
				self.logwin = self.borderlogwin.subwin(cs["height"]-2, cs["width"]-2, cs["top"]+1,cs["left"]+1)
					
			self.windows["dimensions"]["chat"]["start"] = 0
			try:
				mw = self.windows["border"]["chat"] = curses.newwin(w["height"]+2, w["width"]+2, w["top"]-1, w["left"]-1)
				if self.usernames["username"] == None:
					mw.border()
					mw.noutrefresh()
					
				tw =self.windows["text"]["chat"] = self.windows["border"]["chat"].subwin(w["height"], w["width"], w["top"], w["left"])
			except Exception, e:
				self.Hlog("debug", "Chat Mode: " + str(e))
	
			
			tw.scrollok(0)
			tw.idlok(1)
	
# 			if self.display["chat"] != "roombox":
# 				self.scrolling["chatroom"] = -1
			if self.logs["alert"] in ( "New Chat", "Nick Mention"):
				self.alert_status("")	
		
			
			
			
			if self.Spl["room"] != None:
				self.set_room(self.Spl["room"])
			else:
				
				self.drawchatwindow()
				tw.noutrefresh()
				self.set_edit_title("Join a Room")
				self.roomstatusbox()
				self.hotkeys()
			
			if mucous_config["tickers"]["ticker_cycle"] == "yes" and mucous_config["tickers"]["tickers_enabled"] == "yes":
				if self.data["rooms"].keys() != []:
					self.ticker_z = 0
					self.ticker_timer.cancel()
					self.ticker_timer = threading.Timer(3.0, self.ticker_display)
					self.ticker_timer.start()
			curses.doupdate()
		except Exception, e:
			self.Hlog("debug", "chat_mode: " + str(e))
			
	def chat_roombox_display(self):
		try:
			w = self.windows["dimensions"]["roombox"]
			lol = self.logs["roombox"][self.Spl["room"]]
			self.roomstatuswin.erase()
			clipped_list, self.scrolling["roombox"], self.windows["dimensions"]["roombox"]["start"] = self.scrollbox(lol, self.scrolling["roombox"], w["height"])
			for lines in clipped_list:
				self.showroomstatusbox(lines, w["start"])
			self.roomstatuswin.noutrefresh()
		except Exception, e:
			self.Hlog("debug", "chat_roombox_display: " + str(e))
			
	def chat_display(self):
		try:
			w = self.windows["dimensions"]["chat"]
			selected_log = self.logs["rooms"][self.Spl["room"]]
			lol = self.wrap_chat_text(selected_log, w)
			
			if self.display["chat"] == "chatroom":
# 				self.scrolling["chatroom"] =  len(lol)
# 			else:
				if self.scrolling["chatroom"] == -1:
					self.scrolling["chatroom"] = len(lol)

			clipped_list, self.scrolling["chatroom"], self.windows["dimensions"]["chat"]["start"] = self.scrollbox(lol, self.scrolling["chatroom"], w["height"])
			#self.wrap_chat_text(log_scroll[start:end], 0)
			
			self.windows["text"]["chat"].erase()
			for lines in clipped_list:
				#lines, ls = self.string_add_blanks(lines, w)
				self.display_room_text(lines)
	
			self.drawchatwindow()
			self.windows["text"]["chat"].noutrefresh()
		except Exception, e:
			self.Hlog("debug", "chat_display: " + str(e))
			
	def wrap_chat_text(self, the_list, w):
		# we wrap text here so that scrolling works properly... (it never does) *sigh*
		try:
			pos = 0
			cut_list = []
			for mtype, timestamp, username, message in the_list:
				length = 0
				#mtype, timestamp, username, message = line[0], line[1], line[2], line[3]
				if mtype == "Me":
					#username = self.decode_language(username)
					pre = " * %s " % username
					s = "%s" % self.decode_language(message)
					length += len(timestamp) + len(pre)
# 				elif mtype == "List":
# 					room = self.Spl["room"]
# 					pre = "Users in %s: "% room
# 					length +=  len(pre)
# 					for user, color in message:
# 						length += len(self.decode_language(user))
				elif mtype in ("Mentioned", "Normal", "Status"):
					if username != "": # Universal Timestamp
						if mtype == "Status": # Mucous debugging message
							length += len(timestamp) + 2
						else: # Normal user chat
							length += len(timestamp) + 4
						
						#length += len(self.decode_language(username))
						length += len(username)
		
				if "\n" in message:
					
					messagez = message.split('\n')
					# Wrap first line
					firstmsg = messagez[0]
					wit =  len(timestamp) + 4 + len(username)
					lm = len(firstmsg)
					mess = lm - ( (wit + lm ) - w["width"])
					cut_list.append( [ mtype, timestamp, username, firstmsg[:mess] ] )
					restmess = firstmsg[mess:]
					div = ( len(restmess)/w["width"] ) + 1
					spaces= (w["width"] * div) -  len(restmess)
					for seq in range(div):
						if mtype == "Me":
							cut_list.append(['cutme', '', '', restmess[:w["width"]] ])
						else:
							cut_list.append(['cut', '', '', restmess[:w["width"]] ])
						restmess = restmess[w["width"]:]

					# Prepend -- to all following lines
					m = []
					for messages in messagez[1:]:
						m.append("--"+messages)
					# Wrap each of the following lines
					for messages in m:
						lm = len(messages)
						restmess = messages
						div = ( len(restmess)/w["width"] ) + 1
						spaces= (w["width"] * div) -  len(restmess)
						for seq in range(div):
							if mtype == "Me":
								cut_list.append(['cutme', '', '', restmess[:w["width"]] ])
							else:
								cut_list.append(['cut', '', '', restmess[:w["width"]] ])
							restmess = restmess[w["width"]:]
					pos += 1
					continue	
							
					# Short message
				if length +len(message) <= w["width"]:
					cut_list.append([mtype, timestamp, username, message])
					
					# long message
				elif length +len(message) > w["width"]:
					lm = len(message)
					mess = lm - ( (length + lm ) - w["width"])
					cut_list.append( [ mtype, timestamp, username, message[:mess] ] )
					restmess = message[mess:]
					div = ( len(restmess)/w["width"] ) + 1
					spaces= (w["width"] * div) -  len(restmess)
					for seq in range(div):
						#self.Hlog("debug", str(div)+"--" + restmess[:w["width"]] )
						if mtype == "Me":
							cut_list.append(['cutme', '', '', restmess[:w["width"]] ])
						else:
							cut_list.append(['cut', '', '', restmess[:w["width"]] ])
						restmess = restmess[w["width"]:]
 						
				pos += 1
			return cut_list
		except Exception, e:
			# Exceptions are Inevitable
			self.Hlog("debug", "wrap_chat_text: " + str(e))
			
	def display_room_text(self, roomlinenumber):
		try:
			room = self.Spl["room"]
			mtype, timestamp, username, message = roomlinenumber[0],   roomlinenumber[1], roomlinenumber[2], roomlinenumber[3]
			lang = mucous_config["mucous"]["language"]
			w = self.windows["dimensions"]["chat"]
			room = self.decode_language(room)
			length = 0
			tw = self.windows["text"]["chat"]
			try:
				if mtype == "Me":
					# /me message
					
					tw.addstr(timestamp)
					username = self.decode_language(username)
					pre = " * %s " % username
					tw.addstr(pre, self.colors["green"] | curses.A_BOLD)
					s = "%s" % self.decode_language(message)
					tw.addstr(s, self.colors["green"] | curses.A_BOLD)
					length += len(timestamp) + len(pre)+ len(s)
				elif mtype == "List":
					# List of users in Room
					
					pre = "Users in %s: "% room
					self.textwi/n.addstr(pre)
					length +=  len(pre)
					for username, color in message:
						username = self.decode_language(username)
						length += len(username)
						if color == "Me":
							tw.addstr(username, curses.A_BOLD)
						elif color == "Left":
							tw.addstr(username, self.colors["yellow"])
						elif color == "Banned":
							tw.addstr(username, self.colors["red"])
						elif color == "Buddies":
							tw.addstr(username, self.colors["green"])
						elif color == "NotLast":
							tw.addstr(username)
						elif color == "Normal":
							tw.addstr(username)
							
				elif mtype == "cut":
					s = self.decode_language(message) 
					tw.addstr(s)
					length += len(s)
				elif mtype == "cutme":
					s = self.decode_language(message) 
					tw.addstr(s, self.colors["green"] | curses.A_BOLD)
					length += len(s)
				else:
					if username != "":
						# Universal Timestamp
						tw.addstr(timestamp)
						if mtype == "Status":
							# Mucous debugging message
							pre = " "
							tw.addstr(pre)
							
						else:
							# Normal user chat
							pre = " ["
							tw.addstr(pre, curses.A_BOLD | self.colors["black"])
					length += len(timestamp) + len(pre)
					
					name = self.decode_language(username)
					if username == self.usernames["username"]:
						tw.addstr(username ,  curses.A_BOLD )
					elif username not in self.data["rooms"][room]:
						tw.addstr(name, self.colors["yellow"])
					elif username in self.config["banned"].keys():
						tw.addstr(name, self.colors["red"])
					elif username in self.config["buddies"].keys():
						tw.addstr(name, self.colors["green"])
					else:
						tw.addstr(name)
					length += len(name)
					
					if username != "":
						if mtype == "Status":
							suf = " "
							tw.addstr(" ")
						else:
							suf = "] "
							tw.addstr(suf, curses.A_BOLD | self.colors["black"])
					length += len(suf)
					if mtype == "Mentioned":
						x = message.split(" ")
						for e in x:
							e = self.decode_language(e)
							
							if self.usernames["username"] not in e:
								tw.addstr(e)
								length += len(e)
							elif self.usernames["username"] in e:
								tw.addstr(e, self.colors["cyan"] | curses.A_BOLD)
								length += len(e)
							if e is not  x[-1]:
								if length < w["width"]:
									tw.addstr(" ")
									length +=  1
					elif mtype == "Normal":
						s = self.decode_language(message) 
						tw.addstr(s)
						length += len(s)
					elif mtype == "Status":
						s = self.decode_language(message) 
						tw.addstr(s)
						length += len(s)
				if length < w["width"]:
					tw.addstr(" " * (w["width"] - length))
	
			except Exception, e:
				pass
				# Exceptions are Inevitable
				#self.Hlog("debug", "display room text: " + str(e))
		except Exception, e:
			self.Hlog("debug", "display_room_text: " + str(e))
		
	def decode_language(self, string):
		try:
			string = string.decode(mucous_config["mucous"]["language"], "replace" ).encode(mucous_config["mucous"]["language"], "replace").encode(mucous_config["mucous"]["language"], "replace")
			
		except:
			pass
		return string

			
	def add_logs_to_private(self, username):
		try:
			if "\\" in username: username = username.replace("/", "\\")
			if os.path.exists(os.path.expanduser(mucous_config["mucous"]["log_dir"])+"/private"+"/"+username):
				path = os.path.expanduser(mucous_config["mucous"]["log_dir"])+"/private"+"/"+username
				f = open(path, "r")
				a = f.read()
				f.close()
				z = a.split("\n" )
				for x in z[-10:]:
					if x == "":
						continue
					timex = x[12:20]
					user = x[22:]
					if x.find("\t") == -1:
						# old format
						user = user[:user.find("]")]
						message = x[21+len(user)+3:]
					else:
						# new format with Tab
						user = user[:user.find("\t")-1]
						message = x[x.find("\t")+1:]
						
					full_message = "%s * %s %s" % ( timex, user, message)
					self.logs["private"][username].append(full_message)
				self.logs["private"][username].append("------ Old Chat Above ------")
		except Exception,e:
			self.Hlog("debug", "add_logs_to_private: " +str( e) )
			
	def add_logs_to_chat(self, room):
		try:
			if "\\" in room: room = room.replace("/", "\\")
			if os.path.exists(os.path.expanduser(mucous_config["mucous"]["log_dir"])+"/rooms/"+room):
				path = os.path.expanduser(mucous_config["mucous"]["log_dir"])+"/rooms/"+room
				f = open(path, "r")
				a = f.read()
				f.close()
				z = a.split("\n" )
				for x in z[-30:]:
					if x == "":
						continue
					timex = x[12:20]
					if x[21] == "[":
						user = x[22:]
						if x.find("\t") == -1:
						# old format
							user = user[:user.find("]")]
							message = x[21+len(user)+3:]
						else:
							# new format with Tab
							user = user[:user.find("\t")-1]
							message = x[x.find("\t")+1:]
					else:
						user = x[21:]
						user = user[:user.find(" ")]
						message = x[21+len(user)+1:]
						
					
					if message[:4] == "/me ": 
						full_message = ["Me", timex, user, message[4:]]
					else:
						full_message = ["Normal", timex, user, message]
					self.logs["rooms"][room].append(full_message)
				self.logs["rooms"][room].append(["Status", "--------", "!!!!", "Connected to Museek"])
			
		except Exception,e:
			self.Hlog("debug", "add_logs_to_chat: " +str( e) )


	def dencode_language(self, string):
		try:
			string = string.decode(mucous_config["mucous"]["language"]).decode(mucous_config["mucous"]["language"]).encode(mucous_config["mucous"]["language"])
		except:
			pass
		return string
	
	def encode_language(self, string):
		try:
			string = string.encode(mucous_config["mucous"]["language"])
		except:
			pass
		return string
	
	# Change Room Title
	def change_room(self, r):
		self.scrolling["chatroom"] = -1
		self.scrolling["roombox"] = 0
		self.set_room(r)
		
	def set_room(self, r):
		try:
			self.Spl["room"] = r
			self.Spl["selected"] = r
			self.Spl["title"]= r
			
			if self.display["mode"] == "chat":
				
				
				
				# Change title in edit window
				
				if self.display["chatshape"] not in ("chat-only", "nostatuslog"):
					self.display_status_log_border()
					self.display_status_log()
				self.windows["border"]["input"].erase()
				self.set_edit_title(self.Spl["room"])
				# Display Next-room hotspot's text
				try:
					# Encoding
					if self.Spl["room"] in self.config["encoding.rooms"]:
						blah = self.config["encoding.rooms"][self.Spl["room"]]
					else:
						blah = self.config["encoding"]["network"]
					
					self.windows["border"]["input"].addstr(0, self.w-17-len(blah)-4, "<" + (" " *( len(blah) +2) )+  ">")
					self.windows["border"]["input"].addstr(0, self.w-17-len(blah)-2, blah, self.colors["cyan"] | curses.A_BOLD)
					# Previous, Next Buttons
					self.windows["border"]["input"].addstr(0, self.w-17, "<      >")
					self.windows["border"]["input"].addstr(0, self.w-15, "Prev", self.colors["cyan"] | curses.A_BOLD)
					self.windows["border"]["input"].addstr(0, self.w-9, "<      >")
					self.windows["border"]["input"].addstr(0, self.w-7,"Next", self.colors["cyan"] | curses.A_BOLD)
	
					# Clean screen
					self.windows["border"]["input"].noutrefresh()
				except:
					pass
				
				try:
					self.windows["text"]["input"].noutrefresh()
				except:
					pass
				self.roomstatusbox()
				
				# Display chat log
				try:
					if self.display["chat"] == "chatroom":
						self.windows["border"]["chat"].attron(self.colors["green"])
					else:
						self.windows["border"]["chat"].attroff(self.colors["green"])
	#				self.drawchatwindow()
				except:
					pass
				if self.Spl["room"] != None:
					#self.wrap_chat_text(self.logs["rooms"][self.Spl["room"]], 1)
					self.chat_display()
					
				# Clear Alert log
				if "%s" % self.Spl["room"] == self.logs["alert"]:
					self.alert_status("")
				
							
			try:
				self.windows["text"]["chat"].noutrefresh()
			except:
				pass
			
			self.check_alert_state()
		except Exception, e:
			self.Hlog("debug", "set_room: " + str(e))
			
	def set_edit_title(self, room):
		try:
			self.Spl["title"]= room
			self.windows["border"]["input"].erase()
			self.windows["border"]["input"].border()
			if self.Spl["title"]:
				try:
					current = self.decode_language(self.Spl["title"])
					self.windows["border"]["input"].addstr(0, 2, "< ")
					self.windows["border"]["input"].addstr(0, 4, current[:self.w-8], self.colors["cyan"] | curses.A_BOLD)
					self.windows["border"]["input"].addstr(0, 4+len(current[:self.w-8]), " >")
				except Exception, e:
					self.Hlog("debug", "set_edit_title: " + str(e))
			try:
				self.windows["border"]["input"].noutrefresh()
				self.windows["text"]["input"].erase()
				self.windows["text"]["input"].addstr(self.line)
				self.windows["text"]["input"].noutrefresh()
			except:
				pass
		except Exception, e:
			self.Hlog("debug", "set_edit_title: " + str(e))
			
	def display_list_text(self, line, count, window):
		try:
			if self.display["mode"] == "lists":
				start = self.windows["dimensions"][window]["start"]
				tw = self.windows["text"][self.display["list"]]
				linenumber = line
				mtype = linenumber[0]
				username = linenumber[1]
				note = linenumber[2]
				
				tabbeduser = self.decode_language(username[:20])
	
				while len(tabbeduser) < 24:
					tabbeduser += ' '
				try:
					if username in self.user["status"].keys():
						if self.user["status"][username] == 1:
							tw.addstr('* ', self.colors["yellow"]|curses.A_BOLD)
						elif self.user["status"][username] == 2:
							tw.addstr('* ', self.colors["green"]|curses.A_BOLD)
						elif self.user["status"][username] == 0:
							tw.addstr('* ', self.colors["red"]|curses.A_BOLD)
					else: 
						tw.addstr('* ')	
					pos = 2
					
					if self.display["list"] == "buddies":
						try:
							
							if mtype == 'Banned':
								color = curses.color_pair(1)
							elif mtype == 'Ignored':
								color = curses.color_pair(2)
							elif mtype == 'Normal':
								color = self.colors["green"]
							else:
								color = curses.A_NORMAL
							
						except Exception, e:
							self.Hlog("debug", "display list text" + str(e))
							pass
								
					elif self.display["list"] == "banned":
						
						try:
							if mtype == 'Buddies':
								color = self.colors["green"]
							elif mtype == 'Ignored':
								color = curses.color_pair(2)
							elif mtype == 'Normal':
								color = curses.color_pair(1)
							else:
								color = curses.A_NORMAL
	
						except:
							self.Hlog("debug", "display list text" + str(e))
							
							
					elif self.display["list"] == "ignored":
						try:
							if mtype == 'Buddies':
								color = self.colors["green"]
							elif mtype == 'Banned':
								color = self.colors["red"]
							elif mtype == 'Normal':
								color = self.colors["yellow"]
							else:
								color = curses.A_NORMAL
						except Exception, e:
							self.Hlog("debug", "display list text" + str(e))
					#else:
						#tw.addstr(tabbeduser)
						#stats = note = ''
						
					if count + start == self.scrolling[self.display["list"]]:
						attrib = curses.A_BOLD | curses.A_REVERSE | color
						attrib2 = curses.A_BOLD | curses.A_REVERSE 
					else:
						attrib = curses.A_BOLD | color
						attrib2 = curses.A_BOLD 
						
					tw.addstr(tabbeduser, attrib)
								
					if username in self.user["statistics"]:
						stats = " %sKB/s" % str(self.user["statistics"][username][0]/1024)
						while len(stats) < 9:
							stats += " "
						files = str(self.user["statistics"][username][2])
						while len(files) < 7:
							files = " " + files
						stats += files
						while len(stats) < 18:
							stats += " "
						tw.addstr( stats, attrib2)
					else:
						stats  = " 0KB/s         0  "
						tw.addstr(stats, attrib2)
						
					width = len(tabbeduser) + len(stats) + len(note) + 5
					subtract = self.w - width
					if subtract < 0:
						tw.addstr(note[:len(note)+subtract], attrib2)
					else:
						tw.addstr(note, attrib2)
						
						
					pos += len(tabbeduser) + len(stats) + len(note)
					if self.windows["dimensions"][window]["width"] - pos > 0:
						spaces = " " * (self.windows["dimensions"][window]["width"] - pos)
						tw.addstr(spaces, attrib2)
				except Exception, e:
					pass
					#self.Hlog("debug", "DLT"+str(e))
		except Exception, e:
			self.Hlog("debug", "display_list_text: " + str(e))

		
	def drawchatwindow(self):
		try:
			s = self.windows["dimensions"]["chat"]
			mw = self.windows["border"]["chat"]
			if self.display["chat"] != "roombox":
				mw.attron(self.colors["green"])
				mw.border()
				mw.addstr(0, 0, "Oo",  self.colors["green"] | curses.A_BOLD)
				mw.addstr(0, 3, "< Chat Rooms >",  self.colors["green"] | curses.A_BOLD)
				mw.addstr(1, s["width"]+1, "^",  self.colors["green"] | curses.A_BOLD)
				mw.addstr(s["height"], s["width"]+1, "v",  self.colors["green"] | curses.A_BOLD)
				
				mw.addstr(s["height"]+1, 2, "< "+str(abs(self.scrolling["chatroom"]))+" >", self.colors["green"] | curses.A_BOLD)
# 				self.Hlog("debug", "rR")
				if self.Spl["room"] != None:
					if len(self.logs["rooms"][self.Spl["room"]]) -1 <= abs(self.scrolling["chatroom"]):
						mw.addstr(s["height"]+1, 10, "< AutoScrolling >", self.colors["green"] | curses.A_BOLD)
				
			else:
				mw.border()
				mw.addstr(0, 0, "Oo", curses.A_BOLD)
				mw.addstr(0, 3, "< Chat Rooms >",   curses.A_BOLD)
				mw.addstr(1, s["width"]+1, "^",  curses.A_BOLD)
				mw.addstr(s["height"], s["width"]+1, "v",  curses.A_BOLD)
# 				mw.addstr(s["height"]+1, 2, "< "+str(abs(self.scrolling["chatroom"]))+" >", curses.A_BOLD)
			mw.noutrefresh()
			
		except Exception,e :
			self.Hlog("debug", "display chat window: " + str(e))
			
	def say(self, mtype, room, user, message):
		try:
			if room == None:
				room = self.Spl["room"]
			full_message = [mtype, time.strftime("%H:%M:%S"), user, message]
			if len( self.logs["rooms"][room] ) >= 700:
				del self.logs["rooms"][room][0]
			oldlen = len(self.logs["rooms"][room])
			self.logs["rooms"][room].append(full_message)
				
			if self.display["mode"] == "chat":
				if room == self.Spl["room"] and self.display["chat"] == "chatroom":
					if self.scrolling["chatroom"] >= oldlen -1:
						self.scrolling["chatroom"] = -1
						self.chat_display()
				elif room == self.Spl["room"] and self.display["chat"] == "roombox":
					temp = self.scrolling["chatroom"]
					self.scrolling["chatroom"] = -1
					self.chat_display()
					self.scrolling["chatroom"] = temp
		except Exception,e :
			self.Hlog("debug", "say: " + str(e))


	def display_status_log_border(self):
		try:
			w = self.windows["dimensions"]["chat"]
			if self.Spl["show_menu"] == True: raise  Exception,  "popup"

			if self.display["chatshape"] in ("noroombox", "big", "small", "rightlist", "widelist"):
				self.borderlogwin.border()
				self.borderlogwin.addstr(0, 3, "<")
				self.borderlogwin.addstr(0, 4, " Status Log ", self.colors["blue"] | curses.A_BOLD)
				self.borderlogwin.addstr(0, 16, ">")
				self.borderlogwin.noutrefresh()
		except:
			pass
		
	def chat_room_cycle(self):
		try:
			if self.display["chatshape"] == "noroombox":
				self.display["chatshape"] = "small"
				self.display["chat"]  = "roombox"
			elif self.display["chatshape"] == "small":
				self.display["chatshape"] = "big"
				self.display["chat"]  = "roombox"
			elif self.display["chatshape"] == "big":
				self.display["chatshape"] = "widelist"
				self.display["chat"]  = "roombox"
			elif self.display["chatshape"] == "widelist":
				self.display["chatshape"] = "rightlist"
				self.display["chat"]  = "roombox"
			elif self.display["chatshape"] == "rightlist":
				self.display["chatshape"] = "nostatuslog"
				self.display["chat"]  = "chatroom"
			elif self.display["chatshape"] == "nostatuslog":	
				self.display["chatshape"] = "chat-only"
				self.display["chat"]  = "chatroom"
			elif self.display["chatshape"] == "chat-only":
				self.display["chatshape"] = "noroombox"
				self.display["chat"]  = "chatroom"
				
			mucous_config["mucous"]["roombox"] = self.display["chatshape"]
			self.chat_mode()
		except Exception, e:
			self.Hlog("debug", "chat_room_cycle: " + str(e))

			
	def private_mode(self):
		self.display["mode"] = "private"
		self.Spl["show_menu"] = False
		try:
			w = self.windows["dimensions"]["private"] = {"height": self.h-10, "width": self.w-2, "top": 5, "left": 1}
			mw = self.windows["border"]["private"] = curses.newwin(w["height"]+2,w["width"]+2, w["top"]-1, w["left"]-1)
			
			if self.usernames["private"] != None:
				mw.attron(self.colors["green"])
				attr = self.colors["green"]
			else:
				attr = curses.A_NORMAL
			mw.border()
			try:
				mw.addstr(0, 3, "< ", attr)
				if self.usernames["private"] == None:
					mw.addstr(0, 5, "Private Chat",  self.colors["green"] | curses.A_BOLD)
					mw.addstr(0, 17, " >", attr)
				else:
					mw.addstr(0, 5, "Private Chat with %s" % self.usernames["private"],  self.colors["green"] | curses.A_BOLD)
					mw.addstr(0, 23+len(self.usernames["private"]), " >", attr)
				mw.refresh()
			except:
				pass
			tw =  self.windows["text"]["private"] = mw.subwin(w["height"], w["width"], w["top"], w["left"])
			
			tw.scrollok(0)
			tw.idlok(1)
			
			self.scrolling["private"] = -1 
			self.private_display()
			if self.usernames["private"] != None:
				self.Spl["selected"] = self.usernames["private"]
				self.set_edit_title("Send message to: " + self.usernames["private"])
				try:
					if self.usernames["private"] in self.config["encoding.users"]:
						blah = self.config["encoding.users"][self.usernames["private"]]
					else:
						blah = self.config["encoding"]["network"]
					
					self.windows["border"]["input"].addstr(0, self.w-17-len(blah)-4, "<" + (" " *( len(blah) +2) )+  ">")
					self.windows["border"]["input"].addstr(0, self.w-17-len(blah)-2, blah, self.colors["cyan"] | curses.A_BOLD)
					self.windows["border"]["input"].addstr(0, self.w-10, "< ")
					self.windows["border"]["input"].addstr(0, self.w-8, "Close ", self.colors["cyan"] | curses.A_BOLD)
					self.windows["border"]["input"].addstr(0, self.w-2, ">")
				except:
					pass
 				self.windows["border"]["input"].noutrefresh()
				self.windows["text"]["input"].noutrefresh()
				self.check_alert_state()
	
			else:
				self.set_edit_title("Set a user to Private Message")
				self.hotkeys()
	
			if self.logs["alert"] == "New PM" or self.logs["alert"][:5] =="PM: ":
				self.alert_status("")
			pmusers = self.logs["private"].keys()
			pmusers.sort()
			self.select_tab_box(pmusers, self.usernames["private"])
			
			
		except Exception, e:
			self.Hlog("debug", "private_mode" +str(e))
		curses.doupdate()
		
	def wrap_n_clip(self, the_list, w, scrolltext):
		try:
			wrapped_lines = []
			for lines in the_list:
				#lines = str(lines)
				lines1 = ""
				for a in lines:
					if curses.ascii.isctrl(a):
						a = curses.ascii.unctrl(a)
					lines1 += a
					#lines = lines.replace("^A", "\^A")
					#self.Hlog("debug", lines +" "+ str(len(lines))+curses.ascii.ctrl("a"))
				list_of_strings = self.string_cut_width(lines1, w)
				for string in list_of_strings:
					wrapped_lines.append(string)
			if self.scrolling[scrolltext] == -1:
				self.scrolling[scrolltext] = len(wrapped_lines)
			clipped_list, self.scrolling[scrolltext], w["start"] = self.scrollbox(wrapped_lines, self.scrolling[scrolltext], w["height"])
			return clipped_list, self.scrolling[scrolltext], w["start"]
		except Exception, e:
			self.Hlog("debug", "wrap_n_clip " +str(e))
	
	
	def private_display(self):
		try:
			scrolltext = "private"
			w = self.windows["dimensions"]["private"]
			tw = self.windows["text"]["private"]
			tw.erase()
			if self.usernames["private"] != None:
				# Private chat log
				if self.usernames["private"] in self.logs["private"]:
					clipped_list, self.scrolling["private"], w["start"] = self.wrap_n_clip( self.logs["private"][self.usernames["private"]], w, scrolltext )
					
					attrs = curses.A_BOLD #| curses.A_UNDERLINE
					attr = curses.A_NORMAL
					count = 0
					for lines in clipped_list:
						try:
							lines, ls = self.string_add_blanks(lines, w)
							if count + w["start"] == self.scrolling["private"]:
								tw.addstr(self.decode_language(lines), attrs)
							else:
								tw.addstr(self.decode_language(lines), attr)
							count += 1
						except Exception, e:
							#self.Hlog("debug", "private display: " + str(e))
							pass
			else:
				# Instructions
				for lines in self.pminfolog:
					try:
						lines, ls = self.string_add_blanks(lines, w)
						tw.addstr(self.decode_language(lines))
					except Exception, e:
						self.Hlog("debug", "private display: " + str(e))
					
			tw.noutrefresh()
		except Exception, e:
			self.Hlog("debug", "private_display: " + str(e))
			
	def process_list_window(self, window):
		try:
			
			
			if self.display["mode"] ==  "roomlist":
				s = self.windows["dimensions"][window]
				mw = self.windows["border"]["roomlist"] = curses.newwin(s["height"]+2, s["width"]+2, s["top"]-1, s["left"]-1)
				mw.attron(self.colors["green"])
				mw.border()
				mw.attroff(self.colors["green"])
			elif self.display["mode"] == "lists":
				s = self.windows["dimensions"][self.display["list"]]
				mw = self.windows["border"][self.display["list"]] = curses.newwin(s["height"]+2, s["width"]+2, s["top"]-1, s["left"]-1)
				mw.attron(self.colors["green"])
				mw.border()
				mw.attroff(self.colors["green"])
				
			if self.display["mode"] == "transfer":
				s = self.windows["dimensions"][window]
				if window == "uploads":
					win = self.transwin2 = curses.newwin(s["height"]+2, s["width"]+2, s["top"]-1, s["left"]-1)
				elif window == "downloads":
					win = self.transwin = curses.newwin(s["height"]+2, s["width"]+2, s["top"]-1, s["left"]-1)
				
				if mucous_config["mucous"]["transbox"] == "tabbed":
					win.attron(self.colors["green"])
					win.border()
					if window == "uploads":
						win.addstr(0, 3, "< Uploading Transfers >",  self.colors["green"] | curses.A_BOLD)
						win.addstr(0, 27, "< Downloading Transfers >")
					elif window == "downloads":
						win.addstr(0, 3, "< Uploading Transfers >")
						win.addstr(0, 27, "< Downloading Transfers >",   curses.A_BOLD|self.colors["green"])	
					
				else:
					if self.display["transfers"] == "uploads" and window == "uploads":
						win.attron(self.colors["green"])
						win.border()
						win.addstr(0, 3, "< Uploading Transfers >", curses.A_BOLD|self.colors["green"])
					elif self.display["transfers"] == "uploads" and window == "downloads":
						win.border()
						win.addstr(0, 3, "< Downloading Transfers >", curses.A_BOLD)
					elif self.display["transfers"] == "downloads" and window == "downloads":
						win.attron(self.colors["green"])
						win.border()
						win.addstr(0, 3, "< Downloading Transfers >", curses.A_BOLD|self.colors["green"])
					elif self.display["transfers"] == "downloads" and window == "uploads":
						win.border()
						win.addstr(0, 3, "< Uploading Transfers >", curses.A_BOLD)
						
	
			if self.display["mode"] == "lists":
				if self.display["list"] =="buddies":
					mw.addstr(0, 3, "< Buddied >",  self.colors["green"] | curses.A_BOLD)
					mw.addstr(0, 16, "< Banned >", self.colors["green"])
					mw.addstr(0, 28, "< Ignored >", self.colors["green"])
					mw.addstr(0, 41, "< Interests >", self.colors["green"])
					self.set_edit_title("Add Buddy:")
				elif self.display["list"] =="banned":
					mw.addstr(0, 3, "< Buddied >",  self.colors["green"] )
					mw.addstr(0, 16, "< Banned >", self.colors["green"]| curses.A_BOLD)
					mw.addstr(0, 28, "< Ignored >", self.colors["green"])
					mw.addstr(0, 41, "< Interests >", self.colors["green"])
					self.set_edit_title("Ban User:")
				elif self.display["list"] =="ignored":
					mw.addstr(0, 3, "< Buddied >",  self.colors["green"] )
					mw.addstr(0, 16, "< Banned >", self.colors["green"])
					mw.addstr(0, 28, "< Ignored >", self.colors["green"]| curses.A_BOLD)
					mw.addstr(0, 41, "< Interests >", self.colors["green"])
					self.set_edit_title("Ignore User:")
				elif self.display["list"] =="ignored":
					mw.addstr(0, 3, "< Buddied >",  self.colors["green"] )
					mw.addstr(0, 16, "< Banned >", self.colors["green"])
					mw.addstr(0, 28, "< Ignored >", self.colors["green"])
					mw.addstr(0, 41, "< Interests >", self.colors["green"]| curses.A_BOLD)
					self.set_edit_title("Add Interest:")
			elif self.display["mode"] == "roomlist":
				mw.addstr(0, 3, "< Room List >",  self.colors["green"] | curses.A_BOLD)
				pos = 3
				sorta = "< "
				sort = "Sort by:"
				sortnaz = " Name A-Z"
				sortnza = " Name Z-A"
				sorts90 =" Size 9-0"
				sorts09 =" Size 0-9"
				quick = mucous_config["mucous"]["rooms_sort"]
				sortnaz_color = sortnza_color = sorts90_color = sorts09_color = curses.A_NORMAL
				if quick == "size":
					sorts90_color = self.colors["green"]
				elif quick == "size-reversed":
					sorts09_color = self.colors["green"]
				elif quick == "alpha-reversed":
					sortnza_color = self.colors["green"]
				elif quick == "alpha":
					sortnaz_color = self.colors["green"]
				mw.addstr(self.h-6, pos, sorta,  self.colors["green"] | curses.A_BOLD)
				pos += 2
				mw.addstr(self.h-6, pos, sort,  curses.A_BOLD)
				pos += len(sort)
				mw.addstr(self.h-6, pos, sortnaz,  sortnaz_color | curses.A_BOLD)
				pos += len(sortnaz)
				mw.addstr(self.h-6, pos, " |",  self.colors["green"] | curses.A_BOLD)
				pos += 2
				mw.addstr(self.h-6, pos, sortnza,  sortnza_color | curses.A_BOLD)
				pos += len(sortnza)
				mw.addstr(self.h-6, pos, " |",  self.colors["green"] | curses.A_BOLD)
				pos += 2
				mw.addstr(self.h-6, pos, sorts90, sorts90_color | curses.A_BOLD)
				pos += len(sorts90)
				mw.addstr(self.h-6, pos, " |",  self.colors["green"] | curses.A_BOLD)
				pos += 2
				mw.addstr(self.h-6, pos, sorts09,  sorts09_color | curses.A_BOLD)
				pos += len(sorts09)
				mw.addstr(self.h-6, pos, " >",  self.colors["green"] | curses.A_BOLD)
				mw.addstr(self.h-6, self.w-15, "< Refresh >",  self.colors["green"] | curses.A_BOLD)
				self.set_edit_title("Join a Room")
				
				
				
			if self.display["mode"] ==  "roomlist":
				mw.noutrefresh()
				tw = self.windows["text"]["roomlist"] =  mw.subwin(s["height"], s["width"], s["top"], s["left"])
				tw.attron(self.colors["green"])
				tw.border()
				tw.attroff(self.colors["green"])
				
			if self.display["mode"] == "lists":
				mw.noutrefresh()
				tw = self.windows["text"][self.display["list"]] = mw.subwin(s["height"], s["width"], s["top"], s["left"])
				tw.scrollok(0)
				tw.idlok(1)
				
				
				
			self.scrolling[self.display["list"]] = 0
		except Exception, e:
			self.Hlog("debug", "process_list_window: " + str(e))
		

	def transfer_mode(self):
		self.display["mode"] = "transfer"
		self.Spl["show_menu"] = False
# 		self.scrolling["uploads"] = self.scrolling["downloads"]  = 0
		# Draw upload border

		try:
			if mucous_config["mucous"]["transbox"] == "split":
				u = self.windows["dimensions"]["uploads"] = {"height": self.h/2-4, "width": self.w-2, "top": 2, "left": 1}
				d = self.windows["dimensions"]["downloads"] = {"height": self.h-5-u["height"]-4, "width": self.w-2, "top": self.h/2, "left": 1}
				self.process_list_window("uploads")
				self.process_list_window("downloads")
				
			elif mucous_config["mucous"]["transbox"] == "tabbed":
				if self.display["transfers"] == "uploads":
					u = self.windows["dimensions"]["uploads"] = {"height": self.h-7, "width": self.w-2, "top": 2, "left": 1}
					self.process_list_window("uploads")
				else:
					d = self.windows["dimensions"]["downloads"] = {"height": self.h-7, "width": self.w-2, "top": 2, "left": 1}
					self.process_list_window("downloads")
				
			# Draw upload window
			
			if mucous_config["mucous"]["transbox"] == "split":
				
				self.transwin2.refresh()
				self.transwin.refresh()
				
				self.upwin = self.transwin2.subwin( u["height"], u["width"], u["top"], u["left"])
				self.upwin.scrollok(0)
				self.upwin.idlok(1)
				self.upwin.noutrefresh()
				
				self.downwin = self.transwin.subwin(d["height"],d["width"], d["top"],d["left"])
				self.downwin.scrollok(0)
				self.downwin.idlok(1)
				self.downwin.noutrefresh()
				
			elif mucous_config["mucous"]["transbox"] == "tabbed":
				
				if self.display["transfers"] == "uploads":
					self.transwin2.refresh()
					self.upwin = self.transwin2.subwin( u["height"], u["width"], u["top"], u["left"])
					self.upwin.scrollok(0)
					self.upwin.idlok(1)
					self.upwin.noutrefresh()
				elif self.display["transfers"] == "downloads":
					self.transwin.refresh()
					# Draw download window
					self.downwin = self.transwin.subwin(d["height"],d["width"], d["top"],d["left"])
					self.downwin.scrollok(0)
					self.downwin.idlok(1)
					self.downwin.noutrefresh()
					

			
		except Exception, e:
			self.Hlog("debug", "transfer mode: " + str(e))
			
		try:
			self.transfer_panel()
						
			self.set_edit_title("Modify Transfers")
			if mucous_config["mucous"]["transbox"] == "split":
				self.upload_manager()
				self.download_manager()
				curses.doupdate()
			else:
				if self.display["transfers"] == "uploads":
					self.upload_manager()
					curses.doupdate()
				if self.display["transfers"] == "downloads":
					self.download_manager()
					curses.doupdate()
					
			self.last_transferscroll = self.display["transfers"]
		except Exception, e:
			self.Hlog("debug", "transfer panel: " + str(e))
			
		self.hotkeys()
		curses.doupdate()
	
	def arrows(self, window, height, pos, string):
		try:
			window.addstr(height, pos, "< ")
			window.addstr(height, pos+2, string.capitalize(), self.colors["green"] | curses.A_BOLD)
			window.addstr(height, pos+2+len(string), " >")
		except Exception, e:
			self.Hlog("debug", "arrows: " + str(e))
	
	def transfer_panel(self):
		try:
			if self.display["transfers"] == "downloads":
				s = self.windows["dimensions"]["downloads"]
				window = self.transwin
			elif self.display["transfers"] == "uploads":
				s = self.windows["dimensions"]["uploads"]
				window = self.transwin2
			pos = 2
			 
			self.arrows(window, s["height"]+1, pos, mucous_config["mucous"]["transbox"])
			
			if self.display["transfer_sort"] == 'all':
				
				pos = 20
				self.arrows(window, s["height"]+1, pos, self.display["transfer_sort"])
			else:
				window.addstr(s["height"]+1, 20, "< All >")

			if self.display["transfer_sort"] == 'active':
				pos = 28
				self.arrows(window, s["height"]+1, pos, self.display["transfer_sort"])
			else:
				window.addstr(s["height"]+1, 28, "< "+'Active'+" >")

			if self.display["transfer_sort"] == 'queued':
				pos = 39
				self.arrows(window, s["height"]+1, pos, self.display["transfer_sort"])
			else:
				window.addstr(s["height"]+1, 39, "< "+'Queued'+" >")
			if self.display["transfer_sort"] == 'finished':
				pos = 50
				self.arrows(window, s["height"]+1, pos, self.display["transfer_sort"])
			else:
				window.addstr(s["height"]+1, 50, "< "+'Finished'+" >")
			if self.display["transfer_sort"] == 'failed':
				pos = 63
				self.arrows(window, s["height"]+1, pos, self.display["transfer_sort"])
			else:
				window.addstr(s["height"]+1, 63, "< "+'Failed'+" >")
			window.refresh()
		except Exception, e:
			self.Hlog("debug", "transfer_panel: " + str(e))
		
			
	def browse_mode(self):
		try:
			self.display["mode"] = "browse"
			self.Spl["show_menu"] = False
			
			#self.Mwin = curses.newwin(self.h -8, self.w, 4, 0)
			w = self.windows["dimensions"]["browse"] = {"height": self.h-11, "width": self.w-25, "top": 5, "left": 24, "start": 0}
			mw = self.windows["border"]["browse"] = curses.newwin(w["height"]+2, w["width"]+2, w["top"]-1, w["left"]-1)
			
			self.dirborderwin = curses.newwin(w["height"]+2, self.w-w["width"]-2, w["top"]-1, 0)
			
			self.browse_redraw()
			
			tw = self.windows["text"]["browse"] = mw.subwin(w["height"], w["width"], w["top"], w["left"])
			tw.scrollok(0)
			tw.idlok(1)
			tw.refresh()
			
			d =self.windows["dimensions"]["directories"]= {"height": w["height"], "width": self.w-w["width"]-4, "top": w["top"], "left":1}
			self.dirwin = self.dirborderwin.subwin(d["height"], d["width"], d["top"], d["left"])
			self.dirwin.erase()
			self.dirwin.noutrefresh()
	
			self.scrolling["browsefile"] = self.scrolling["browsedir"] = 0
			# Vars
			self.filesdirs = []
			self.numberfiles=0
			self.from_s = 0
			self.to = 0
			self.files = []
			self.directories = []
	
			
			self.browse_bar = curses.newwin(1, self.w, w["top"]+w["height"]+1, 0)
			self.browse_bar.erase()
			self.browse_bar.noutrefresh()
			
			#if self.logs["alert"][:6] == "Browse":
			#	self.alert_status("")
			self.check_alert_state()
			self.hotkeys()
			self.browse_display()
			curses.doupdate()
		except Exception, e:
			self.Hlog("debug", "browse_mode: " + str(e))
			
	def browse_redraw(self):
		try:
			w = self.windows["dimensions"]["browse"]
			mw = self.windows["border"]["browse"]
			if self.display["browse"] == "files":
				mw.attron(self.colors["green"])
			else:
				mw.attroff(self.colors["green"])
			mw.border()
	
			try:
				if self.display["browse"] == "files":
					attr = self.colors["green"] | curses.A_BOLD
				else:
					attr = curses.A_BOLD
				mw.addstr(0, 3, "< Browse users >",  attr)
			except:
				pass
			mw.noutrefresh()
			
			self.dirborderwin.erase()
			if self.display["browse"] == "directories":
				self.dirborderwin.attron(self.colors["green"])
				attr = self.colors["green"] | curses.A_BOLD
			else:
				attr = curses.A_BOLD
			self.dirborderwin.border()
			self.dirborderwin.attroff(self.colors["green"] )
			self.dirborderwin.addstr(0, 4, "< Directories >",  attr)
			self.dirborderwin.noutrefresh()
			
			if self.usernames["browse"] == "default__":
				self.scrolling["browsedir"] = 0
				self.set_edit_title("Choose a user to Browse Shares")
				self.temporary_click_text()
			else:
				self.temporary_click_text()
				#s = "Browse "+self.usernames["browse"]+"'s files in "
				#ls = len(s)
				#self.set_edit_title(s  + self.Spl["dir_browse"][:self.w-ls-8] )
				self.set_edit_title( self.Spl["dir_browse"][:self.w-8] )
		except Exception, e:
			self.Hlog("debug", "browse_redraw: " + str(e))
		
	def browse_display(self):
		try:
			d =self.windows["dimensions"]["directories"]
			w = self.windows["dimensions"]["browse"] 
			tw = self.windows["text"]["browse"]
			#self.display["browse"] = "directories"
			self.Spl["selected"] = self.usernames["browse"]
			if self.usernames["browse"] != "default__":
				
				directories = []
				for s in self.data["browse_results"][self.usernames["browse"]]["dirs"]:
					try:
						directories.append(s)
					except:
						pass
				directories.sort()
				self.directories = directories
				if self.display["browse"] == "directories":
					clipped_list, self.scrolling["browsedir"], self.windows["dimensions"]["directories"]["start"] = self.scrollbox(directories, self.scrolling["browsedir"], d["height"])
# 					self.scrolling["browsedir"] = self.Sup
				else:
					clipped_list, self.scrolling["browsedir"], self.windows["dimensions"]["directories"]["start"] = self.scrollbox(directories, self.scrolling["browsedir"], d["height"])
				
				count = 0
				self.dirwin.erase()
				for s in clipped_list:
					try:
						z = s.split("\\")
						string = (" " * (len(z)-2)) + "\\"
						string += self.decode_language(z[-1][:self.w-w["width"]-4-len(string)])
						string += " " * ( (self.w-w["width"]-4) -len(string) )
						if count +d["start"] == self.scrolling["browsedir"]:
							self.dirwin.addstr(string, self.colors["green"])
						else:
							self.dirwin.addstr(string)
						count += 1
					except Exception, e:
						pass
						#self.Hlog("debug", str(e))
				
				self.Spl["dir_browse"] = self.directories[self.scrolling["browsedir"]]
				self.set_edit_title(self.Spl["dir_browse"] )
				self.browse_file_stats( self.usernames["browse"], self.Spl["dir_browse"])
				self.browse_file_bar()
				
				self.dirwin.noutrefresh()
			
			
			
			elif self.usernames["browse"] == "default__":
				self.dirwin.erase()
				self.dirwin.noutrefresh()
				tw.erase()
				count = 0
				
				for lines in self.logs["browse"][self.usernames["browse"]]:
				#self.browse_file_stats(self, self.usernames["browse"], self.Spl["dir_browse"]):
					try:
						self.display_browse_text(lines, count , self.scrolling["browsefile"])
		
					except Exception, e:
						self.Hlog("debug", "Browse mode" + str(e))
			tw.noutrefresh()
			self.select_tab_box(self.activeitems["browse"], self.usernames["browse"])
		except Exception, e:
			self.Hlog("debug", "browse_display: " + str(e))
			
	def start_browse(self, user):
		try:
			if user not in self.requests["browse"]:
				self.requests["browse"].append(user)
			self.send(messages.UserShares(user))
		except Exception, e:
			self.Hlog("debug", "start_browse" + str(e))
			
	def browse_log(self, s, user):
		try:
			if user not in self.logs["browse"].keys():
				self.logs["browse"][user] = []
			self.logs["browse"][user].append("%s" % s)
	
			if self.display["mode"] == "browse":
				#self.display_browse_text(count, self.usernames["browse"], s)
				pass
			else:
				self.alert_status("Browse: %s" % user)
		except Exception, e:
			self.Hlog("debug", "browse_log: " + str(e))
			
	def display_browse_text(self,  line, count, sup):
		try:
			w = self.windows["dimensions"]["browse"]
			tw = self.windows["text"]["browse"]
			this_line = self.decode_language( line )
			if len(this_line) > self.windows["dimensions"]["browse"]["width"]:
				crop = len(this_line) - self.windows["dimensions"]["browse"]["width"]
				this_line = this_line[:-crop]
				
			if count + w["start"] == sup:
				attr = self.colors["blafgcyabg"] |curses.A_REVERSE|curses.A_BOLD	
				tw.addstr(this_line, attr)
			else:
				attr = curses.A_NORMAL
				tw.addstr(this_line, attr )
			z = w["width"]-len(this_line)
			space = " " * ( z )
			tw.addstr(space, attr)
			
		except:
			pass
			



	def search_mode(self):
		try:
			self.display["mode"] = "search"
			self.Spl["show_menu"] = False
			
			w = self.windows["dimensions"]["search"] = {"height": self.h-11, "width": self.w-2, "top": 5, "left": 1, "start": 0}
			mw = self.windows["border"]["search"] = curses.newwin(w["height"]+2, w["width"]+2, w["top"]-1, w["left"]-1)
			mw.attron(self.colors["green"])
			mw.border()
			mw.attroff(self.colors["green"])
			try:
				mw.addstr(0, 3, "< Search >",  self.colors["green"] | curses.A_BOLD)
			except:
				pass
			
			if self.sfilter != None:
				sfilter = "Filter: " +self.sfilter
				
			else:
				sfilter = "Filter: Disabled"
			lfil = len(sfilter)
			mw.addstr(0,15, "< ", self.colors["green"])
			if self.sfilter != None:
				mw.addstr(0,17, self.decode_language(sfilter), self.colors["cyan"] | curses.A_BOLD)
			else:
				mw.addstr(0,17, self.decode_language(sfilter), self.colors["red"] | curses.A_BOLD)
			mw.addstr(0,17+lfil, " >", self.colors["green"])
			
			self.search_sortbar()
			tw = self.windows["text"]["search"] = mw.subwin(w["height"], w["width"], w["top"], w["left"])
			tw.scrollok(0)
			tw.idlok(1)
			
			self.statswin = curses.newwin(1, self.w, self.h-5, 0)
			self.statswin.erase()
			self.statswin.noutrefresh()
			
			self.search_display()
			
			
			if self.Spl["search_method"] != None:
				if self.Spl["search_method"] == "user":
					if self.usernames["search"] != None:
						self.set_edit_title("Search (Alt-t) "+self.Spl["search_method"].capitalize()+" "+self.usernames["search"]+"'s shares")
					else:
						self.set_edit_title("Search (Alt-t) "+self.Spl["search_method"].capitalize()+" (Pick a user with /searchuser)")
				else:
					self.set_edit_title("Search (Alt-t) "+self.Spl["search_method"].capitalize()+" for:")
			self.select_tab_box(self.data["search_tickets"].keys(), self.Spl["current_search"])
			self.Spl["selected"] = self.Spl["current_search"]
			if self.Spl["current_search"] != "default__":
				self.temporary_click_text()
				self.check_alert_state()
			else:
				self.hotkeys()
			curses.doupdate()
		except Exception,e:
			self.Hlog("debug", "search_mode: "+str(e))
			
	def search_sortbar(self):
		try:
			w = self.windows["dimensions"][self.display["mode"]]
			ls = ("Num", "User", "Free", "Speed", "Que", "Path", "Size", "File", "Bitrate", "Time")
			mw = self.windows["border"]["search"]
			mw.addstr(w["height"]+1, 1, "<    |    |    |     |   |    |    |    |       |     >", self.colors["green"])
			pos  = 0
			for i in ls:
				if i == self.Spl["search_order"].capitalize():
					mw.addstr(w["height"]+1, 3+pos, self.Spl["search_order"].capitalize(), self.colors["green"]| curses.A_BOLD)
				else:
					mw.addstr(w["height"]+1, 3+pos, i, self.colors["red"] | curses.A_BOLD)
				pos += len(i) + 1
	
			pos = 56
			mw.addstr(w["height"]+1, pos, "<         >", self.colors["green"])
			pos = 58
			if self.Spl["search_reverse"]:
				
				mw.addstr(w["height"]+1, pos, "Reverse", self.colors["green"]| curses.A_BOLD)
			else:
				mw.addstr(w["height"]+1, pos, "Reverse", self.colors["red"]| curses.A_BOLD)
	
			mw.noutrefresh()
			
		except Exception,e:
			self.Hlog("debug", "search_sortbar: "+str(e))
					
	def search_display(self):
		try:
			tw = self.windows["text"]["search"]
			if self.Spl["current_search"]== "default__":
				tw.erase()
				w=self.windows["dimensions"]["search"]
				for lines in self.logs["search"][self.Spl["current_search"]]:
					try:
						lines, ls = self.string_add_blanks(lines, w)
						tw.addstr(self.decode_language(lines))
					except:
						pass
				tw.noutrefresh()
				
			else:
				try:
					if self.Spl["show_menu"] == True: raise  Exception,  "popup"
					self.Format_Search_Results(self.Spl["current_search"])
				except:
					pass
			
		except Exception,e:
			self.Hlog("debug", "search_display: "+str(e))
			
	def temporary_click_text(self):
		try:
			if self.display["mode"] == "search":
				gi = "Instructions"
			elif self.display["mode"] == "browse":
				gi = "Instructions"
			elif self.display["mode"] == "info":
				gi = "Instructions"

			w = self.windows["dimensions"][self.display["mode"]]
			pos = w["width"]-3-len(gi)
			if self.display["mode"] != "lists":
				mw = self.windows["border"][ self.display["mode"] ]
			else:
				mw = self.windows["border"][ self.display["list"] ]
			mw.addstr(0,pos, "< ", self.colors["green"])
			mw.addstr(0,pos+2, gi, self.colors["cyan"] | curses.A_BOLD)
			mw.addstr(0,pos+2+len(gi), " >", self.colors["green"])
			vertex = w["height"]+1
			if self.display["mode"] == "search":
				mw.addstr(vertex,self.w-11, "< ", self.colors["green"])
				mw.addstr(vertex,self.w-9, "Close ", self.colors["cyan"] | curses.A_BOLD)
				mw.addstr(vertex,self.w-3, ">", self.colors["green"])
			if self.display["mode"] == "browse":
				if self.usernames["browse"] in self.config["encoding.users"]:
					blah = self.config["encoding.users"][self.usernames["browse"]]
				else:
					blah = self.config["encoding"]["filesystem"]
				
				mw.addstr(vertex,w["width"]-17-len(blah)-4, "<" + (" " *( len(blah) +2) )+  ">")
				mw.addstr(vertex,w["width"]-17-len(blah)-2, blah, self.colors["cyan"] | curses.A_BOLD)
				mw.addstr(vertex,w["width"]-11, "< ")
				mw.addstr(vertex,w["width"]-9, "Close ", self.colors["cyan"] | curses.A_BOLD)
				mw.addstr(vertex,w["width"]-3, ">")
			elif self.display["mode"] == "info":
				isw = self.windows["border"]["infostats"]
				isw.addstr(vertex,3, "< ")
				isw.addstr(vertex,5, "Close ", self.colors["cyan"] | curses.A_BOLD)
				isw.addstr(vertex,11, ">")
				isw.noutrefresh()
			mw.noutrefresh()
		except Exception, e:
			self.Hlog("debug", "TemporaryClickText " + str(e))
	
	def select_tab_box(self, tab_box_list, selected_tab):
		try:
			if tab_box_list == [None]:
				return
			lang = mucous_config["mucous"]["language"]
			self.tabclearwin = curses.newwin(3, self.w, 1, 0)
			self.tabclearwin.hline(1, 1, curses.ACS_HLINE, self.w-2)
			self.activeitems["positions"]= {}
			self.tabclearwin.addstr(1,0, "<")
			self.tabclearwin.addstr(1,self.w-1, ">")
		
			self.tabclearwin.noutrefresh()
			if tab_box_list != []:
				pos = 1
				for string in tab_box_list:
					
					
					if self.display["mode"]=="search":
						sting = self.data["search_tickets"][string][:13]
					
					else:
						sting = string[:13]
						
					move = len(sting)+2
					
					sting = self.decode_language(sting)
					self.activeitems["positions"][string] = pos, move+pos
					if pos + move < self.w -2:
						
						self.tabwin = curses.newwin(3, len(sting)+2, 1, pos)
						self.tabwin.border()
						self.tabwin.noutrefresh()
						self.tab1win = self.tabwin.subwin(1,len(sting),2,pos+1)
						
						try:
							
							if self.display["mode"]=="search":
								if string == self.Spl["current_search"]:
									self.tab1win.addstr(sting, self.colors["green"] | curses.A_BOLD)
								else:
									self.tab1win.addstr(sting, curses.A_BOLD)
							else:
								username = string
								if string == selected_tab:
									if string in self.user["status"]:
										if self.user["status"][username] == 1:
											self.tab1win.addstr(sting, self.colors["yellow"] | curses.A_BOLD)
										elif self.user["status"][username] == 2:
											self.tab1win.addstr(sting, self.colors["green"] | curses.A_BOLD)
										elif self.user["status"][username] == 0:
											self.tab1win.addstr(sting, self.colors["red"] | curses.A_BOLD)
									else:
										self.tab1win.addstr(sting, self.colors["red"] | curses.A_BOLD)
								else:
									if string in self.user["status"]:
										if self.user["status"][username] == 1:
											self.tab1win.addstr(sting, self.colors["yellow"] )
										elif self.user["status"][username] == 2:
											self.tab1win.addstr(sting)
										elif self.user["status"][username] == 0:
											self.tab1win.addstr(sting, self.colors["red"])
									else:
										self.tab1win.addstr(sting, self.colors["red"])  
								
						except:
							pass
						
						self.tab1win.noutrefresh()
						pos += len(sting)+2
						
		except Exception, e:
			self.Hlog("debug", "select_tab_box: " + str(e))
			
	def info_mode(self):
		try:
			self.display["mode"] = "info"
			self.Spl["show_menu"] = False
			
			w = self.windows["dimensions"]["info"] = {"height": self.h-10, "width": self.w-20, "top": 5, "left": 1}
			mw = self.windows["border"]["info"] = curses.newwin(w["height"]+2, w["width"]+2, w["top"]-1, w["left"]-1)
			mw.attron(self.colors["green"])
			mw.border()
			mw.attroff(self.colors["green"])
			try:
				mw.addstr(0, 3, "< Info Mode >",  self.colors["green"] | curses.A_BOLD)
			except:
				pass
			mw.refresh()
	
			tw =  self.windows["text"]["info"] = mw.subwin(w["height"], w["width"], w["top"], w["left"])
			tw.scrollok(0)
			tw.idlok(1)
			
			
			self.scrolling["info"] = -1
	
			self.set_edit_title("Get info about user:")
			
			#if self.logs["alert"] in ("New Userinfo", "New IP", "New Stats"):
			#	self.alert_status("")
			sw = self.windows["dimensions"]["infostats"]= {"height": self.h-10, "width": 16, "top": 5, "left": self.w-17}
			isw = self.windows["border"]["infostats"] = curses.newwin(sw["height"]+2, sw["width"]+2, sw["top"]-1, sw["left"]-1)
			isw.border()
			isw.addstr(0, 2, "< Stats >")
			itw = self.windows["text"]["infostats"] = isw.subwin(sw["height"], sw["width"], sw["top"], sw["left"])
			itw.scrollok(1)
	
			mw.refresh()
			isw.refresh()
			self.info_display()
			itw.refresh()
			# queue, uploads, speed, downloads, files, directories, freeslots
			self.Spl["selected"] = self.usernames["info"]
			self.select_tab_box(self.activeitems["info"], self.usernames["info"])
			self.display_userinfo_log()
			self.check_alert_state()
			curses.doupdate()
			#self.hotkeys()
		except Exception, e:
			self.Hlog("debug", "info_mode: " + str(e))
			
	def info_display(self):
		try:
			scrolltext = "info"
			w = self.windows["dimensions"]["info"] 
			lang = mucous_config["mucous"]["language"]
			tw = self.windows["text"]["info"]
			if self.usernames["info"] != None:
				self.temporary_click_text()
				# Display Userinfo & Stats
				clipped_list, self.scrolling["info"], w["start"] = self.wrap_n_clip(self.logs["info"][self.usernames["info"]][0], w, scrolltext )
				
			else:
				# Display instructions, IP info, and stats
				clipped_list, self.scrolling["info"], w["start"] = self.wrap_n_clip( self.infolog, w, scrolltext )
	
			attrs = curses.A_BOLD; attr = curses.A_NORMAL
			count = 0
			tw.erase()
			for lines in clipped_list:
				try:
					lines, ls = self.string_add_blanks(lines, w)
					if count + w["start"] == self.scrolling["info"]:
						tw.addstr(self.decode_language(lines), attrs)
					else:
						tw.addstr(self.decode_language(lines), attr)
					count += 1
				except Exception, e:
					pass
			tw.noutrefresh()
		except Exception, e:
			self.Hlog("debug", "info_display: " + str(e))
		
	def help_mode(self):
		try:
			if self.display["mode"] not in ("help", "debug"):
				self.display["mode"] = "debug"
			if self.display["mode"] == "help":
				logfile = self.helplog
			elif self.display["mode"] == "debug":
				logfile = self.helpdebuglog
			self.Spl["show_menu"] = False
			
			s = self.windows["dimensions"]["help"] = {"height": self.h-7, "width": self.w-2, "top": 2, "left": 1, "start": 0}
			mw = self.windows["border"]["help"] = curses.newwin(s["height"]+2, s["width"]+2, s["top"]-1, s["left"]-1)
			mw.attron(self.colors["green"])
			mw.border()
			mw.attroff(self.colors["green"])
			try:
				if self.display["mode"] == "help":
					mw.addstr(0, 3, "< Help Mode >",  self.colors["green"] | curses.A_BOLD)
					mw.addstr(0, 18, "<            >",  self.colors["green"])
					mw.addstr(0, 20, "Debug Mode",  curses.A_BOLD)
				elif self.display["mode"] == "debug":
					mw.addstr(0, 3, "<           >",  self.colors["green"] )
					mw.addstr(0, 5, "Help Mode",  curses.A_BOLD)
					mw.addstr(0, 18, "< Debug Mode >",  self.colors["green"] | curses.A_BOLD)
			except:
				pass
			mw.refresh()
			tw = self.windows["text"]["help"]  = mw.subwin(s["height"], s["width"], s["top"], s["left"])
			tw.scrollok(0)
			tw.idlok(1)
			
			self.scrolling["help"] = -1
			self.help_display()
			
			self.set_edit_title("Use /help")
			#if self.logs["alert"] in ("New Help", "New Bug", "New Status"):
			#	self.alert_status("")
				
			
			self.check_alert_state()
			curses.doupdate()
		except Exception, e:
# 			self.Hlog("debug", ": " + str(e))
			pass
			
	def help_display(self):
		try:
			w = self.windows["dimensions"]["help"]
			tw = self.windows["text"]["help"]
			size = w["height"] * w["width"]
			if self.display["mode"] == "help":
				logfile = self.helplog
			elif self.display["mode"] == "debug":
				logfile = self.helpdebuglog
			# DEBUGGING
			wrapped_lines = []
			for lines in logfile:
				list_of_strings = self.string_cut_width(lines, w)
				for string in list_of_strings:
					wrapped_lines.append(string)
			if self.scrolling[self.display["mode"]] == -1:
				self.scrolling[self.display["mode"]] = len(wrapped_lines)
				
			clipped_list, self.scrolling[self.display["mode"]], w["start"] = self.scrollbox(wrapped_lines, self.scrolling[self.display["mode"]], w["height"])
			del wrapped_lines
			count = 0
			
			blanked_lines = []
			for lines in clipped_list:
				s, ls = self.string_add_blanks(lines, w) 
				blanked_lines.append(s)
				
			clipped_list = blanked_lines
			del blanked_lines
			count = 0
			total_lines = 0
			tw.erase()
			for line in clipped_list:
				try:
					if line is clipped_list[-1]:
						line = line[:-1]
					self.Hlog_display(self.display["mode"], line, count)
					count += 1
				except Exception, e:
					self.say("Status", self.Spl["room"], 'ERR', str(e) )
			tw.refresh()
			
		except Exception, e:
			self.say("Status", self.Spl["room"], "help_display: ", str(e))
			
	def Hlog(self, htype, s):
		try:
			s = str(s)
			
			if htype == "help":
				if "\n" in s:
					lis = s.split("\n")
					for line in lis:
						self.helplog.append("%s" %line )
				else:
					self.helplog.append("%s" %s )
			elif htype in ("status", "debug"):
				if "\n" in s:
					lis = s.split("\n")
					for line in lis:
						self.helpdebuglog.append("%s" % line)
				else:
					self.helpdebuglog.append("%s" %s)
				
			if self.display["mode"] in ( "help", "debug", "status"):
				#self.Hlog_display( htype, s, 0)
				self.scrolling[self.display["mode"]] = -1
				self.help_display()
				#self.check_alert_state()
			else:
				if htype not in self.alert["HELP"]:
					if htype == "help":
						self.alert["HELP"].append("help")
					elif htype == "status":
						self.alert["HELP"].append("status")
					elif htype == "debug":
						self.alert["HELP"].append("debug")
				
				self.check_alert_state()
		except Exception, e:
			pass
			
	def string_cut_width(self, s, w):
		try:
			s = str(s); ls = len(s)
			list_of_strings = []
			if ls > w["width"]:
				div = (ls/w["width"]) + 1
				# Cut long lines into multiple lines
				for seq in range(div):
					list_of_strings.append(s[:w["width"]])
					s = s[w["width"]:]
			else:
				# Short line added to list
				list_of_strings.append(s)
			return list_of_strings
		except Exception, e:
			self.Hlog("debug", ": " + str(e))
		
	def string_add_blanks(self, s, w):
		try:
			#, total_lines
			# s == string
			# w == window_dimensions dict
			s = str(s); ls = len(s)
			if ls > w["width"]:
				# Add spaces if longer than a single line
				div = (ls/w["width"]) + 1
				length = (w["width"] * div) -  ls 
				if length != 0:
					s += (length * " ")
				#total_lines += div
	
			else:
				# Add spaces till end of first and only line
				s += " " * (w["width"] - ls)
			return s, ls #, total_lines
		except Exception, e:
			self.Hlog("debug", "string_add_blanks: " + str(e))
			
	def Hlog_display(self, htype, s, count):
		try:
			
			if self.display["mode"] in ( "help", "debug", "status"):
				tw = self.windows["text"]["help"]
				w = self.windows["dimensions"]["help"]
				if count + w["start"] == self.scrolling[self.display["mode"]]:
					attr = curses.A_BOLD
				else:
					attr = curses.A_NORMAL
				
				if self.display["mode"] == "help" and htype == "help":
					tw.addstr(self.decode_language(s), attr)
				elif self.display["mode"] == "debug" and htype in( "status", "debug"):
					tw.addstr(self.decode_language(s), attr)
				else:
					self.alert_status("New Help")
			else:
				self.alert_status("New Help")
		except: # Exception, e:
			#self.say("Status", self.Spl["room"], "Hlog_display: ", str(e))
			pass
		return #total_lines
					
	def interests_mode(self):
		try:
			self.display["list"] = "interests"
			self.Spl["show_menu"] = False
# 			self.scrolling[ "recommendations" ] = self.scrolling[ "likes" ] = self.scrolling[ "hates" ] = self.scrolling[ "similar_users" ] = 0
			self.windows["dimensions"]["recommendations"] = s = self.windows["dimensions"][self.display["list"]] = {"height": self.h-8, "top": 3, "left": 21, "width": self.w-42, "start": 0}
			self.windows["dimensions"]["likes"] = l  = self.windows["dimensions"][self.display["list"]] = {"height": self.h/2-5, "top": 3, "left": 1, "width": 18, "start": 0}
			self.windows["dimensions"]["hates"] = h = self.windows["dimensions"][self.display["list"]] = {"height": self.h-8-(l["height"])-2, "top": 5+l["height"], "left": 1, "width": 18, "start": 0}
			self.windows["dimensions"]["similar_users"] = u = self.windows["dimensions"][self.display["list"]] = {"height": self.h-8, "top":3 , "left": self.w-19, "width": 18, "start": 0}
			
			mw = curses.newwin(3, self.w,  1, 0)
			mw.attron(self.colors["green"])
# 			win = curses.newwin(w["height"]+2, w["width"]+2, w["top"]-1, w["left"]-1)
			mw.erase()
			mw.border()
 			mw.addstr(0, 3, "< Buddied >",  self.colors["green"])
			mw.addstr(0, 16, "< Banned >", self.colors["green"])
			mw.addstr(0, 28, "< Ignored >", self.colors["green"])
			mw.addstr(0, 41, "< Interests >", self.colors["green"]  | curses.A_BOLD)
			mw.noutrefresh()
	

  			if self.display["interests"] == "likes":
				if self.Spl["interests_input"] not in ("add_likes", "del_likes"):
					self.Spl["interests_input"] = "add_likes"
				if self.Spl["interests_input"] == "add_likes":
					self.set_edit_title("Add Liked (Alt-D to Toggle to Delete)")
				elif self.Spl["interests_input"] == "del_likes":
					self.set_edit_title("Delete Liked (Alt-D to Toggle to Add)")
			elif self.display["interests"] == "hates":
				if self.Spl["interests_input"] not in ("add_hates", "del_hates"):
					self.Spl["interests_input"] = "add_hates"
				if self.Spl["interests_input"] == "add_hates":
					self.set_edit_title("Add Hated (Alt-D to Toggle to Delete)")
				elif self.Spl["interests_input"] == "del_hates":
					self.set_edit_title("Delete Hated (Alt-D to Toggle to Add)")
			elif self.display["interests"] == "recommendations":
				self.set_edit_title("Recommendations:")
			elif self.display["interests"] == "similar_users":
				self.set_edit_title("Similar Users:")
			self.create_rex_window(s, "recommendations")
			self.create_rex_window(l, "likes")
			self.create_rex_window(h, "hates")
			self.create_rex_window(u, "similar_users")
			self.interests_draw()

			
			self.hotkeys()
			curses.doupdate()
		except Exception, e:
			self.Hlog("debug", "interests_mode: " + str(e))
			
	def interests_draw(self):
		self.like_draw()
		self.hate_draw()
		self.recommendations_draw()
		self.similar_draw()
		
	def recommendations_draw(self):
		try:
			mode  = "recommendations"
			self.windows["text"][mode].erase()
			w = self.windows["dimensions"][mode]
			self.logs[mode] = []
			sup = self.scrolling[ mode ]
			if self.data[mode] != {}:
				if self.Spl["recommend_sort"] == "alpha":
# 					dict = self.data[mode]
					dict = []
					for item, num in self.data[mode].items():
						dict.append([item, num])
				elif self.Spl["recommend_sort"] == "size":
					dict = self.sortbyvalue(self.data[mode])
					dict.reverse()
				for item, num in dict: #.items():

					self.logs[mode].append( [item, num])
# 					self.Hlog("debug", "recommendations_draw: " + str(num))
				if self.Spl["recommend_sort"] == "alpha":
					self.logs[mode].sort()
			else:
				self.logs[mode] = [["EMPTY RECOMMENDATIONS", 0]]
			count = 0
			clipped_list, sup, self.windows["dimensions"][mode]["start"] = self.scrollbox(self.logs[mode], sup, w["height"])
			self.scrolling[mode] = sup
			start = self.windows["dimensions"][mode]["start"]
			for item, num in clipped_list:
				length = len( item+( " " * (w["width"] - len(item)-len(str(num))))+str(num ) )
				if length > w["width"]:
					item = item [:w["width"] - length  ]
				if count + start == sup:
					self.windows["text"][mode].addstr(item +( " " * (w["width"] - len(item)-len(str(num))))+str(num ), curses.A_BOLD)
				else:
					self.windows["text"][mode].addstr(item +( " " * (w["width"] - len(item)-len(str(num))))+str(num ))
				count += 1
			self.windows["text"][mode].refresh()
		except Exception, e:
			self.windows["text"][mode].refresh()
# 			self.Hlog("debug", "recommendations_draw: " + str(e))

	def similar_draw(self):
		try:
			mode  = "similar_users"
			self.windows["text"][mode].erase()

			if self.data[mode] != {}:
				self.logs[mode] = []
				w = self.windows["dimensions"][mode]
				for user, status in self.data[mode].items():
					self.logs[mode].append( [user, status])
				sup = self.scrolling[ mode ]
				count = 0 
				self.logs[mode].sort()
				clipped_list, sup, start = self.scrollbox(self.logs[mode], sup, w["height"])
				self.windows["dimensions"][mode]["start"] = start
				self.scrolling[mode] = sup
				for user, status in clipped_list:
					if count + start == sup:
						attr = curses.A_BOLD
					else: 
						attr = curses.A_NORMAL
					if status == 1:
						self.windows["text"][mode].addstr("* ", self.colors["yellow"] | attr)
					elif status == 2:
						self.windows["text"][mode].addstr("* ", self.colors["green"] | attr)
					else:
						self.windows["text"][mode].addstr("* " , attr)
					if len (user )+2 > w["width"]:
						user = user[ :w["width"]-2-len(user) ]
					self.windows["text"][mode].addstr(user + " " * (w["width"] - len(user)-2),   attr)
					count +=1
				self.windows["text"][mode].refresh()
		except Exception, e:
# 			self.Hlog( "debug", "similar_draw " + str(e) + str(self.scrolling["similar_users" ]))
			self.windows["text"]["similar_users"].refresh()
	
	def hate_draw(self):
		try:
			mode = "hates"

			self.windows["text"][mode].erase()
			w = self.windows["dimensions"][mode]
			self.logs[mode] = []
			sup = self.scrolling[ mode ]
			if "interests.hate" in self.config.keys():
				for item in self.config["interests.hate"]:
					
					self.logs[mode].append( item)
	
			count = 0
			clipped_list, sup, self.windows["dimensions"][mode]["start"] = self.scrollbox(self.logs[mode], sup, w["height"])
			self.scrolling[mode] = sup
			start = self.windows["dimensions"][mode]["start"]
			for line in clipped_list:
				length = len( line+( " " * (w["width"] - len(line) ) ) )
				if length > w["width"]:
					line = line [:w["width"] - length  ]
				if count + start == sup:
					self.windows["text"][mode].addstr(line + " " * (self.windows["dimensions"]["hates"]["width"] - len(line)), curses.A_BOLD)
				else:
					self.windows["text"][mode].addstr(line + " " * (self.windows["dimensions"]["hates"]["width"] - len(line)))
				count += 1
			self.windows["text"][mode].refresh()
		
		except Exception, e:
			self.Hlog( "debug", "hate_draw " + str(e))
			self.windows["text"]["hates"].refresh()
			
	def like_draw(self):
		try:
			mode = "likes"
			self.windows["text"][mode].erase()
			w = self.windows["dimensions"][mode]
			self.logs[mode] = []
			sup = self.scrolling[ mode ]
			if "interests.hate" in self.config.keys():
				for item in self.config["interests.like"]:

					self.logs[mode].append( item)
	
			count = 0
			clipped_list, sup, self.windows["dimensions"][mode]["start"] = self.scrollbox(self.logs[mode], sup, w["height"])
			self.scrolling[mode] = sup
			start = self.windows["dimensions"][mode]["start"]
			for line in clipped_list:
				length = len( line+( " " * (w["width"] - len(line) ) ) )
				if length > w["width"]:
					line = line [:w["width"] - length  ]
				if count + start == sup:
					self.windows["text"][mode].addstr(line + " " * (w["width"] - len(line)), curses.A_BOLD)
				else:
					self.windows["text"][mode].addstr(line + " " * (w["width"] - len(line)))
				count += 1
			self.windows["text"][mode].refresh()
		except:
			self.windows["text"][mode].refresh()
			

	def create_rex_window(self, w, mode):
		try:
			win = curses.newwin(w["height"]+2, w["width"]+2, w["top"]-1, w["left"]-1)
			if self.display["interests"] == mode:
				win.attron(self.colors["green"])
			win.border()
			if mode == "recommendations":
				title = "Recommendations"
				rs = len(self.Spl["recommend_sort"])
				win.addstr(0, w["width"]-rs-4, "< %s >" % (" "*rs))
				win.addstr(0, w["width"]-rs-2, self.Spl["recommend_sort"].capitalize(),  curses.A_BOLD | self.colors["cyan"])
				win.addstr(w["height"]+1, 1, "<          >")
				win.addstr(w["height"]+1, 3, "PERSONAL",  curses.A_BOLD | self.colors["cyan"])
				win.addstr(w["height"]+1, w["width"]-10, "<        >")
				win.addstr(w["height"]+1, w["width"]-8, "GLOBAL",  curses.A_BOLD | self.colors["cyan"])
			elif mode == "likes":
				title = "Liked"
				if self.Spl["interests_input"] == "add_likes":
					aattr = curses.A_BOLD | self.colors["cyan"]
					dattr = curses.A_NORMAL
				elif self.Spl["interests_input"]  == "del_likes":
					aattr = curses.A_NORMAL
					dattr = curses.A_BOLD | self.colors["cyan"]
				else:
					aattr = curses.A_NORMAL
					dattr = curses.A_NORMAL
				win.addstr(w["height"]+1, 1, "<     >")
				win.addstr(w["height"]+1, 3, "ADD", aattr)
				win.addstr(w["height"]+1, w["width"]-9, "<        >")
				win.addstr(w["height"]+1, w["width"]-7, "DELETE", dattr)
			elif mode == "hates":
				title = "Hated"
				if self.Spl["interests_input"] == "add_hates":
					aattr = curses.A_BOLD | self.colors["cyan"]
					dattr = curses.A_NORMAL
				elif self.Spl["interests_input"]  == "del_hates":
					aattr = curses.A_NORMAL
					dattr = curses.A_BOLD | self.colors["cyan"]
				else:
					aattr = curses.A_NORMAL
					dattr = curses.A_NORMAL
				win.addstr(w["height"]+1, 1, "<     >")
				win.addstr(w["height"]+1, 3, "ADD", aattr)
				win.addstr(w["height"]+1, w["width"]-9, "<        >")
				win.addstr(w["height"]+1, w["width"]-7, "DELETE", dattr)
			elif mode == "similar_users":
				title = "Users"
				win.addstr(w["height"]+1, w["width"]-10, "<         >")
				win.addstr(w["height"]+1, w["width"]-8, "REFRESH",  curses.A_BOLD | self.colors["cyan"])
			
			win.addstr(0, 1, "< %s >" % (" " * len(title)))
			if mode == self.display["interests"]:
				 win.addstr(0, 3, title, curses.A_BOLD | self.colors["green"])
			else:
				 win.addstr(0, 3, title, curses.A_BOLD)
			if self.display["interests"] == mode:
				win.attroff(self.colors["green"])
			win.refresh()
			twin =win.subwin(w["height"], w["width"], w["top"], w["left"])
			
			twin.scrollok(0)
			twin.idlok(1)
	
			self.windows["text"][mode] = twin
			self.windows["border"][mode] = win

		except Exception, e:
			self.Hlog( "debug", "create_rex_window: " + str(e))
		
	def buddy_mode(self):
		try:
			self.display["list"] = "buddies"
			self.Spl["show_menu"] = False
			
			s = self.windows["dimensions"][self.display["list"]] = {"height": self.h-7, "top": 2, "left": 1, "width": self.w-2}
			self.buddylist()
			self.process_list_window(self.display["list"])
			
			self.process_list_log(s, "buddies")
			
			self.hotkeys()
			curses.doupdate()
		except Exception, e:
			self.Hlog("debug", "buddy_mode: " + str(e))
			
	def ban_mode(self):
		try:
			self.display["list"] = "banned"
			self.Spl["show_menu"] = False
			
			s = self.windows["dimensions"][self.display["list"]] = {"height": self.h-7, "top": 2, "left": 1, "width": self.w-2}
			self.process_list_window(self.display["list"])
			self.banlist()
			self.process_list_log(s, "banned")
			self.hotkeys()
			curses.doupdate()
		except Exception, e:
			self.Hlog("debug", "ban_mode: " + str(e))
	def ignore_mode(self):
		try:
			self.display["list"] = "ignored"
			self.Spl["show_menu"] = False
			
			s = self.windows["dimensions"][self.display["list"]] = {"height": self.h-7, "top": 2, "left": 1, "width": self.w-2}
			self.process_list_window(self.display["list"])
			
			self.process_list_log(s, "ignored")
			self.hotkeys()
			curses.doupdate()
		except Exception, e:
			self.Hlog("debug", "ignore_mode: " + str(e))
			
	def process_list_log(self, window, mode):
		try:
			if self.logs[mode] != None and self.logs[mode] != []:
				clipped_list, self.scrolling[mode], self.windows["dimensions"][self.display["list"]]["start"] = self.scrollbox(self.logs[mode], self.scrolling[mode], window["height"])
				count =0 
				try:
					self.windows["border"][self.display["list"]].addstr(self.h-6, self.w-18, "< "+str(len(self.logs[mode]))+" >", self.colors["green"] | curses.A_BOLD)
					self.windows["border"][self.display["list"]].noutrefresh()	
				except:
					pass
				self.windows["text"][self.display["list"]].erase()
				for lines in clipped_list:
					self.display_list_text(lines, count, self.display["list"])
					count += 1
				
				self.windows["text"][self.display["list"]].noutrefresh()
		except Exception, e:
			self.Hlog("debug", "process_list_log: " + str(e))
			
	def display_lists(self):
		try:
			if self.display["list"]=="buddies":
				this_list = self.logs["buddies"]
			elif self.display["list"]=="banned":
				this_list = self.logs["banned"]
			elif self.display["list"]=="ignored":
				this_list = self.logs["ignored"]
			clipped_list, self.scrolling[self.display["list"]], self.windows["dimensions"][self.display["list"]]["start"] = self.scrollbox(this_list, self.scrolling[self.display["list"]], self.h-7)
			count =0
			self.windows["text"][self.display["list"]].erase()
			for lines in clipped_list:
				self.display_list_text(lines, count, self.display["list"])
				count += 1
			self.windows["text"][self.display["list"]].refresh()
		except Exception, e:
			self.Hlog("debug", "display_lists: " + str(e))
			
	def list_mode(self):
		self.display["mode"] = "lists"
		self.Spl["show_menu"] = False
		if self.display["list"] == "buddies":
			self.buddy_mode()
			
		elif self.display["list"] == "banned":
			self.ban_mode()
			
		elif self.display["list"] == "ignored":
			self.ignore_mode()
			
		elif self.display["list"] == "interests":
			self.interests_mode()	
			
	def rooms_mode(self):
		try:
			self.display["mode"] = "roomlist"
			self.Spl["show_menu"] = False
			
			s = self.windows["dimensions"]["roomlist"] = {"height": self.h-7, "top": 2, "left": 1, "width": self.w-2}
			self.process_list_window("roomlist")
			
			self.sizedrooms = []
			alpharooms = []
	
			if mucous_config["mucous"]["rooms_sort"]  in ("alpha", "alpha-reversed"):
				for rooms in self.data["roomlist"].keys():
					alpharooms.append(rooms)
				alpharooms.sort()
				if mucous_config["mucous"]["rooms_sort"] =="alpha-reversed":
					alpharooms.reverse()
					
			elif mucous_config["mucous"]["rooms_sort"] in ("size", "size-reversed"):
				bigsizes = []
				bigsizes=self.sortbyvalue (self.data["roomlist"])
				if mucous_config["mucous"]["rooms_sort"] == "size":
					bigsizes.reverse()
				for rooms, sizes in bigsizes:
					alpharooms.append(rooms)
				
			for rooms9 in alpharooms:
				if self.data["roomlist"][rooms9] >= mucous_config["mucous"]["roomlistminsize"]:
					self.sizedrooms.append(rooms9)
					
			self.display_room_list_mode()
			
			self.hotkeys()
			curses.doupdate()
		except Exception, e:
			self.Hlog("debug", "rooms_mode: " + str(e))
		
		
	def display_rooms(self, roomitem, count, start):
		try:
			
			if count + start == self.scrolling["roomlist"]:
				attrib =  curses.A_BOLD | curses.A_REVERSE
			else:
				attrib = curses.A_NORMAL
			num = str(self.data["roomlist"][roomitem])
			while len(num) < 8:
				num += " "
			string = num + self.decode_language(roomitem)
			if len(string) < self.w-2:
				spaces = " " * (self.w-2 - len(string))
			else:
				string = string[:self.w-2]
				spaces = ''
			self.windows["text"]["roomlist"].addstr(string+spaces, attrib)
			
		except Exception, e:
			#self.Hlog("debug", e)
			pass
			
	def sortbyvalue(self, dict):
		try:
			""" Return a list of (key, value) pairs, sorted by value. """
			_swap2 = lambda (x,y): (y,x)
			mdict = map(_swap2, dict.items())
			mdict.sort()
			mdict = map(_swap2, mdict)
			return mdict
		except Exception, e:
			self.Hlog("debug", "sortbyvalue: " + str(e))
			
	def display_room_list_mode(self):
		try:
			self.windows["text"]["roomlist"].erase()
			clipped_list, self.scrolling["roomlist"], self.windows["dimensions"]["roomlist"]["start"] = self.scrollbox(self.sizedrooms, self.scrolling["roomlist"], self.h-7)
			count =0 
			for rooms10 in clipped_list:
				self.display_rooms(rooms10, count, self.windows["dimensions"]["roomlist"]["start"])
				count += 1
			self.windows["text"]["roomlist"].refresh()
		except:
			pass
				

		
	def setup_mode(self):
		
		self.display["mode"] = "setup"
		self.Spl["show_menu"] = False
		try:
			w = self.windows["dimensions"]["setup"] = {"height": self.h-5, "width": self.w, "top": 1, "left": 0}
			mw = self.windows["border"]["setup"] = curses.newwin(w["height"], w["width"], w["top"], w["left"])
			mw.erase()
			mw.border()
			
			if self.display["setup"] == "mucous":
				self.set_edit_title("Mucous Setup")
				try:
					mw.addstr(0, 1, "< Mucous >",  curses.A_BOLD)
					mw.addstr(0, 15, "< Museek >")
					mw.addstr(0, 30, "< Shares >")
					mw.addstr(0, 45, "< Userinfo >")
					mw.addstr(0, 60, "< Logs >")
				except:
					pass
			elif self.display["setup"] == "museek":
				try:
					mw.addstr(0, 1, "< Mucous >")
					mw.addstr(0, 15, "< Museek >",  curses.A_BOLD)
					mw.addstr(0, 30, "< Shares >")
					mw.addstr(0, 45, "< Userinfo >")
					mw.addstr(0, 60, "< Logs >")
				except:
					pass
			elif self.display["setup"] == "shares":
				try:
					mw.addstr(0, 1, "< Mucous >")
					mw.addstr(0, 15, "< Museek >")
					mw.addstr(0, 30, "< Shares >",  curses.A_BOLD)
					mw.addstr(0, 45, "< Userinfo >")
					mw.addstr(0, 60, "< Logs >")
				except:
					pass
			elif self.display["setup"] == "userinfo":
				try:
					mw.addstr(0, 1, "< Mucous >")
					mw.addstr(0, 15, "< Museek >")
					mw.addstr(0, 30, "< Shares >")
					mw.addstr(0, 45, "< Userinfo >",  curses.A_BOLD)
					mw.addstr(0, 60, "< Logs >")
				except:
					pass
			elif self.display["setup"] == "logs":
				try:
					mw.addstr(0, 1, "< Mucous >")
					mw.addstr(0, 15, "< Museek >")
					mw.addstr(0, 30, "< Shares >")
					mw.addstr(0, 45, "< Userinfo >")
					mw.addstr(0, 60, "< Logs >",  curses.A_BOLD)
				except:
					pass
			if self.Spl["setup_input"] == "default":
				self.set_edit_title("Setup Mode")
			elif self.Spl["setup_input"] == "interface":
				self.set_edit_title("Set Interface")
			elif self.Spl["setup_input"] == "custom-url":
				self.set_edit_title("Set custom URL handler: command$command")
			elif self.Spl["setup_input"] == "interface-password":
				self.set_edit_title("Set Mucous's Interface password")
			elif self.Spl["setup_input"]=="museek-interface-password":
				self.set_edit_title("Set Museek's Interface password")
			elif self.Spl["setup_input"]=="museek-interface-bind":
				self.set_edit_title("Add a Museek Interface")
			elif self.Spl["setup_input"]=="server-host":
				self.set_edit_title("Set Server Address")
			elif self.Spl["setup_input"]=="server-port":
				self.set_edit_title("Set Server Port")
			elif self.Spl["setup_input"]=="soulseek-username":
				self.set_edit_title("Set Soulseek Username")
			elif self.Spl["setup_input"]=="soulseek-password":
				self.set_edit_title("Set Soulseek Password")
			elif self.Spl["setup_input"]=="slots":
				self.set_edit_title("Set Number of Upload Slots to:")
			elif self.Spl["setup_input"]=="download-dir":
				self.set_edit_title("Set completed download directory")
			elif self.Spl["setup_input"]=="incomplete-dir":
				self.set_edit_title("Set incompleted download directory")
			elif self.Spl["setup_input"]=="userinfo":
				self.set_edit_title("Set UserInfo")
			elif self.Spl["setup_input"]=="userimage":
				self.set_edit_title("Set UserImage")
			elif self.Spl["setup_input"]=="adddir":
				self.set_edit_title("Add directory to your shares")
			elif self.Spl["setup_input"]=="rmdir":
				self.set_edit_title("Remove directory from your shares")
			
			mw.noutrefresh()
			
			if self.display["setup"] in ("shares"):
	
				# First Row
				rescanw = curses.newwin(3,16,3,1)
				rescanw.border()
				rescanw.addstr(0,1, "<muscan -r -v>")
				rescanw.noutrefresh()
				inrescanw = rescanw.subwin(1,14,4,2)
				inrescanw.scrollok(1)
				inrescanw.addstr("Rescan Shares", self.colors["cyan"])
				inrescanw.noutrefresh()
				
				rescaw = curses.newwin(3,16,3,17)
				rescaw.border()
				rescaw.addstr(0,1, "< muscan -v >")
				rescaw.noutrefresh()
				inrescaw = rescaw.subwin(1,14,4,18)
				inrescaw.scrollok(1)
				inrescaw.addstr("Update Shares", self.colors["cyan"])
				inrescaw.noutrefresh()
				
				rescah = curses.newwin(3,16,3,33)
				rescah.border()
				rescah.addstr(0,1, "<-HUP museekd>")
				rescah.noutrefresh()
				inrescah = rescah.subwin(1,14,4,34)
				inrescah.scrollok(1)
				inrescah.addstr("Reload Shares", self.colors["cyan"])
				inrescah.noutrefresh()				
				
				# Second Row
				
				lrescaw = curses.newwin(3,16,6,1)
				lrescaw.border()
				lrescaw.addstr(0,1, "< muscan -l >")
				lrescaw.noutrefresh()
				inlrescaw = lrescaw.subwin(1,14,7,2)
				inlrescaw.scrollok(1)
				inlrescaw.addstr("List Shared", self.colors["cyan"])
				inlrescaw.noutrefresh()
				
				xshare = curses.newwin(3,16,6,17)
				xshare.border()
				xshare.addstr(0,1, "<muscan -s dir>")
				xshare.noutrefresh()
				inxshare = xshare.subwin(1,14,7,18)
				inxshare.scrollok(1)
				inxshare.addstr("Add Directory", self.colors["cyan"])
				inxshare.noutrefresh()
				
				xshare = curses.newwin(3,16,6,33)
				xshare.border()
				xshare.addstr(0,1, "<muscan -u dir>")
				xshare.noutrefresh()
				inxshare = xshare.subwin(1,14,7,34)
				inxshare.scrollok(1)
				inxshare.addstr("Remove Dir", self.colors["cyan"])
				inxshare.noutrefresh()
				
				textshare = curses.newwin(6,48,9,1)
				textshare.border()
				textshare.addstr(1,1, "Click on the buttons for the local muscan.")
				textshare.addstr(2,1, "When you click on Add/Remove Directory,")
				textshare.addstr(3,1, "Type in the directory below, and start ")
				textshare.addstr(4,1, " with '//' instead of just a '/'")
				textshare.noutrefresh()
				
			elif self.display["setup"] in ("userinfo"):	
				
				inputui_w = curses.newwin(self.h-8,self.w-2,2,1)
				inputui_w.border()
				inputui_w.addstr(0,1, "<Your Userinfo>")
				inputui_w.noutrefresh()
				ininputui_w = inputui_w.subwin(self.h-10,self.w-4,3,2)
				ininputui_w.scrollok(1)
				if "text" in self.config["userinfo"]:
					for line in self.config["userinfo"]["text"]:
						try:
							ininputui_w.addstr(line.decode(mucous_config["mucous"]["language"], "replace"), self.colors["cyan"])
						except:
							pass
				ininputui_w.noutrefresh()
				
				inputimage = curses.newwin(1,13,self.h-6,1)
				inputimage.erase()
				inputimage.addstr( "Your Image: ")
				inputimage.noutrefresh()
				
				
				if "image" in self.config["userinfo"]:
					inputimage2 = curses.newwin(1,self.w-2-14,self.h-6,14)
					inputimage2.erase()
					inputimage2.scrollok(1)
					inputimage2.addstr( str(self.config["userinfo"]["image"][:self.w-3-14]))
					inputimage2.noutrefresh()
					
			elif self.display["setup"] in ("logs"):
				buttonwin = curses.newwin(3,15,2,1)
				buttonwin.border()
				buttonwin.addstr(0, 1, "< Log Chat? >",  curses.A_BOLD)
				buttonwin.noutrefresh()
				inbuttonwin = buttonwin.subwin(1,13,3,2)
				inbuttonwin.scrollok(1)
				inbuttonwin.addstr(str(mucous_config["mucous"]["logging"]), self.colors["cyan"] )
				inbuttonwin.noutrefresh()
				
				bnwin = curses.newwin(3,40,5,1)
				bnwin.border()
				bnwin.addstr(0, 1, "< Log Directory >",  curses.A_BOLD)
				bnwin.noutrefresh()
				inbnwin = bnwin.subwin(1,38,6,2)
				inbnwin.scrollok(1)
				inbnwin.addstr(os.path.expanduser(mucous_config["mucous"]["log_dir"])[:37], self.colors["cyan"] )
				inbnwin.noutrefresh()
				
			elif self.display["setup"] == "mucous":
				# Interface
				buttonwin = curses.newwin(3,32,2,1)
				buttonwin.border()
				buttonwin.addstr(0, 1, "< Museek Interface >",  curses.A_BOLD)
				buttonwin.noutrefresh()
				inbuttonwin = buttonwin.subwin(1,30,3,2)
				inbuttonwin.scrollok(1)
				if "connection" in mucous_config:
					inbuttonwin.addstr(self.decode_language( mucous_config["connection"]["interface"][:28] ), self.colors["cyan"] )
				inbuttonwin.noutrefresh()
				buttonwin2 = curses.newwin(3,32,5,1)
				buttonwin2.border()
				buttonwin2.addstr(0, 1, "< Interface Password >",  curses.A_BOLD)
				buttonwin2.noutrefresh()
				inbuttonwin2 = buttonwin2.subwin(1,30,6,2)
				inbuttonwin2.scrollok(1)
				if "connection" in mucous_config:
					if self.display["password"]=="yes":
						inbuttonwin2.addstr(self.decode_language( str(mucous_config["connection"]["passw"]) ), self.colors["cyan"])
					else:
						inbuttonwin2.addstr("*********", self.colors["cyan"])
				else:
					inbuttonwin2.addstr("NOT set")
				inbuttonwin2.noutrefresh()
				
				
				bwin = curses.newwin(6,22,2,33)
				bwin.border()
				try:
					bwin.addstr(0, 1, "< Stats >",  curses.A_BOLD)
				except:
					pass
				bwin.noutrefresh()
				inbwin1_1 = bwin.subwin(1,20,3,34)
				inbwin1_2 = bwin.subwin(1,20,4,34)
				inbwin1_3 = bwin.subwin(1,20,5,34)
				inbwin1_4 = bwin.subwin(1,20,6,34)
				inbwin1_1.scrollok(1)
				inbwin1_2.scrollok(1)
				inbwin1_3.scrollok(1)
				inbwin1_4.scrollok(1)
				if self.data["mystats"] != []:
					try:
						inbwin1_1.addstr("Files: "+str(self.data["mystats"][3]), self.colors["cyan"] )
						inbwin1_2.addstr("Dirs: "+str(self.data["mystats"][4]), self.colors["cyan"] )
						inbwin1_3.addstr("Downloads: "+str(self.data["mystats"][2]), self.colors["cyan"] )
						inbwin1_4.addstr("Speed: "+str(self.data["mystats"][1]/1024)+"KB/s", self.colors["cyan"] )
						#self.data["mystats"] = user,  avgspeed, numdownloads, numfiles, numdirs
					except:
						pass
				else:
					if self.usernames["username"] != None:
						self.send(messages.PeerStats(self.usernames["username"]))
				inbwin1_1.noutrefresh()
				inbwin1_2.noutrefresh()
				inbwin1_3.noutrefresh()
				inbwin1_4.noutrefresh()
				
				buttonwin3 = curses.newwin(3,16,8,1)
				buttonwin3.border()
				buttonwin3.addstr(0, 1, "<Show Tickers>",  curses.A_BOLD)
				buttonwin30 = curses.newwin(3,16,11,1)
				buttonwin30.border()
				buttonwin30.addstr(0, 1, "<CycleTickers>",  curses.A_BOLD)
			
				buttonwin30.noutrefresh()
				inbuttonwin30 = buttonwin30.subwin(1,14,12,2)
				inbuttonwin30.scrollok(1)
			
				buttonwin_url = curses.newwin(3,16,11,17)
				buttonwin_url.border()
				buttonwin_url.addstr(0, 1, "< URL Reader >",  curses.A_BOLD)
				buttonwin_url.noutrefresh()
				inbuttonwinurl = buttonwin_url.subwin(1,14,12,18)
				inbuttonwinurl.scrollok(1)
				inbuttonwinurl.addstr(self.decode_language(mucous_config["mucous"]["url reader"]), self.colors["cyan"])
				inbuttonwinurl.noutrefresh()
				
				buttonlanguage = curses.newwin(3,16,11,33)
				buttonlanguage.border()
				buttonlanguage.addstr(0, 1, "< Encoding >",  curses.A_BOLD)
				buttonlanguage.noutrefresh()
				inbuttonlanguage = buttonlanguage.subwin(1,14,12,34)
				inbuttonlanguage.scrollok(1)
				inbuttonlanguage.addstr(mucous_config["mucous"]["language"], self.colors["cyan"])
				inbuttonlanguage.noutrefresh()
				
				autoclearw = curses.newwin(3,16,11,49)
				autoclearw.border()
				autoclearw.addstr(0, 1, "< Auto-Clear >",  curses.A_BOLD)
				autoclearw.noutrefresh()
				inautoclearw = autoclearw.subwin(1,14,12,50)
				inautoclearw.scrollok(1)
				inautoclearw.addstr(mucous_config["mucous"]["Auto-Clear"], self.colors["cyan"])
				inautoclearw.noutrefresh()
				
				autoretryw = curses.newwin(3,16,8,49)
				autoretryw.border()
				autoretryw.addstr(0, 1, "< Auto-Retry >",  curses.A_BOLD)
				autoretryw.noutrefresh()
				inautoretryw = autoretryw.subwin(1,14,9,50)
				inautoretryw.scrollok(1)
				inautoretryw.addstr(mucous_config["mucous"]["Auto-Retry"], self.colors["cyan"])
				inautoretryw.noutrefresh()
				
				beepw = curses.newwin(3,16,14,33)
				beepw.border()
				beepw.addstr(0, 1, "< Beep >",  curses.A_BOLD)
				beepw.noutrefresh()
				inbeepw = beepw.subwin(1,14,15,34)
				inbeepw.scrollok(1)
				if "beep" in mucous_config["mucous"]:
					inbeepw.addstr(str(mucous_config["mucous"]["beep"]), self.colors["cyan"])
				inbeepw.noutrefresh()
				
				
				
				savew = curses.newwin(3,16,14,49)
				savew.border()
				savew.noutrefresh()
				insavew = savew.subwin(1,14,15,50)
				insavew.scrollok(1)
				insavew.addstr(" Save Config", self.colors["cyan"])
				insavew.noutrefresh()
								
				buttonwin_url_c = curses.newwin(3,32,14,1)
				buttonwin_url_c.border()
				buttonwin_url_c.addstr(0, 1, "< Custom URL Reader >",  curses.A_BOLD)
				buttonwin_url_c.noutrefresh()
				inbwinurl_c = buttonwin_url_c.subwin(1,30,15,2)
				inbwinurl_c.scrollok(1)
				if "url custom prefix" in mucous_config["mucous"] and "url custom suffix" in mucous_config["mucous"]:
					inbwinurl_c.addstr(self.decode_language(mucous_config["mucous"]["url custom prefix"])+"$"+self.decode_language(mucous_config["mucous"]["url custom suffix"]), self.colors["cyan"])
					inbwinurl_c.noutrefresh()
				buttonwin3.noutrefresh()
				inbuttonwin3 = buttonwin3.subwin(1,15,9,2)
				inbuttonwin3.scrollok(1)
				inbuttonwin3.addstr(mucous_config["tickers"]["tickers_enabled"], self.colors["cyan"])
				inbuttonwin3.noutrefresh()
				inbuttonwin30.addstr(mucous_config["tickers"]["ticker_cycle"], self.colors["cyan"])
				inbuttonwin30.noutrefresh()
				buttonwin4 = curses.newwin(3,16,8,17)
				buttonwin4.border()
				buttonwin4.addstr(0, 1, "<Min Roomlist>", curses.A_BOLD)
				buttonwin4.noutrefresh()
				inbuttonwin4 = buttonwin4.subwin(1,15,9,18)
				inbuttonwin4.scrollok(1)
				inbuttonwin4.addstr(" -  "+str(mucous_config["mucous"]["roomlistminsize"]), self.colors["cyan"])
				inbuttonwin4.addstr(0, 11, " + ", self.colors["cyan"])
				inbuttonwin4.noutrefresh()
				
				buttonwin5 = curses.newwin(3,16,8,33)
				buttonwin5.border()
				buttonwin5.addstr(0, 1, "< Auto-Buddy >",  curses.A_BOLD)
				buttonwin5.noutrefresh()
				inbuttonwin5 = buttonwin5.subwin(1,15,9,34)
				inbuttonwin5.scrollok(1)
				if mucous_config["mucous"]["autobuddy"] != None:
					inbuttonwin5.addstr(mucous_config["mucous"]["autobuddy"], self.colors["cyan"])
				inbuttonwin5.noutrefresh()


			elif self.display["setup"] == "museek":
				# Server
				buttonwin = curses.newwin(3,32,2,1)
				buttonwin.border()
				buttonwin.addstr(0, 1, "< Server >",  curses.A_BOLD)
					
				buttonwin.noutrefresh()
				inbuttonwin = buttonwin.subwin(1,30,3,2)
				inbuttonwin.scrollok(1)
				if "server" in self.config:
					inbuttonwin.addstr(self.decode_language( self.config["server"]["host"][:22] )+":"+self.config["server"]["port"], self.colors["cyan"] )
				inbuttonwin.noutrefresh()
				
				
				#------------------------
				buttonwin2 = curses.newwin(3,32,5,33)
				buttonwin2.border()
				buttonwin2.addstr(0, 1, "< Soulseek Password >",  curses.A_BOLD)
				buttonwin2.noutrefresh()
				inbuttonwin2 = buttonwin2.subwin(1,30,6,34)
	
				buttonwin12 = curses.newwin(3,32,5,1)
				buttonwin12.border()
				try:
					buttonwin12.addstr(0, 1, "< Museek Interface Password >",  curses.A_BOLD)
				except:
					pass
				buttonwin12.noutrefresh()
				inbuttonwin12 = buttonwin12.subwin(1,30,6,2)
				inbuttonwin12.scrollok(1)
				if "interfaces" in self.config:
					if self.display["password"]=="yes":
						inbuttonwin12.addstr(self.decode_language( self.config["interfaces"]["password"] ), self.colors["cyan"])
					else:
						inbuttonwin12.addstr("*********", self.colors["cyan"])
				inbuttonwin12.noutrefresh()
				
				inbuttonwin2.scrollok(1)

				if self.display["password"]=="yes":
					if "server" in self.config:
						inbuttonwin2.addstr(self.decode_language( self.config["server"]["password"] ), self.colors["cyan"])
					else:
						inbuttonwin2.addstr("NOT set")
				else:
					inbuttonwin2.addstr("*********", self.colors["cyan"])
				

				inbuttonwin2.noutrefresh()
				
				#------------------------
				self.usernamewin2 = curses.newwin(3,32,2,33)
				self.usernamewin2.border()
				self.usernamewin2.addstr(0, 1, "< Soulseek Username >",  curses.A_BOLD)
				self.usernamewin2.noutrefresh()
				
				inusernamewin2 = self.usernamewin2.subwin(1,30,3,34)
				inusernamewin2.scrollok(1)
				if "server" in self.config:
					a = self.decode_language(self.config["server"]["username"])
					inusernamewin2.addstr(a, self.colors["cyan"])

				inusernamewin2.noutrefresh()
				
				buttonwin3 = curses.newwin(3,16,8,1)
				buttonwin3.border()
				buttonwin3.addstr(0, 1, "<Buddies-Only>",  curses.A_BOLD)
				
				buttonwin3.noutrefresh()
				inbuttonwin3 = buttonwin3.subwin(1,15,9,2)
				inbuttonwin3.scrollok(1)
				if "transfers" in self.config:
					inbuttonwin3.addstr(self.config["transfers"]["only_buddies"], self.colors["cyan"])
					inbuttonwin3.noutrefresh()
			
				buttonwin4 = curses.newwin(3,16,8,17)
				buttonwin4.border()
				buttonwin4.addstr(0, 1, "<Buddy Privs>", curses.A_BOLD)
				buttonwin4.noutrefresh()
				inbuttonwin4 = buttonwin4.subwin(1,15,9,18)
				inbuttonwin4.scrollok(1)
				if "transfers" in self.config:
					inbuttonwin4.addstr(self.config["transfers"]["privilege_buddies"], self.colors["cyan"])
				inbuttonwin4.noutrefresh()
			
				dirwin = curses.newwin(4,64,11,1)
				dirwin.border()
				dirwin.addstr(0, 1, "< Download/Incomplete Directories >",  curses.A_BOLD)
				dirwin.noutrefresh()
				dircompletewin = dirwin.subwin(1,61,12,2)
				if "transfers" in self.config:
					dircompletewin.addstr(self.decode_language(self.config["transfers"]["download-dir"]), self.colors["cyan"])

				dircompletewin.noutrefresh()
				dirincompletewin = dirwin.subwin(1,61,13,2)
				if "transfers" in self.config:
					dirincompletewin.addstr(self.decode_language(self.config["transfers"]["incomplete-dir"]), self.colors["cyan"])
				else:
					dirincompletewin.addstr("....", self.colors["cyan"])
				dirincompletewin.noutrefresh()
				
				buttonwin5 = curses.newwin(3,16,8,33)
				buttonwin5.border()
				buttonwin5.addstr(0, 1, "<Connections>",  curses.A_BOLD)
				buttonwin5.noutrefresh()
				inbuttonwin5 = buttonwin5.subwin(1,15,9,34)
				inbuttonwin5.scrollok(1)
				if "clients" in self.config:
					inbuttonwin5.addstr(self.config["clients"]["connectmode"], self.colors["cyan"])
				inbuttonwin5.noutrefresh()
				
				buttonwin6 = curses.newwin(3,16,8,49)
				buttonwin6.border()
				buttonwin6.addstr(0, 1, "<Upload Slots>",  curses.A_BOLD)
				buttonwin6.noutrefresh()
				
				inbuttonwin6 = buttonwin6.subwin(1,15,9,50)
				inbuttonwin6.scrollok(1)
				if "transfers" in self.config:
					inbuttonwin6.addstr(" -  " + self.config["transfers"]["upload_slots"], self.colors["cyan"])
					inbuttonwin6.addstr(0, 11, " + ", self.colors["cyan"])
				inbuttonwin6.refresh()
		except Exception, e:
			self.Hlog("debug", "setup_mode: " + str(e) )
		self.topbar_mode()
		self.hotkeys()
		curses.doupdate()
	# TOPBAR MODE
	
	
	def topbar_mode(self):
		try:
			self.topbar =  curses.newwin(1, self.w, 0, 0)
			self.topbar.bkgdset(" ", self.colors["blafgcyabg"]  | curses.A_REVERSE | curses.A_BOLD)
			self.topbar.idlok(1)
			self.topbar.erase()
			self.topbar.refresh()
							
			self.onlinestatus =  curses.newwin(1, 8, 0, 0)
			self.onlinestatus.bkgdset(" ", self.colors["blafgcyabg"]  |curses.A_REVERSE | curses.A_BOLD)
			self.onlinestatus.idlok(1)
			try:
				self.onlinestatus.erase()
				self.onlinestatus.addstr(self.logs["onlinestatus"],  self.colors["blafgcyabg"] )
			except:
				pass
			self.onlinestatus.refresh()
			
			self.uploadwin = curses.newwin(1, 10, 0, 25)
			self.uploadwin.bkgdset(" ", self.colors["blafgcyabg"]  | curses.A_REVERSE | curses.A_BOLD)
			self.uploadwin.idlok(1)
			try:
				self.uploadwin.erase()
				self.uploadwin.addstr(self.logs["uploads"],  self.colors["blafgcyabg"] )
			except:
				pass
			self.uploadwin.refresh()
			
			self.downloadwin = curses.newwin(1, 12, 0, 35)
			self.downloadwin.bkgdset(" ", self.colors["blafgcyabg"]  | curses.A_REVERSE | curses.A_BOLD)
			self.downloadwin.idlok(1)
			try:
				self.downloadwin.erase()
				self.downloadwin.addstr(self.logs["downloads"],  self.colors["blafgcyabg"] )
			except:
				pass
			self.downloadwin.refresh()
			
		
			self.searchwin = curses.newwin(1, 15, 0, 47)
			self.searchwin.bkgdset(" ", self.colors["blafgcyabg"]  | curses.A_REVERSE | curses.A_BOLD)
			self.searchwin.idlok(1)
			try:
				self.searchwin.erase()
				self.searchwin.addstr(self.logs["search_count"][0],  self.colors["blafgcyabg"] )
				self.searchwin.addstr(str(self.logs["search_count"][1]),  self.colors["blafgcyabg"] )
			except:
				pass
			self.searchwin.refresh()
		
		
			self.alertwin = curses.newwin(1, 15, 0, self.w-15)
			self.alertwin.bkgdset(" ", self.colors["blafgcyabg"]  | curses.A_REVERSE | curses.A_BOLD)
			self.alertwin.idlok(1)
			
			self.alert_status(self.logs["alert"])
		
			self.usernamewin = curses.newwin(1, 16, 0, 9)
			self.usernamewin.idlok(1)
			self.usernamewin.bkgdset(" ", self.colors["blafgcyabg"]  | curses.A_REVERSE | curses.A_BOLD)
			
			if self.usernames["username"] != None:
				try:
					self.usernamewin.erase()
					self.usernamewin.addstr(self.decode_language(self.usernames["username"][:15]),  self.colors["blafgcyabg"] )
				except:
					pass
			self.usernamewin.refresh()
		
		except Exception,e :
			self.Hlog("debug", "topbar mode" + str(e))

		
	def hotkeys(self):
		try:
			self.bottomwin = curses.newwin(1, self.w-1, self.h-1, 0)
			self.bottomwin.addstr(" 1",  curses.A_BOLD)
			if self.display["mode"] == "chat":
				if self.alert["CHAT"] != {}:
					nick = 0
					for room, status in self.alert["CHAT"].items():
						if status == "nick":
							nick = 1
					if nick == 1:
						self.bottomwin.addstr("Chat", self.colors["red"] |curses.A_BOLD |curses.A_REVERSE )
					else:
						self.bottomwin.addstr("Chat", self.colors["yellow"] |curses.A_BOLD |curses.A_REVERSE )
				else:
					self.bottomwin.addstr("Chat",  curses.A_REVERSE |  self.colors["greenbg"])
			else:
				if self.alert["CHAT"] != {}:
					nick = 0
					for room, status in self.alert["CHAT"].items():
						if status == "nick":
							nick = 1
					if nick == 1:
						self.bottomwin.addstr("Chat", self.colors["red"] | curses.A_REVERSE )
					else:
						self.bottomwin.addstr("Chat", self.colors["yellow"] | curses.A_REVERSE )
				else:
					self.bottomwin.addstr("Chat",  self.colors["cybg"])
			self.bottomwin.addstr(" 2",  curses.A_BOLD)
			if self.display["mode"] == "private":
				if self.alert["PRIVATE"] != []:
					self.bottomwin.addstr("Private", self.colors["yellow"] |curses.A_BOLD |curses.A_REVERSE )
				else:
					self.bottomwin.addstr("Private",curses.A_REVERSE |  self.colors["greenbg"])
			else:
				if self.alert["PRIVATE"] != []:
					self.bottomwin.addstr("Private", self.colors["yellow"] |curses.A_REVERSE )
				else:
					self.bottomwin.addstr("Private", self.colors["cybg"])
			self.bottomwin.addstr(" 3",   curses.A_BOLD)
			if self.display["mode"] == "transfer":
				self.bottomwin.addstr("Transfers",curses.A_REVERSE |  self.colors["greenbg"])
			else:
				self.bottomwin.addstr("Transfers", self.colors["cybg"])
			
			self.bottomwin.addstr(" 4",  curses.A_BOLD)
			if self.display["mode"] == "search":
				if self.alert["SEARCH"] != []:
					self.bottomwin.addstr("Search", self.colors["yellow"] |curses.A_REVERSE |curses.A_BOLD)
				else:
					self.bottomwin.addstr("Search",curses.A_REVERSE |  self.colors["greenbg"])
			else:
				if self.alert["SEARCH"] != []:
					self.bottomwin.addstr("Search", self.colors["yellow"] |curses.A_REVERSE )
				else:
					self.bottomwin.addstr("Search", self.colors["cybg"])
			self.bottomwin.addstr(" 5",  curses.A_BOLD)
			if self.display["mode"] == "info":
				if self.alert["INFO"] != []:
					self.bottomwin.addstr("Info", self.colors["yellow"] |curses.A_REVERSE |curses.A_BOLD)
				else:
					self.bottomwin.addstr("Info",curses.A_REVERSE |  self.colors["greenbg"])
			else:
				if self.alert["INFO"] != []:
					self.bottomwin.addstr("Info", self.colors["yellow"] |curses.A_REVERSE )
				else:
					self.bottomwin.addstr("Info", self.colors["cybg"])
			self.bottomwin.addstr(" 6",  curses.A_BOLD)
			if self.display["mode"] == "browse":
				if self.alert["BROWSE"] != []:
					self.bottomwin.addstr("Browse", self.colors["yellow"] |curses.A_REVERSE |curses.A_BOLD)
				else:
					self.bottomwin.addstr("Browse",curses.A_REVERSE |  self.colors["greenbg"])
			else:
				if self.alert["BROWSE"] != []:
					self.bottomwin.addstr("Browse", self.colors["yellow"] |curses.A_REVERSE)
				else:
					self.bottomwin.addstr("Browse", self.colors["cybg"])
	
			self.bottomwin.addstr(" 7",  curses.A_BOLD)
			if self.display["mode"] == "lists":
				self.bottomwin.addstr("Users",curses.A_REVERSE |  self.colors["greenbg"])
			else:
				self.bottomwin.addstr("Users",  self.colors["cybg"])
	
			self.bottomwin.addstr(" 8",  curses.A_BOLD)
			if self.display["mode"] == "roomlist":
				self.bottomwin.addstr("Rooms",curses.A_REVERSE |  self.colors["greenbg"])
			else:
				self.bottomwin.addstr("Rooms", self.colors["cybg"])
	
			self.bottomwin.addstr(" 9",  curses.A_BOLD)
			if self.display["mode"] == "setup":
				self.bottomwin.addstr("Setup",curses.A_REVERSE |  self.colors["greenbg"])
			else:
				self.bottomwin.addstr("Setup",  self.colors["cybg"])
			self.bottomwin.addstr(" 10",  curses.A_BOLD)
			if self.display["mode"] in ("debug", "help", "status"):
				if self.alert["HELP"] != []:
					self.bottomwin.addstr("Help", self.colors["yellow"] |curses.A_BOLD |curses.A_REVERSE )
				else:
					self.bottomwin.addstr("Help",curses.A_REVERSE |  self.colors["greenbg"])
			else:
				if self.alert["HELP"] != []:
					self.bottomwin.addstr("Help", self.colors["yellow"] | curses.A_REVERSE )
				else:
					self.bottomwin.addstr("Help",  self.colors["cybg"])
		except:
			pass
		self.bottomwin.noutrefresh()

	# ---^  MODES ^
		
	# --- TEXT PLACEMENT v
	def log_to_file(self, messagetype, timestamp, place, message):
		try:
			if '/' in place:
				place = place.replace("/", "\\")
			path = os.path.join(os.path.expanduser(mucous_config["mucous"]["log_dir"]), messagetype, place)
			dir = os.path.split(path)[0]
			try:
				if not os.path.isdir(dir):
					os.makedirs(dir)
				f = open(path, "a")
				message.replace("\n","\\n")
				f.write("%s %s\n" % (timestamp, message))
				f.close()
			except:
				self.Hlog("status", "Cannot write to file %s, check permissions" % path)
		except Exception, e:
			self.Hlog("debug", "log_to_file: " + str(e))
			
	def start_pm(self, user):
		try:
			self.usernames["private"] = user
			if user not in self.logs["private"].keys():
				self.logs["private"][user] = []
				if mucous_config["mucous"]["logging"] in (True, "True"):
					self.add_logs_to_private(user)
				
			if self.display["mode"] == 'private':
				self.private_mode()
		except Exception, e:
			self.Hlog("debug", "start_pm: " + str(e))
			
	def private_log(self, pmtype, user, message):
		try:
			timestamp = time.strftime("%H:%M:%S")
			if user not in self.logs["private"].keys():
				self.logs["private"][user]=['']
	
			if message[:4] == "/me ":
				if pmtype == "outgoing":
					self.logs["private"][user].append("%s * %s %s" % (timestamp, self.usernames["username"],  message[4:]))
				elif pmtype == "incoming":
					self.logs["private"][user].append("%s * %s %s" % (timestamp, user,  message[4:]))
			else:
				
				if pmtype == "outgoing":
					self.logs["private"][user].append("%s You told %s: %s" % (timestamp, user, message))
				elif pmtype == "incoming":
					self.logs["private"][user].append("%s %s said: %s" % (timestamp, user, message))
					
			if self.usernames["private"] == None:
				self.usernames["private"] = user
				if self.display["mode"] == "private":
					self.private_mode()
			elif self.usernames["private"] == user:
				if self.display["mode"] == "private":
					self.private_mode()
			elif self.usernames["private"] != user and self.usernames["private"] != None:
				self.alert_status("PM: "+user)
				
		except Exception, e:
			self.Hlog( "debug", "private_log: " + str(e))
				
	def info_log(self, s):
		try:
			s= self.decode_language(s)
			if "\n" in s:
				lis = s.split("\n")
				for line in lis:
					self.infolog.append("%s" % line)
			else:
				self.infolog.append("%s" % s)
			if self.display["mode"] == "info" and self.usernames["info"] == None:
				self.info_display()
		except Exception, e:
			self.Hlog("debug", "info_log: " + str(e))
			
	def buddy_log(self, mtype, user, note):
		try:
			self.logs["buddies"].append([mtype, user, note])
		except Exception, e:
			self.Hlog("debug", "buddy_log: " + str(e))

	def ban_log(self, mtype, user, note):
		try:
			self.logs["banned"].append([mtype, user, note])
		except Exception, e:
			self.Hlog("debug", "ban_log: " + str(e))

	def ignore_log(self, mtype, user, note):
		try:
			self.logs["ignored"].append([mtype, user, note])
		except Exception, e:
			self.Hlog("debug", "ignore_log: " + str(e))

	def log_window(self, user, room, did, what):
		try:
			yes = 0
			if did == "ticker" and what != '':
				if user in self.data["rooms"][room]:
					#self.logs["status"][room].append("\n%s %s set ticker to %s" % (time.strftime("%H:%M:%S"), user, what))
					if room == self.Spl["room"]:
						yes =1
						
			elif did == "join":
				self.logs["status"][room].append("\n%s %s joined" % (time.strftime("%H:%M:%S"), user))
				if room == self.Spl["room"]:
					yes =1
					
			elif did == "left":
				self.logs["status"][room].append("\n%s %s left" % (time.strftime("%H:%M:%S"), user))
				if room == self.Spl["room"]:
					yes =1
			elif did == "change":
				for rooms11 in self.data["rooms"].keys():
					if user in self.data["rooms"][rooms11]:
						string = "\n%s %s is %s" % (time.strftime("%H:%M:%S"), user, what)
						if self.logs["status"][rooms11] == []:
							self.logs["status"][rooms11].append(string)
							if rooms11 == self.Spl["room"]:
								yes =1
						elif string[10:] != self.logs["status"][rooms11][-1][10:]:
							self.logs["status"][rooms11].append(string)
							if rooms11 == self.Spl["room"]:
								yes = 1
								
			
			if self.display["mode"] == "chat":
				try:
					if self.display["chatshape"] not in ("chat-only", "nostatuslog") and yes == 1:
						if self.Spl["show_menu"] == True: raise  Exception,  "popup"
						if self.logs["status"][self.Spl["room"]][-1] is self.logs["status"][self.Spl["room"]][0]:
							self.logwin.addstr(self.decode_language( self.logs["status"][self.Spl["room"]][-1][1:] ))
						else:
							self.logwin.addstr(self.decode_language( self.logs["status"][self.Spl["room"]][-1] ))
						
						self.logwin.refresh()
				except Exception, e:
					pass
					#self.Hlog("debug", e)
		except Exception, e:
			self.Hlog("debug", "log_window: " + str(e))

	def search_status(self, s):
		try:
			if self.logs["search_count"] == ["Results: ", s]:
				pass
			else:
				self.logs["search_count"] = "Results: ", s
				try:
					self.searchwin.erase()
					self.searchwin.addstr(self.logs["search_count"][0],  self.colors["blafgcyabg"] )
					self.searchwin.addstr(str(self.logs["search_count"][1]),  self.colors["blafgcyabg"] )
					self.searchwin.refresh()
				except Exception, e:
					self.Hlog( "debug", "Search Status: " + str(e))
		except Exception, e:
			self.Hlog("debug", "search_status: " + str(e))
		
	def upload_status(self, s):
		try:
			if self.logs["uploads"] == "Up: %s" %str(s):
				pass
			else:
				self.logs["uploads"] = "Up: %s" %str(s)
				try:
					self.uploadwin.erase()
					self.uploadwin.addstr(self.logs["uploads"], self.colors["blafgcyabg"] )
					self.uploadwin.refresh()
				except Exception, e:
					self.Hlog( "debug", "Upload Status: " + str(e))
		except Exception, e:
			self.Hlog("debug", "upload_status: " + str(e))
		
	def download_status(self, s):
		try:
			if self.logs["downloads"] == "Down: %s" %str(s):
				pass
			else:
				self.logs["downloads"] = "Down: %s" %str(s)
				try:
					self.downloadwin.erase()
					self.downloadwin.addstr(self.logs["downloads"], self.colors["blafgcyabg"] )
					self.downloadwin.refresh()
				except Exception, e:
					self.Hlog( "debug", "Download Status: " + str(e))
		except Exception, e:
			self.Hlog("debug", "download_status: " + str(e))

	def check_alert_state(self):
		try:
			if self.display["mode"] == "chat":
				if self.Spl["room"] in self.alert["CHAT"].keys():
					del self.alert["CHAT"][self.Spl["room"]]
			elif self.display["mode"] == "private":
				if self.usernames["private"] in self.alert["PRIVATE"]:
					self.alert["PRIVATE"].remove(self.usernames["private"])
			elif self.display["mode"] == "browse":
				if self.usernames["browse"] in self.alert["BROWSE"] and self.usernames["browse"] != "__default":
					self.alert["BROWSE"].remove(self.usernames["browse"])
			elif self.display["mode"] == "search":
				if self.Spl["current_search"] in self.alert["SEARCH"]:
					self.alert["SEARCH"].remove(self.Spl["current_search"])
			elif self.display["mode"] == "info":
				if self.usernames["info"] in self.alert["INFO"]:
					self.alert["INFO"].remove(self.usernames["info"])
			elif self.display["mode"] in ("help", "debug", "status"):
				#if ("debug", "help", "status") in self.alert["HELP"]:
				self.alert["HELP"] = []
			self.alert_next()
			self.hotkeys()
		except Exception, e:
			self.Hlog("debug", "check_alert_state: " + str(e))

	def alert_next(self):
		try:
			if self.display["mode"] ==  "search":
				if self.alert[self.display["mode"].upper()] != []:
					for s in self.alert[self.display["mode"].upper()]:
						self.alert_status(self.data["search_tickets"][s])
						return
				else:
					self.alert_pick()
			if self.display["mode"] in ("info", "private",  "browse"):
			#if self.display["mode"].upper() in ("PRIVATE", "TRANSFERS",  "SEARCH", "INFO", "BROWSE"):
			
				if self.alert[self.display["mode"].upper()] != []:
					for s in self.alert[self.display["mode"].upper()]:
						self.alert_status(s)
						return
				else:
					self.alert_pick()
			elif self.display["mode"].upper()  == "CHAT":
				if self.alert[self.display["mode"].upper()] != {}:
					for m, l in self.alert["CHAT"].items():
						self.alert_status(m)
						return
					self.alert_status("")
				else:
					self.alert_pick()
			elif self.display["mode"] in ("help", "debug", "status"):
				for s in self.alert["HELP"]:
					if s == "help":
						self.alert_status("New Help")
					elif s == "debug":
						self.alert_status("New Bug")
					elif s == "status":	
						self.alert_status("New Status")
					break
				else:
					self.alert_pick()
			else:
				self.alert_pick()
		except Exception, e:
			self.Hlog( "debug", "alert_next: " + str(e))
			
	def alert_pick(self):
		try:
			for mode, lists in self.alert.items():
				#self.helplog.append(str(mode)+" " +str(l))
				if lists == []:
					continue
				elif lists == {}:
					continue
				
				if mode == "HELP":
					for s in self.alert["HELP"]:
						if s == "help":
							self.alert_status("New Help")
						elif s == "debug":
							self.alert_status("New Bug")
						elif s == "status":	
							self.alert_status("New Status")
						break
					return
				elif mode == "SEARCH":
					for s in self.alert["SEARCH"]:
						self.alert_status(self.data["search_tickets"][s])
						return

				for i in lists:
					if i != "":
						self.alert_status(i)
						return
			self.alert_status("")
		except Exception, e:
			self.Hlog( "debug", "alert_pick: " + str(e))
			
	def alert_status(self, s):
		try:
			self.logs["alert"] = s
			self.alertwin.erase()
			
			if len(self.logs["alert"][:14]) < 13 and len(self.logs["alert"][:14]) > 0:
				line = " "+self.decode_language( self.logs["alert"][:14] )+" "
			else:
				line = self.decode_language( self.logs["alert"][:14] )
			self.alertwin.addstr(line, self.colors["yellow"] )
			self.alertwin.refresh()
		except Exception, e:
			self.Hlog( "debug", "Alert Status: " + str(e))
				
				
	def shutdown(self):
		try:
			# Quit		
			self.timer.cancel()
			self.ticker_timer.cancel()
			self.muscan_timer.cancel()
			self.retry_timer.cancel()
			self.clear_timer.cancel()
		except Exception, e:
			self.Hlog("debug", "shutdown: " + str(e))
		self.stdscr.keypad(0)
		curses.nocbreak()
		curses.echo()
		curses.endwin()
	
		os._exit(1)
	# --- TEXT PLACEMENT ^
try:
	curses.wrapper(mucous())
except Exception, e:
	print e